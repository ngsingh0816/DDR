
video.elf:     file format elf32-littlenios2
video.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00004014 memsz 0x00004014 flags r-x
    LOAD off    0x00005034 vaddr 0x10004034 paddr 0x10005ab4 align 2**12
         filesz 0x00001a80 memsz 0x00001a80 flags rw-
    LOAD off    0x00007534 vaddr 0x10007534 paddr 0x10007534 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003e40  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  10003ffc  10003ffc  00004ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a80  10004034  10005ab4  00005034  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  10007534  10007534  00007534  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00006ab4  2**0
                  CONTENTS
  7 .sdram        00000000  1000768c  1000768c  00006ab4  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00006ab4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006b0  00000000  00000000  00006af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000af63  00000000  00000000  000071a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000036f8  00000000  00000000  00012103  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000039d5  00000000  00000000  000157fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000e0c  00000000  00000000  000191d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001d76  00000000  00000000  00019fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001c89  00000000  00000000  0001bd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0001d9dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000f0  00000000  00000000  0001d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001fba5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001fba8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001fbb4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001fbb5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001fbb6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001fbba  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001fbbe  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0001fbc2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0001fbcd  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0001fbd8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  0001fbe3  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000f  00000000  00000000  0001fbe7  2**0
                  CONTENTS, READONLY
 30 .jdi          00003c79  00000000  00000000  0001fbf6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00062ed1  00000000  00000000  0002386f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10003ffc l    d  .rodata	00000000 .rodata
10004034 l    d  .rwdata	00000000 .rwdata
10007534 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1000768c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../video_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 graphics.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 pio.cpp
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1000443c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
10001d68 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10005a8c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
10001fb4 l     F .text	00000038 alt_dev_reg
10004860 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000228c l     F .text	000001fc altera_avalon_jtag_uart_irq
10002488 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
10002be0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10002d1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10002d48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100031d4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000332c l     F .text	00000050 alt_get_errno
1000337c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
10001e4c g     F .text	00000078 alt_main
1000758c g     O .bss	00000100 alt_irq
10005ab4 g       *ABS*	00000000 __flash_rwdata_start
1000768c g       *ABS*	00000000 __alt_heap_start
10005a6c g     O .rwdata	00000004 gpu_instruction
10001ee4 g     F .text	00000020 __malloc_unlock
100001f8 g     F .text	00000048 _Z12InitGraphicsv
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10007534 g     O .bss	00000004 spriteTable
10000020 g       *ABS*	00000000 __flash_exceptions_start
10007548 g     O .bss	00000004 errno
10007550 g     O .bss	00000004 alt_argv
1000da68 g       *ABS*	00000000 _gp
100058e8 g     O .rwdata	00000180 alt_fd_list
10003808 g     F .text	00000090 alt_find_dev
10003b48 g     F .text	0000010c memcpy
100032b4 g     F .text	00000078 alt_io_redirect
10003ffc g       *ABS*	00000000 __DTOR_END__
10007538 g     O .bss	00000004 spriteIndex
10002680 g     F .text	00000208 altera_avalon_jtag_uart_read
10000ff8 g     F .text	00000014 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10000b5c g     F .text	00000270 _Z20FillRoundedRectangletttt5Colort
100002f0 g     F .text	0000013c _Z14UploadGraphicsv
10007544 g     O .bss	00000004 __malloc_top_pad
10000240 g     F .text	0000003c _Z15DeallocGraphicsv
10005a70 g     O .rwdata	00000004 gpu_run
100018f8 g     F .text	00000064 _sbrk_r
10005aa0 g     O .rwdata	00000004 alt_max_fd
10007540 g     O .bss	00000004 __malloc_max_sbrked_mem
10005a84 g     O .rwdata	00000004 _global_impure_ptr
1000768c g       *ABS*	00000000 __bss_end
100030e4 g     F .text	000000f0 alt_iic_isr_register
100036e4 g     F .text	00000104 alt_tick
10003098 g     F .text	0000004c alt_ic_irq_enabled
1000364c g     F .text	00000098 alt_alarm_stop
10007558 g     O .bss	00000004 alt_irq_active
10000670 g     F .text	00000270 _Z15StrokeRectangletttt5Colort
10005a74 g     O .rwdata	00000004 gpu_ready
100000ec g     F .exceptions	000000d0 alt_irq_handler
100058c0 g     O .rwdata	00000028 alt_dev_null
1000027c g     F .text	0000003c _Z12WaitForVSYNCv
10002d00 g     F .text	0000001c alt_dcache_flush_all
10005ab4 g       *ABS*	00000000 __ram_rwdata_end
10005a98 g     O .rwdata	00000008 alt_dev_list
10004034 g       *ABS*	00000000 __ram_rodata_end
1000768c g       *ABS*	00000000 end
100021cc g     F .text	000000c0 altera_avalon_jtag_uart_init
10003ffc g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000042c g     F .text	00000244 _Z13FillRectangletttt5Color
10002888 g     F .text	00000218 altera_avalon_jtag_uart_write
10001a98 g     F .text	000002d0 _free_r
10003dfc g     F .text	000001a4 __call_exitprocs
10005a7c g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1000755c g     O .bss	00000004 _alt_tick_rate
10007560 g     O .bss	00000004 _alt_nticks
10002020 g     F .text	00000048 alt_sys_init
10003ce0 g     F .text	0000011c __register_exitproc
1000252c g     F .text	00000068 altera_avalon_jtag_uart_close
10003fa0 g     F .text	00000028 .hidden __mulsi3
10004034 g       *ABS*	00000000 __ram_rwdata_start
10003ffc g       *ABS*	00000000 __ram_rodata_start
10007564 g     O .bss	00000028 __malloc_current_mallinfo
10002068 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100039ac g     F .text	000000d4 alt_get_fd
10003acc g     F .text	0000007c memcmp
10002128 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000768c g       *ABS*	00000000 __alt_stack_base
10002178 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004034 g     O .rwdata	00000408 __malloc_av_
10003898 g     F .text	00000114 alt_find_file
10002d98 g     F .text	000000a0 alt_dev_llist_insert
10001ec4 g     F .text	00000020 __malloc_lock
10001f04 g     F .text	000000b0 sbrk
10000dcc g     F .text	000000a4 _Z18SetBackgroundColor5Color
10007534 g       *ABS*	00000000 __bss_start
100017e4 g     F .text	00000114 memset
10000ef0 g     F .text	000000ac main
10007554 g     O .bss	00000004 alt_envp
1000753c g     O .bss	00000004 __malloc_max_total_mem
100020c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100008e0 g     F .text	0000027c _Z9FillImagetttt5Colorj
10000f9c  w    F .text	0000005c _ZN5ColorC2Ehhh
18000000 g       *ABS*	00000000 __alt_heap_limit
10001020 g     F .text	000007c4 _malloc_r
10005aa4 g     O .rwdata	00000004 alt_errno
1000195c g     F .text	0000013c _malloc_trim_r
10003ffc g       *ABS*	00000000 __CTOR_END__
10003ffc g       *ABS*	00000000 __flash_rodata_start
10003ffc g       *ABS*	00000000 __DTOR_LIST__
10001fec g     F .text	00000034 alt_irq_init
100035cc g     F .text	00000080 alt_release_fd
10003a80 g     F .text	00000014 atexit
10005a88 g     O .rwdata	00000004 _impure_ptr
1000754c g     O .bss	00000004 alt_argc
10002e94 g     F .text	0000005c _do_dtors
10000f9c  w    F .text	0000005c _ZN5ColorC1Ehhh
10000020 g       .exceptions	00000000 alt_irq_entry
100002b8 g     F .text	00000038 _Z15WaitForNotVSYNCv
10005a90 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10002f0c g     F .text	00000050 alt_ic_isr_register
10005ab4 g       *ABS*	00000000 _edata
1000768c g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
10002594 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10000e70 g     F .text	00000080 _Z16SetSpriteAddressj
10005a78 g     O .rwdata	00000004 gpu_sprite
10002ff8 g     F .text	000000a0 alt_ic_irq_disable
10005a80 g     O .rwdata	00000004 __malloc_trim_threshold
100037e8 g     F .text	00000020 altera_nios2_qsys_irq_init
10003a94 g     F .text	00000038 exit
10005a68 g     O .rwdata	00000004 vga_vsync
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
10003fc8 g     F .text	00000034 _exit
10002aa0 g     F .text	00000140 alt_alarm_start
10003c54 g     F .text	0000008c strlen
10003470 g     F .text	0000015c open
10002ef0 g     F .text	0000001c alt_icache_flush_all
10005aa8 g     O .rwdata	00000004 alt_priority_mask
10002f5c g     F .text	0000009c alt_ic_irq_enable
10005aac g     O .rwdata	00000008 alt_alarm_list
10002e38 g     F .text	0000005c _do_ctors
10002c30 g     F .text	000000d0 close
10001dcc g     F .text	00000080 alt_load
1000100c g     F .text	00000014 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40034 	movhi	r3,4096
10000130:	18dd6304 	addi	r3,r3,30092
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040034 	movhi	r4,4096
10000148:	211d6304 	addi	r4,r4,30092
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
100001c8:	d6b69a14 	ori	gp,gp,55912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
100001d0:	109d4d14 	ori	r2,r2,30004

    movhi r3, %hi(__bss_end)
100001d4:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
100001d8:	18dda314 	ori	r3,r3,30348

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	0001dcc0 	call	10001dcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	0001e4c0 	call	10001e4c <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <_Z12InitGraphicsv>:
#define TABLE_SIZE		(SPRITE_SIZE * SPRITE_NUMBER)

u8* spriteTable = NULL;
u32 spriteIndex = 0;

void InitGraphics() {
100001f8:	defffe04 	addi	sp,sp,-8
100001fc:	dfc00115 	stw	ra,4(sp)
10000200:	df000015 	stw	fp,0(sp)
10000204:	d839883a 	mov	fp,sp
	// 88 bits = 11 bytes * 64 entries
	spriteTable = (u8*)malloc(TABLE_SIZE);
10000208:	0100b004 	movi	r4,704
1000020c:	0000ff80 	call	10000ff8 <malloc>
10000210:	d0a6b315 	stw	r2,-25908(gp)
	// Clear to 0
	memset(spriteTable, 0, TABLE_SIZE);
10000214:	d0a6b317 	ldw	r2,-25908(gp)
10000218:	1009883a 	mov	r4,r2
1000021c:	000b883a 	mov	r5,zero
10000220:	0180b004 	movi	r6,704
10000224:	00017e40 	call	100017e4 <memset>

	// Start from the first sprite
	spriteIndex = 0;
10000228:	d026b415 	stw	zero,-25904(gp)
}
1000022c:	e037883a 	mov	sp,fp
10000230:	dfc00117 	ldw	ra,4(sp)
10000234:	df000017 	ldw	fp,0(sp)
10000238:	dec00204 	addi	sp,sp,8
1000023c:	f800283a 	ret

10000240 <_Z15DeallocGraphicsv>:

void DeallocGraphics() {
10000240:	defffe04 	addi	sp,sp,-8
10000244:	dfc00115 	stw	ra,4(sp)
10000248:	df000015 	stw	fp,0(sp)
1000024c:	d839883a 	mov	fp,sp
	// Cleanup
	if (spriteTable) {
10000250:	d0a6b317 	ldw	r2,-25908(gp)
10000254:	10000426 	beq	r2,zero,10000268 <_Z15DeallocGraphicsv+0x28>
		free(spriteTable);
10000258:	d0a6b317 	ldw	r2,-25908(gp)
1000025c:	1009883a 	mov	r4,r2
10000260:	000100c0 	call	1000100c <free>
		spriteTable = NULL;
10000264:	d026b315 	stw	zero,-25908(gp)
	}
}
10000268:	e037883a 	mov	sp,fp
1000026c:	dfc00117 	ldw	ra,4(sp)
10000270:	df000017 	ldw	fp,0(sp)
10000274:	dec00204 	addi	sp,sp,8
10000278:	f800283a 	ret

1000027c <_Z12WaitForVSYNCv>:

void WaitForVSYNC() {
1000027c:	deffff04 	addi	sp,sp,-4
10000280:	df000015 	stw	fp,0(sp)
10000284:	d839883a 	mov	fp,sp
	// Wait for vsync
	while (!(*vga_vsync)) {}
10000288:	0001883a 	nop
1000028c:	00840034 	movhi	r2,4096
10000290:	10969a04 	addi	r2,r2,23144
10000294:	10800017 	ldw	r2,0(r2)
10000298:	10800017 	ldw	r2,0(r2)
1000029c:	1005003a 	cmpeq	r2,r2,zero
100002a0:	10803fcc 	andi	r2,r2,255
100002a4:	103ff91e 	bne	r2,zero,1000028c <__alt_data_end+0xf800028c>
}
100002a8:	e037883a 	mov	sp,fp
100002ac:	df000017 	ldw	fp,0(sp)
100002b0:	dec00104 	addi	sp,sp,4
100002b4:	f800283a 	ret

100002b8 <_Z15WaitForNotVSYNCv>:

void WaitForNotVSYNC() {
100002b8:	deffff04 	addi	sp,sp,-4
100002bc:	df000015 	stw	fp,0(sp)
100002c0:	d839883a 	mov	fp,sp
	// Wait for not vsync
	while ((*vga_vsync)) {}
100002c4:	00840034 	movhi	r2,4096
100002c8:	10969a04 	addi	r2,r2,23144
100002cc:	10800017 	ldw	r2,0(r2)
100002d0:	10800017 	ldw	r2,0(r2)
100002d4:	1004c03a 	cmpne	r2,r2,zero
100002d8:	10803fcc 	andi	r2,r2,255
100002dc:	103ff91e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
}
100002e0:	e037883a 	mov	sp,fp
100002e4:	df000017 	ldw	fp,0(sp)
100002e8:	dec00104 	addi	sp,sp,4
100002ec:	f800283a 	ret

100002f0 <_Z14UploadGraphicsv>:

void UploadGraphics() {
100002f0:	defffd04 	addi	sp,sp,-12
100002f4:	dfc00215 	stw	ra,8(sp)
100002f8:	df000115 	stw	fp,4(sp)
100002fc:	df000104 	addi	fp,sp,4
	// Set the place where we start uploading data to the beginning
	SetSpriteAddress(0);
10000300:	0009883a 	mov	r4,zero
10000304:	0000e700 	call	10000e70 <_Z16SetSpriteAddressj>

	// Tell the gpu we are uploading sprite data
	*gpu_sprite = true;
10000308:	00840034 	movhi	r2,4096
1000030c:	10969e04 	addi	r2,r2,23160
10000310:	10800017 	ldw	r2,0(r2)
10000314:	00c00044 	movi	r3,1
10000318:	10c00015 	stw	r3,0(r2)

	// Upload the data 4 bytes at a time
	for (u32 z = 0; z < spriteIndex; z += 4) {
1000031c:	e03fff15 	stw	zero,-4(fp)
10000320:	00003506 	br	100003f8 <_Z14UploadGraphicsv+0x108>
		// Wait for the gpu to be ready
		while (!(*gpu_ready)) {}
10000324:	0001883a 	nop
10000328:	00840034 	movhi	r2,4096
1000032c:	10969d04 	addi	r2,r2,23156
10000330:	10800017 	ldw	r2,0(r2)
10000334:	10800017 	ldw	r2,0(r2)
10000338:	1005003a 	cmpeq	r2,r2,zero
1000033c:	10803fcc 	andi	r2,r2,255
10000340:	103ff91e 	bne	r2,zero,10000328 <__alt_data_end+0xf8000328>

		// Upload the next 4 bytes (low byte is low byte)
		*gpu_instruction = (spriteTable[z + 3] << 24) | (spriteTable[z + 2] << 16) | (spriteTable[z + 1] << 8) | spriteTable[z];
10000344:	00840034 	movhi	r2,4096
10000348:	10969b04 	addi	r2,r2,23148
1000034c:	10800017 	ldw	r2,0(r2)
10000350:	d126b317 	ldw	r4,-25908(gp)
10000354:	e0ffff17 	ldw	r3,-4(fp)
10000358:	18c000c4 	addi	r3,r3,3
1000035c:	20c7883a 	add	r3,r4,r3
10000360:	18c00003 	ldbu	r3,0(r3)
10000364:	18c03fcc 	andi	r3,r3,255
10000368:	1808963a 	slli	r4,r3,24
1000036c:	d166b317 	ldw	r5,-25908(gp)
10000370:	e0ffff17 	ldw	r3,-4(fp)
10000374:	18c00084 	addi	r3,r3,2
10000378:	28c7883a 	add	r3,r5,r3
1000037c:	18c00003 	ldbu	r3,0(r3)
10000380:	18c03fcc 	andi	r3,r3,255
10000384:	1806943a 	slli	r3,r3,16
10000388:	20c8b03a 	or	r4,r4,r3
1000038c:	d166b317 	ldw	r5,-25908(gp)
10000390:	e0ffff17 	ldw	r3,-4(fp)
10000394:	18c00044 	addi	r3,r3,1
10000398:	28c7883a 	add	r3,r5,r3
1000039c:	18c00003 	ldbu	r3,0(r3)
100003a0:	18c03fcc 	andi	r3,r3,255
100003a4:	1806923a 	slli	r3,r3,8
100003a8:	20c8b03a 	or	r4,r4,r3
100003ac:	d166b317 	ldw	r5,-25908(gp)
100003b0:	e0ffff17 	ldw	r3,-4(fp)
100003b4:	28c7883a 	add	r3,r5,r3
100003b8:	18c00003 	ldbu	r3,0(r3)
100003bc:	18c03fcc 	andi	r3,r3,255
100003c0:	20c6b03a 	or	r3,r4,r3
100003c4:	10c00015 	stw	r3,0(r2)

		// Toggle run
		*gpu_run = true;
100003c8:	00840034 	movhi	r2,4096
100003cc:	10969c04 	addi	r2,r2,23152
100003d0:	10800017 	ldw	r2,0(r2)
100003d4:	00c00044 	movi	r3,1
100003d8:	10c00015 	stw	r3,0(r2)
		*gpu_run = false;
100003dc:	00840034 	movhi	r2,4096
100003e0:	10969c04 	addi	r2,r2,23152
100003e4:	10800017 	ldw	r2,0(r2)
100003e8:	10000015 	stw	zero,0(r2)

	// Tell the gpu we are uploading sprite data
	*gpu_sprite = true;

	// Upload the data 4 bytes at a time
	for (u32 z = 0; z < spriteIndex; z += 4) {
100003ec:	e0bfff17 	ldw	r2,-4(fp)
100003f0:	10800104 	addi	r2,r2,4
100003f4:	e0bfff15 	stw	r2,-4(fp)
100003f8:	d0a6b417 	ldw	r2,-25904(gp)
100003fc:	e0ffff17 	ldw	r3,-4(fp)
10000400:	18bfc836 	bltu	r3,r2,10000324 <__alt_data_end+0xf8000324>
		*gpu_run = true;
		*gpu_run = false;
	}

	// Tell the gpu we are done uploading sprite data
	*gpu_sprite = false;
10000404:	00840034 	movhi	r2,4096
10000408:	10969e04 	addi	r2,r2,23160
1000040c:	10800017 	ldw	r2,0(r2)
10000410:	10000015 	stw	zero,0(r2)

	// Reset this so we start at the first sprite
	spriteIndex = 0;
10000414:	d026b415 	stw	zero,-25904(gp)
}
10000418:	e037883a 	mov	sp,fp
1000041c:	dfc00117 	ldw	ra,4(sp)
10000420:	df000017 	ldw	fp,0(sp)
10000424:	dec00204 	addi	sp,sp,8
10000428:	f800283a 	ret

1000042c <_Z13FillRectangletttt5Color>:

// Graphics operations
void FillRectangle(u16 x, u16 y, u16 width, u16 height, Color color) {
1000042c:	defff904 	addi	sp,sp,-28
10000430:	df000615 	stw	fp,24(sp)
10000434:	df000604 	addi	fp,sp,24
10000438:	2011883a 	mov	r8,r4
1000043c:	2809883a 	mov	r4,r5
10000440:	3007883a 	mov	r3,r6
10000444:	3805883a 	mov	r2,r7
10000448:	e23ffc0d 	sth	r8,-16(fp)
1000044c:	e13ffd0d 	sth	r4,-12(fp)
10000450:	e0fffe0d 	sth	r3,-8(fp)
10000454:	e0bfff0d 	sth	r2,-4(fp)
	// Format: sprite type (0:3), x pos (4:13), y pos (14:22), width (23:32), height (33:41), blue (42:49), green (50:57), red (58:65), unused(66:87)

	// Make sure these values don't go over (for safety, can be taken out for small speed increase probably)
	u16 realX = x & 0x3FF;
10000458:	e0bffc0b 	ldhu	r2,-16(fp)
1000045c:	1080ffcc 	andi	r2,r2,1023
10000460:	e0bffa0d 	sth	r2,-24(fp)
	u16 realY = y & 0x1FF;
10000464:	e0bffd0b 	ldhu	r2,-12(fp)
10000468:	10807fcc 	andi	r2,r2,511
1000046c:	e0bffa8d 	sth	r2,-22(fp)
	u16 realWidth = width & 0x3FF;
10000470:	e0bffe0b 	ldhu	r2,-8(fp)
10000474:	1080ffcc 	andi	r2,r2,1023
10000478:	e0bffb0d 	sth	r2,-20(fp)
	u16 realHeight = height & 0x1FF;
1000047c:	e0bfff0b 	ldhu	r2,-4(fp)
10000480:	10807fcc 	andi	r2,r2,511
10000484:	e0bffb8d 	sth	r2,-18(fp)

	// Copy over the data
	spriteTable[spriteIndex++] = 0x1 | ((realX & 0xF) << 4);
10000488:	d0e6b317 	ldw	r3,-25908(gp)
1000048c:	d0a6b417 	ldw	r2,-25904(gp)
10000490:	11000044 	addi	r4,r2,1
10000494:	d126b415 	stw	r4,-25904(gp)
10000498:	1885883a 	add	r2,r3,r2
1000049c:	e0fffa0b 	ldhu	r3,-24(fp)
100004a0:	1806913a 	slli	r3,r3,4
100004a4:	18c00054 	ori	r3,r3,1
100004a8:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realX >> 4) | ((realY & 0x3) << 6);
100004ac:	d0e6b317 	ldw	r3,-25908(gp)
100004b0:	d0a6b417 	ldw	r2,-25904(gp)
100004b4:	11000044 	addi	r4,r2,1
100004b8:	d126b415 	stw	r4,-25904(gp)
100004bc:	1885883a 	add	r2,r3,r2
100004c0:	e0fffa0b 	ldhu	r3,-24(fp)
100004c4:	1807d13a 	srai	r3,r3,4
100004c8:	1809883a 	mov	r4,r3
100004cc:	e0fffa8b 	ldhu	r3,-22(fp)
100004d0:	180691ba 	slli	r3,r3,6
100004d4:	20c6b03a 	or	r3,r4,r3
100004d8:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realY >> 2) | ((realWidth & 0x1) << 7);
100004dc:	d0e6b317 	ldw	r3,-25908(gp)
100004e0:	d0a6b417 	ldw	r2,-25904(gp)
100004e4:	11000044 	addi	r4,r2,1
100004e8:	d126b415 	stw	r4,-25904(gp)
100004ec:	1885883a 	add	r2,r3,r2
100004f0:	e0fffa8b 	ldhu	r3,-22(fp)
100004f4:	1807d0ba 	srai	r3,r3,2
100004f8:	1809883a 	mov	r4,r3
100004fc:	e0fffb0b 	ldhu	r3,-20(fp)
10000500:	180691fa 	slli	r3,r3,7
10000504:	20c6b03a 	or	r3,r4,r3
10000508:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 1);
1000050c:	d0e6b317 	ldw	r3,-25908(gp)
10000510:	d0a6b417 	ldw	r2,-25904(gp)
10000514:	11000044 	addi	r4,r2,1
10000518:	d126b415 	stw	r4,-25904(gp)
1000051c:	1885883a 	add	r2,r3,r2
10000520:	e0fffb0b 	ldhu	r3,-20(fp)
10000524:	1807d07a 	srai	r3,r3,1
10000528:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 9) | ((realHeight & 0x7F) << 1);
1000052c:	d0e6b317 	ldw	r3,-25908(gp)
10000530:	d0a6b417 	ldw	r2,-25904(gp)
10000534:	11000044 	addi	r4,r2,1
10000538:	d126b415 	stw	r4,-25904(gp)
1000053c:	1887883a 	add	r3,r3,r2
10000540:	e0bffb0b 	ldhu	r2,-20(fp)
10000544:	1005d27a 	srai	r2,r2,9
10000548:	1009883a 	mov	r4,r2
1000054c:	e0bffb8b 	ldhu	r2,-18(fp)
10000550:	1085883a 	add	r2,r2,r2
10000554:	2084b03a 	or	r2,r4,r2
10000558:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (realHeight >> 7) | ((color.blue & 0x3F) << 2);
1000055c:	d0e6b317 	ldw	r3,-25908(gp)
10000560:	d0a6b417 	ldw	r2,-25904(gp)
10000564:	11000044 	addi	r4,r2,1
10000568:	d126b415 	stw	r4,-25904(gp)
1000056c:	1887883a 	add	r3,r3,r2
10000570:	e0bffb8b 	ldhu	r2,-18(fp)
10000574:	1005d1fa 	srai	r2,r2,7
10000578:	1009883a 	mov	r4,r2
1000057c:	e0800183 	ldbu	r2,6(fp)
10000580:	10803fcc 	andi	r2,r2,255
10000584:	1085883a 	add	r2,r2,r2
10000588:	1085883a 	add	r2,r2,r2
1000058c:	2084b03a 	or	r2,r4,r2
10000590:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.blue >> 6) | ((color.green & 0x3F) << 2);
10000594:	d0e6b317 	ldw	r3,-25908(gp)
10000598:	d0a6b417 	ldw	r2,-25904(gp)
1000059c:	11000044 	addi	r4,r2,1
100005a0:	d126b415 	stw	r4,-25904(gp)
100005a4:	1887883a 	add	r3,r3,r2
100005a8:	e0800183 	ldbu	r2,6(fp)
100005ac:	10803fcc 	andi	r2,r2,255
100005b0:	1005d1ba 	srai	r2,r2,6
100005b4:	1009883a 	mov	r4,r2
100005b8:	e0800143 	ldbu	r2,5(fp)
100005bc:	10803fcc 	andi	r2,r2,255
100005c0:	1085883a 	add	r2,r2,r2
100005c4:	1085883a 	add	r2,r2,r2
100005c8:	2084b03a 	or	r2,r4,r2
100005cc:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.green >> 6) | ((color.red & 0x3F) << 2);
100005d0:	d0e6b317 	ldw	r3,-25908(gp)
100005d4:	d0a6b417 	ldw	r2,-25904(gp)
100005d8:	11000044 	addi	r4,r2,1
100005dc:	d126b415 	stw	r4,-25904(gp)
100005e0:	1887883a 	add	r3,r3,r2
100005e4:	e0800143 	ldbu	r2,5(fp)
100005e8:	10803fcc 	andi	r2,r2,255
100005ec:	1005d1ba 	srai	r2,r2,6
100005f0:	1009883a 	mov	r4,r2
100005f4:	e0800103 	ldbu	r2,4(fp)
100005f8:	10803fcc 	andi	r2,r2,255
100005fc:	1085883a 	add	r2,r2,r2
10000600:	1085883a 	add	r2,r2,r2
10000604:	2084b03a 	or	r2,r4,r2
10000608:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.red >> 6);
1000060c:	d0e6b317 	ldw	r3,-25908(gp)
10000610:	d0a6b417 	ldw	r2,-25904(gp)
10000614:	11000044 	addi	r4,r2,1
10000618:	d126b415 	stw	r4,-25904(gp)
1000061c:	1885883a 	add	r2,r3,r2
10000620:	e0c00103 	ldbu	r3,4(fp)
10000624:	18c03fcc 	andi	r3,r3,255
10000628:	1807d1ba 	srai	r3,r3,6
1000062c:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = 0;
10000630:	d0e6b317 	ldw	r3,-25908(gp)
10000634:	d0a6b417 	ldw	r2,-25904(gp)
10000638:	11000044 	addi	r4,r2,1
1000063c:	d126b415 	stw	r4,-25904(gp)
10000640:	1885883a 	add	r2,r3,r2
10000644:	10000005 	stb	zero,0(r2)
	spriteTable[spriteIndex++] = 0;
10000648:	d0e6b317 	ldw	r3,-25908(gp)
1000064c:	d0a6b417 	ldw	r2,-25904(gp)
10000650:	11000044 	addi	r4,r2,1
10000654:	d126b415 	stw	r4,-25904(gp)
10000658:	1885883a 	add	r2,r3,r2
1000065c:	10000005 	stb	zero,0(r2)
}
10000660:	e037883a 	mov	sp,fp
10000664:	df000017 	ldw	fp,0(sp)
10000668:	dec00104 	addi	sp,sp,4
1000066c:	f800283a 	ret

10000670 <_Z15StrokeRectangletttt5Colort>:

void StrokeRectangle(u16 x, u16 y, u16 width, u16 height, Color color, u16 strokeWidth) {
10000670:	defff704 	addi	sp,sp,-36
10000674:	df000815 	stw	fp,32(sp)
10000678:	df000804 	addi	fp,sp,32
1000067c:	2011883a 	mov	r8,r4
10000680:	3009883a 	mov	r4,r6
10000684:	3807883a 	mov	r3,r7
10000688:	e0800217 	ldw	r2,8(fp)
1000068c:	e23ffb0d 	sth	r8,-20(fp)
10000690:	e17ffc0d 	sth	r5,-16(fp)
10000694:	e13ffd0d 	sth	r4,-12(fp)
10000698:	e0fffe0d 	sth	r3,-8(fp)
1000069c:	e0bfff0d 	sth	r2,-4(fp)
	// Format: sprite type (0:3), x pos (4:13), y pos (14:22), width (23:32), height (33:41), blue (42:49), green (50:57),
	//			red (58:65), strokeWidth(66:75), unused(76:87)

	// Make sure these values don't go over (for safety, can be taken out for small speed increase probably)
	u16 realX = x & 0x3FF;
100006a0:	e0bffb0b 	ldhu	r2,-20(fp)
100006a4:	1080ffcc 	andi	r2,r2,1023
100006a8:	e0bff80d 	sth	r2,-32(fp)
	u16 realY = y & 0x1FF;
100006ac:	e0bffc0b 	ldhu	r2,-16(fp)
100006b0:	10807fcc 	andi	r2,r2,511
100006b4:	e0bff88d 	sth	r2,-30(fp)
	u16 realWidth = width & 0x3FF;
100006b8:	e0bffd0b 	ldhu	r2,-12(fp)
100006bc:	1080ffcc 	andi	r2,r2,1023
100006c0:	e0bff90d 	sth	r2,-28(fp)
	u16 realHeight = height & 0x1FF;
100006c4:	e0bffe0b 	ldhu	r2,-8(fp)
100006c8:	10807fcc 	andi	r2,r2,511
100006cc:	e0bff98d 	sth	r2,-26(fp)
	u16 realStroke = strokeWidth & 0x3FF;
100006d0:	e0bfff0b 	ldhu	r2,-4(fp)
100006d4:	1080ffcc 	andi	r2,r2,1023
100006d8:	e0bffa0d 	sth	r2,-24(fp)

	// Copy over the data
	spriteTable[spriteIndex++] = 0x2 | ((realX & 0xF) << 4);
100006dc:	d0e6b317 	ldw	r3,-25908(gp)
100006e0:	d0a6b417 	ldw	r2,-25904(gp)
100006e4:	11000044 	addi	r4,r2,1
100006e8:	d126b415 	stw	r4,-25904(gp)
100006ec:	1885883a 	add	r2,r3,r2
100006f0:	e0fff80b 	ldhu	r3,-32(fp)
100006f4:	1806913a 	slli	r3,r3,4
100006f8:	18c00094 	ori	r3,r3,2
100006fc:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realX >> 4) | ((realY & 0x3) << 6);
10000700:	d0e6b317 	ldw	r3,-25908(gp)
10000704:	d0a6b417 	ldw	r2,-25904(gp)
10000708:	11000044 	addi	r4,r2,1
1000070c:	d126b415 	stw	r4,-25904(gp)
10000710:	1885883a 	add	r2,r3,r2
10000714:	e0fff80b 	ldhu	r3,-32(fp)
10000718:	1807d13a 	srai	r3,r3,4
1000071c:	1809883a 	mov	r4,r3
10000720:	e0fff88b 	ldhu	r3,-30(fp)
10000724:	180691ba 	slli	r3,r3,6
10000728:	20c6b03a 	or	r3,r4,r3
1000072c:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realY >> 2) | ((realWidth & 0x1) << 7);
10000730:	d0e6b317 	ldw	r3,-25908(gp)
10000734:	d0a6b417 	ldw	r2,-25904(gp)
10000738:	11000044 	addi	r4,r2,1
1000073c:	d126b415 	stw	r4,-25904(gp)
10000740:	1885883a 	add	r2,r3,r2
10000744:	e0fff88b 	ldhu	r3,-30(fp)
10000748:	1807d0ba 	srai	r3,r3,2
1000074c:	1809883a 	mov	r4,r3
10000750:	e0fff90b 	ldhu	r3,-28(fp)
10000754:	180691fa 	slli	r3,r3,7
10000758:	20c6b03a 	or	r3,r4,r3
1000075c:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 1);
10000760:	d0e6b317 	ldw	r3,-25908(gp)
10000764:	d0a6b417 	ldw	r2,-25904(gp)
10000768:	11000044 	addi	r4,r2,1
1000076c:	d126b415 	stw	r4,-25904(gp)
10000770:	1885883a 	add	r2,r3,r2
10000774:	e0fff90b 	ldhu	r3,-28(fp)
10000778:	1807d07a 	srai	r3,r3,1
1000077c:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 9) | ((realHeight & 0x7F) << 1);
10000780:	d0e6b317 	ldw	r3,-25908(gp)
10000784:	d0a6b417 	ldw	r2,-25904(gp)
10000788:	11000044 	addi	r4,r2,1
1000078c:	d126b415 	stw	r4,-25904(gp)
10000790:	1887883a 	add	r3,r3,r2
10000794:	e0bff90b 	ldhu	r2,-28(fp)
10000798:	1005d27a 	srai	r2,r2,9
1000079c:	1009883a 	mov	r4,r2
100007a0:	e0bff98b 	ldhu	r2,-26(fp)
100007a4:	1085883a 	add	r2,r2,r2
100007a8:	2084b03a 	or	r2,r4,r2
100007ac:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (realHeight >> 7) | ((color.blue & 0x3F) << 2);
100007b0:	d0e6b317 	ldw	r3,-25908(gp)
100007b4:	d0a6b417 	ldw	r2,-25904(gp)
100007b8:	11000044 	addi	r4,r2,1
100007bc:	d126b415 	stw	r4,-25904(gp)
100007c0:	1887883a 	add	r3,r3,r2
100007c4:	e0bff98b 	ldhu	r2,-26(fp)
100007c8:	1005d1fa 	srai	r2,r2,7
100007cc:	1009883a 	mov	r4,r2
100007d0:	e0800183 	ldbu	r2,6(fp)
100007d4:	10803fcc 	andi	r2,r2,255
100007d8:	1085883a 	add	r2,r2,r2
100007dc:	1085883a 	add	r2,r2,r2
100007e0:	2084b03a 	or	r2,r4,r2
100007e4:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.blue >> 6) | ((color.green & 0x3F) << 2);
100007e8:	d0e6b317 	ldw	r3,-25908(gp)
100007ec:	d0a6b417 	ldw	r2,-25904(gp)
100007f0:	11000044 	addi	r4,r2,1
100007f4:	d126b415 	stw	r4,-25904(gp)
100007f8:	1887883a 	add	r3,r3,r2
100007fc:	e0800183 	ldbu	r2,6(fp)
10000800:	10803fcc 	andi	r2,r2,255
10000804:	1005d1ba 	srai	r2,r2,6
10000808:	1009883a 	mov	r4,r2
1000080c:	e0800143 	ldbu	r2,5(fp)
10000810:	10803fcc 	andi	r2,r2,255
10000814:	1085883a 	add	r2,r2,r2
10000818:	1085883a 	add	r2,r2,r2
1000081c:	2084b03a 	or	r2,r4,r2
10000820:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.green >> 6) | ((color.red & 0x3F) << 2);
10000824:	d0e6b317 	ldw	r3,-25908(gp)
10000828:	d0a6b417 	ldw	r2,-25904(gp)
1000082c:	11000044 	addi	r4,r2,1
10000830:	d126b415 	stw	r4,-25904(gp)
10000834:	1887883a 	add	r3,r3,r2
10000838:	e0800143 	ldbu	r2,5(fp)
1000083c:	10803fcc 	andi	r2,r2,255
10000840:	1005d1ba 	srai	r2,r2,6
10000844:	1009883a 	mov	r4,r2
10000848:	e0800103 	ldbu	r2,4(fp)
1000084c:	10803fcc 	andi	r2,r2,255
10000850:	1085883a 	add	r2,r2,r2
10000854:	1085883a 	add	r2,r2,r2
10000858:	2084b03a 	or	r2,r4,r2
1000085c:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.red >> 6) | ((realStroke & 0x3F) << 2);
10000860:	d0e6b317 	ldw	r3,-25908(gp)
10000864:	d0a6b417 	ldw	r2,-25904(gp)
10000868:	11000044 	addi	r4,r2,1
1000086c:	d126b415 	stw	r4,-25904(gp)
10000870:	1887883a 	add	r3,r3,r2
10000874:	e0800103 	ldbu	r2,4(fp)
10000878:	10803fcc 	andi	r2,r2,255
1000087c:	1005d1ba 	srai	r2,r2,6
10000880:	1009883a 	mov	r4,r2
10000884:	e0bffa0b 	ldhu	r2,-24(fp)
10000888:	1085883a 	add	r2,r2,r2
1000088c:	1085883a 	add	r2,r2,r2
10000890:	2084b03a 	or	r2,r4,r2
10000894:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (realStroke >> 6);
10000898:	d0e6b317 	ldw	r3,-25908(gp)
1000089c:	d0a6b417 	ldw	r2,-25904(gp)
100008a0:	11000044 	addi	r4,r2,1
100008a4:	d126b415 	stw	r4,-25904(gp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	e0fffa0b 	ldhu	r3,-24(fp)
100008b0:	1807d1ba 	srai	r3,r3,6
100008b4:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = 0;
100008b8:	d0e6b317 	ldw	r3,-25908(gp)
100008bc:	d0a6b417 	ldw	r2,-25904(gp)
100008c0:	11000044 	addi	r4,r2,1
100008c4:	d126b415 	stw	r4,-25904(gp)
100008c8:	1885883a 	add	r2,r3,r2
100008cc:	10000005 	stb	zero,0(r2)
}
100008d0:	e037883a 	mov	sp,fp
100008d4:	df000017 	ldw	fp,0(sp)
100008d8:	dec00104 	addi	sp,sp,4
100008dc:	f800283a 	ret

100008e0 <_Z9FillImagetttt5Colorj>:

void FillImage(u16 x, u16 y, u16 width, u16 height, Color color, u32 address) {
100008e0:	defff804 	addi	sp,sp,-32
100008e4:	df000715 	stw	fp,28(sp)
100008e8:	df000704 	addi	fp,sp,28
100008ec:	2011883a 	mov	r8,r4
100008f0:	2809883a 	mov	r4,r5
100008f4:	3007883a 	mov	r3,r6
100008f8:	3805883a 	mov	r2,r7
100008fc:	e23ffc0d 	sth	r8,-16(fp)
10000900:	e13ffd0d 	sth	r4,-12(fp)
10000904:	e0fffe0d 	sth	r3,-8(fp)
10000908:	e0bfff0d 	sth	r2,-4(fp)
	// Format: sprite type (0:3), x pos (4:13), y pos (14:22), width (23:32), height (33:41), blue (42:49), green (50:57),
	//			red (58:65), address(66:85), unused(86:87)

	// Make sure these values don't go over (for safety, can be taken out for small speed increase probably)
	u16 realX = x & 0x3FF;
1000090c:	e0bffc0b 	ldhu	r2,-16(fp)
10000910:	1080ffcc 	andi	r2,r2,1023
10000914:	e0bff90d 	sth	r2,-28(fp)
	u16 realY = y & 0x1FF;
10000918:	e0bffd0b 	ldhu	r2,-12(fp)
1000091c:	10807fcc 	andi	r2,r2,511
10000920:	e0bff98d 	sth	r2,-26(fp)
	u16 realWidth = width & 0x3FF;
10000924:	e0bffe0b 	ldhu	r2,-8(fp)
10000928:	1080ffcc 	andi	r2,r2,1023
1000092c:	e0bffa0d 	sth	r2,-24(fp)
	u16 realHeight = height & 0x1FF;
10000930:	e0bfff0b 	ldhu	r2,-4(fp)
10000934:	10807fcc 	andi	r2,r2,511
10000938:	e0bffa8d 	sth	r2,-22(fp)
	u32 realAddress = address & 0xFFFFF;
1000093c:	e0c00217 	ldw	r3,8(fp)
10000940:	00800434 	movhi	r2,16
10000944:	10bfffc4 	addi	r2,r2,-1
10000948:	1884703a 	and	r2,r3,r2
1000094c:	e0bffb15 	stw	r2,-20(fp)

	// Copy over the data
	spriteTable[spriteIndex++] = 0x3 | ((realX & 0xF) << 4);
10000950:	d0e6b317 	ldw	r3,-25908(gp)
10000954:	d0a6b417 	ldw	r2,-25904(gp)
10000958:	11000044 	addi	r4,r2,1
1000095c:	d126b415 	stw	r4,-25904(gp)
10000960:	1885883a 	add	r2,r3,r2
10000964:	e0fff90b 	ldhu	r3,-28(fp)
10000968:	1806913a 	slli	r3,r3,4
1000096c:	18c000d4 	ori	r3,r3,3
10000970:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realX >> 4) | ((realY & 0x3) << 6);
10000974:	d0e6b317 	ldw	r3,-25908(gp)
10000978:	d0a6b417 	ldw	r2,-25904(gp)
1000097c:	11000044 	addi	r4,r2,1
10000980:	d126b415 	stw	r4,-25904(gp)
10000984:	1885883a 	add	r2,r3,r2
10000988:	e0fff90b 	ldhu	r3,-28(fp)
1000098c:	1807d13a 	srai	r3,r3,4
10000990:	1809883a 	mov	r4,r3
10000994:	e0fff98b 	ldhu	r3,-26(fp)
10000998:	180691ba 	slli	r3,r3,6
1000099c:	20c6b03a 	or	r3,r4,r3
100009a0:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realY >> 2) | ((realWidth & 0x1) << 7);
100009a4:	d0e6b317 	ldw	r3,-25908(gp)
100009a8:	d0a6b417 	ldw	r2,-25904(gp)
100009ac:	11000044 	addi	r4,r2,1
100009b0:	d126b415 	stw	r4,-25904(gp)
100009b4:	1885883a 	add	r2,r3,r2
100009b8:	e0fff98b 	ldhu	r3,-26(fp)
100009bc:	1807d0ba 	srai	r3,r3,2
100009c0:	1809883a 	mov	r4,r3
100009c4:	e0fffa0b 	ldhu	r3,-24(fp)
100009c8:	180691fa 	slli	r3,r3,7
100009cc:	20c6b03a 	or	r3,r4,r3
100009d0:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 1);
100009d4:	d0e6b317 	ldw	r3,-25908(gp)
100009d8:	d0a6b417 	ldw	r2,-25904(gp)
100009dc:	11000044 	addi	r4,r2,1
100009e0:	d126b415 	stw	r4,-25904(gp)
100009e4:	1885883a 	add	r2,r3,r2
100009e8:	e0fffa0b 	ldhu	r3,-24(fp)
100009ec:	1807d07a 	srai	r3,r3,1
100009f0:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 9) | ((realHeight & 0x7F) << 1);
100009f4:	d0e6b317 	ldw	r3,-25908(gp)
100009f8:	d0a6b417 	ldw	r2,-25904(gp)
100009fc:	11000044 	addi	r4,r2,1
10000a00:	d126b415 	stw	r4,-25904(gp)
10000a04:	1887883a 	add	r3,r3,r2
10000a08:	e0bffa0b 	ldhu	r2,-24(fp)
10000a0c:	1005d27a 	srai	r2,r2,9
10000a10:	1009883a 	mov	r4,r2
10000a14:	e0bffa8b 	ldhu	r2,-22(fp)
10000a18:	1085883a 	add	r2,r2,r2
10000a1c:	2084b03a 	or	r2,r4,r2
10000a20:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (realHeight >> 7) | ((color.blue & 0x3F) << 2);
10000a24:	d0e6b317 	ldw	r3,-25908(gp)
10000a28:	d0a6b417 	ldw	r2,-25904(gp)
10000a2c:	11000044 	addi	r4,r2,1
10000a30:	d126b415 	stw	r4,-25904(gp)
10000a34:	1887883a 	add	r3,r3,r2
10000a38:	e0bffa8b 	ldhu	r2,-22(fp)
10000a3c:	1005d1fa 	srai	r2,r2,7
10000a40:	1009883a 	mov	r4,r2
10000a44:	e0800183 	ldbu	r2,6(fp)
10000a48:	10803fcc 	andi	r2,r2,255
10000a4c:	1085883a 	add	r2,r2,r2
10000a50:	1085883a 	add	r2,r2,r2
10000a54:	2084b03a 	or	r2,r4,r2
10000a58:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.blue >> 6) | ((color.green & 0x3F) << 2);
10000a5c:	d0e6b317 	ldw	r3,-25908(gp)
10000a60:	d0a6b417 	ldw	r2,-25904(gp)
10000a64:	11000044 	addi	r4,r2,1
10000a68:	d126b415 	stw	r4,-25904(gp)
10000a6c:	1887883a 	add	r3,r3,r2
10000a70:	e0800183 	ldbu	r2,6(fp)
10000a74:	10803fcc 	andi	r2,r2,255
10000a78:	1005d1ba 	srai	r2,r2,6
10000a7c:	1009883a 	mov	r4,r2
10000a80:	e0800143 	ldbu	r2,5(fp)
10000a84:	10803fcc 	andi	r2,r2,255
10000a88:	1085883a 	add	r2,r2,r2
10000a8c:	1085883a 	add	r2,r2,r2
10000a90:	2084b03a 	or	r2,r4,r2
10000a94:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.green >> 6) | ((color.red & 0x3F) << 2);
10000a98:	d0e6b317 	ldw	r3,-25908(gp)
10000a9c:	d0a6b417 	ldw	r2,-25904(gp)
10000aa0:	11000044 	addi	r4,r2,1
10000aa4:	d126b415 	stw	r4,-25904(gp)
10000aa8:	1887883a 	add	r3,r3,r2
10000aac:	e0800143 	ldbu	r2,5(fp)
10000ab0:	10803fcc 	andi	r2,r2,255
10000ab4:	1005d1ba 	srai	r2,r2,6
10000ab8:	1009883a 	mov	r4,r2
10000abc:	e0800103 	ldbu	r2,4(fp)
10000ac0:	10803fcc 	andi	r2,r2,255
10000ac4:	1085883a 	add	r2,r2,r2
10000ac8:	1085883a 	add	r2,r2,r2
10000acc:	2084b03a 	or	r2,r4,r2
10000ad0:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.red >> 6) | ((realAddress & 0x3F) << 2);
10000ad4:	d0e6b317 	ldw	r3,-25908(gp)
10000ad8:	d0a6b417 	ldw	r2,-25904(gp)
10000adc:	11000044 	addi	r4,r2,1
10000ae0:	d126b415 	stw	r4,-25904(gp)
10000ae4:	1887883a 	add	r3,r3,r2
10000ae8:	e0800103 	ldbu	r2,4(fp)
10000aec:	10803fcc 	andi	r2,r2,255
10000af0:	1005d1ba 	srai	r2,r2,6
10000af4:	1009883a 	mov	r4,r2
10000af8:	e0bffb17 	ldw	r2,-20(fp)
10000afc:	1085883a 	add	r2,r2,r2
10000b00:	1085883a 	add	r2,r2,r2
10000b04:	2084b03a 	or	r2,r4,r2
10000b08:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (realAddress >> 6) & 0xFF;
10000b0c:	d0e6b317 	ldw	r3,-25908(gp)
10000b10:	d0a6b417 	ldw	r2,-25904(gp)
10000b14:	11000044 	addi	r4,r2,1
10000b18:	d126b415 	stw	r4,-25904(gp)
10000b1c:	1885883a 	add	r2,r3,r2
10000b20:	e0fffb17 	ldw	r3,-20(fp)
10000b24:	1806d1ba 	srli	r3,r3,6
10000b28:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = realAddress >> 14;
10000b2c:	d0e6b317 	ldw	r3,-25908(gp)
10000b30:	d0a6b417 	ldw	r2,-25904(gp)
10000b34:	11000044 	addi	r4,r2,1
10000b38:	d126b415 	stw	r4,-25904(gp)
10000b3c:	1885883a 	add	r2,r3,r2
10000b40:	e0fffb17 	ldw	r3,-20(fp)
10000b44:	1806d3ba 	srli	r3,r3,14
10000b48:	10c00005 	stb	r3,0(r2)
}
10000b4c:	e037883a 	mov	sp,fp
10000b50:	df000017 	ldw	fp,0(sp)
10000b54:	dec00104 	addi	sp,sp,4
10000b58:	f800283a 	ret

10000b5c <_Z20FillRoundedRectangletttt5Colort>:

void FillRoundedRectangle(u16 x, u16 y, u16 width, u16 height, Color color, u16 radius) {
10000b5c:	defff704 	addi	sp,sp,-36
10000b60:	df000815 	stw	fp,32(sp)
10000b64:	df000804 	addi	fp,sp,32
10000b68:	2011883a 	mov	r8,r4
10000b6c:	3009883a 	mov	r4,r6
10000b70:	3807883a 	mov	r3,r7
10000b74:	e0800217 	ldw	r2,8(fp)
10000b78:	e23ffb0d 	sth	r8,-20(fp)
10000b7c:	e17ffc0d 	sth	r5,-16(fp)
10000b80:	e13ffd0d 	sth	r4,-12(fp)
10000b84:	e0fffe0d 	sth	r3,-8(fp)
10000b88:	e0bfff0d 	sth	r2,-4(fp)
	// Format: sprite type (0:3), x pos (4:13), y pos (14:22), width (23:32), height (33:41), blue (42:49), green (50:57),
	//			red (58:65), strokeWidth(66:75), unused(76:87)

	// Make sure these values don't go over (for safety, can be taken out for small speed increase probably)
	u16 realX = x & 0x3FF;
10000b8c:	e0bffb0b 	ldhu	r2,-20(fp)
10000b90:	1080ffcc 	andi	r2,r2,1023
10000b94:	e0bff80d 	sth	r2,-32(fp)
	u16 realY = y & 0x1FF;
10000b98:	e0bffc0b 	ldhu	r2,-16(fp)
10000b9c:	10807fcc 	andi	r2,r2,511
10000ba0:	e0bff88d 	sth	r2,-30(fp)
	u16 realWidth = width & 0x3FF;
10000ba4:	e0bffd0b 	ldhu	r2,-12(fp)
10000ba8:	1080ffcc 	andi	r2,r2,1023
10000bac:	e0bff90d 	sth	r2,-28(fp)
	u16 realHeight = height & 0x1FF;
10000bb0:	e0bffe0b 	ldhu	r2,-8(fp)
10000bb4:	10807fcc 	andi	r2,r2,511
10000bb8:	e0bff98d 	sth	r2,-26(fp)
	u16 realRadius = radius & 0x3FF;
10000bbc:	e0bfff0b 	ldhu	r2,-4(fp)
10000bc0:	1080ffcc 	andi	r2,r2,1023
10000bc4:	e0bffa0d 	sth	r2,-24(fp)

	// Copy over the data
	spriteTable[spriteIndex++] = 0x4 | ((realX & 0xF) << 4);
10000bc8:	d0e6b317 	ldw	r3,-25908(gp)
10000bcc:	d0a6b417 	ldw	r2,-25904(gp)
10000bd0:	11000044 	addi	r4,r2,1
10000bd4:	d126b415 	stw	r4,-25904(gp)
10000bd8:	1885883a 	add	r2,r3,r2
10000bdc:	e0fff80b 	ldhu	r3,-32(fp)
10000be0:	1806913a 	slli	r3,r3,4
10000be4:	18c00114 	ori	r3,r3,4
10000be8:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realX >> 4) | ((realY & 0x3) << 6);
10000bec:	d0e6b317 	ldw	r3,-25908(gp)
10000bf0:	d0a6b417 	ldw	r2,-25904(gp)
10000bf4:	11000044 	addi	r4,r2,1
10000bf8:	d126b415 	stw	r4,-25904(gp)
10000bfc:	1885883a 	add	r2,r3,r2
10000c00:	e0fff80b 	ldhu	r3,-32(fp)
10000c04:	1807d13a 	srai	r3,r3,4
10000c08:	1809883a 	mov	r4,r3
10000c0c:	e0fff88b 	ldhu	r3,-30(fp)
10000c10:	180691ba 	slli	r3,r3,6
10000c14:	20c6b03a 	or	r3,r4,r3
10000c18:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realY >> 2) | ((realWidth & 0x1) << 7);
10000c1c:	d0e6b317 	ldw	r3,-25908(gp)
10000c20:	d0a6b417 	ldw	r2,-25904(gp)
10000c24:	11000044 	addi	r4,r2,1
10000c28:	d126b415 	stw	r4,-25904(gp)
10000c2c:	1885883a 	add	r2,r3,r2
10000c30:	e0fff88b 	ldhu	r3,-30(fp)
10000c34:	1807d0ba 	srai	r3,r3,2
10000c38:	1809883a 	mov	r4,r3
10000c3c:	e0fff90b 	ldhu	r3,-28(fp)
10000c40:	180691fa 	slli	r3,r3,7
10000c44:	20c6b03a 	or	r3,r4,r3
10000c48:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 1);
10000c4c:	d0e6b317 	ldw	r3,-25908(gp)
10000c50:	d0a6b417 	ldw	r2,-25904(gp)
10000c54:	11000044 	addi	r4,r2,1
10000c58:	d126b415 	stw	r4,-25904(gp)
10000c5c:	1885883a 	add	r2,r3,r2
10000c60:	e0fff90b 	ldhu	r3,-28(fp)
10000c64:	1807d07a 	srai	r3,r3,1
10000c68:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = (realWidth >> 9) | ((realHeight & 0x7F) << 1);
10000c6c:	d0e6b317 	ldw	r3,-25908(gp)
10000c70:	d0a6b417 	ldw	r2,-25904(gp)
10000c74:	11000044 	addi	r4,r2,1
10000c78:	d126b415 	stw	r4,-25904(gp)
10000c7c:	1887883a 	add	r3,r3,r2
10000c80:	e0bff90b 	ldhu	r2,-28(fp)
10000c84:	1005d27a 	srai	r2,r2,9
10000c88:	1009883a 	mov	r4,r2
10000c8c:	e0bff98b 	ldhu	r2,-26(fp)
10000c90:	1085883a 	add	r2,r2,r2
10000c94:	2084b03a 	or	r2,r4,r2
10000c98:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (realHeight >> 7) | ((color.blue & 0x3F) << 2);
10000c9c:	d0e6b317 	ldw	r3,-25908(gp)
10000ca0:	d0a6b417 	ldw	r2,-25904(gp)
10000ca4:	11000044 	addi	r4,r2,1
10000ca8:	d126b415 	stw	r4,-25904(gp)
10000cac:	1887883a 	add	r3,r3,r2
10000cb0:	e0bff98b 	ldhu	r2,-26(fp)
10000cb4:	1005d1fa 	srai	r2,r2,7
10000cb8:	1009883a 	mov	r4,r2
10000cbc:	e0800183 	ldbu	r2,6(fp)
10000cc0:	10803fcc 	andi	r2,r2,255
10000cc4:	1085883a 	add	r2,r2,r2
10000cc8:	1085883a 	add	r2,r2,r2
10000ccc:	2084b03a 	or	r2,r4,r2
10000cd0:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.blue >> 6) | ((color.green & 0x3F) << 2);
10000cd4:	d0e6b317 	ldw	r3,-25908(gp)
10000cd8:	d0a6b417 	ldw	r2,-25904(gp)
10000cdc:	11000044 	addi	r4,r2,1
10000ce0:	d126b415 	stw	r4,-25904(gp)
10000ce4:	1887883a 	add	r3,r3,r2
10000ce8:	e0800183 	ldbu	r2,6(fp)
10000cec:	10803fcc 	andi	r2,r2,255
10000cf0:	1005d1ba 	srai	r2,r2,6
10000cf4:	1009883a 	mov	r4,r2
10000cf8:	e0800143 	ldbu	r2,5(fp)
10000cfc:	10803fcc 	andi	r2,r2,255
10000d00:	1085883a 	add	r2,r2,r2
10000d04:	1085883a 	add	r2,r2,r2
10000d08:	2084b03a 	or	r2,r4,r2
10000d0c:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.green >> 6) | ((color.red & 0x3F) << 2);
10000d10:	d0e6b317 	ldw	r3,-25908(gp)
10000d14:	d0a6b417 	ldw	r2,-25904(gp)
10000d18:	11000044 	addi	r4,r2,1
10000d1c:	d126b415 	stw	r4,-25904(gp)
10000d20:	1887883a 	add	r3,r3,r2
10000d24:	e0800143 	ldbu	r2,5(fp)
10000d28:	10803fcc 	andi	r2,r2,255
10000d2c:	1005d1ba 	srai	r2,r2,6
10000d30:	1009883a 	mov	r4,r2
10000d34:	e0800103 	ldbu	r2,4(fp)
10000d38:	10803fcc 	andi	r2,r2,255
10000d3c:	1085883a 	add	r2,r2,r2
10000d40:	1085883a 	add	r2,r2,r2
10000d44:	2084b03a 	or	r2,r4,r2
10000d48:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (color.red >> 6) | ((realRadius & 0x3F) << 2);
10000d4c:	d0e6b317 	ldw	r3,-25908(gp)
10000d50:	d0a6b417 	ldw	r2,-25904(gp)
10000d54:	11000044 	addi	r4,r2,1
10000d58:	d126b415 	stw	r4,-25904(gp)
10000d5c:	1887883a 	add	r3,r3,r2
10000d60:	e0800103 	ldbu	r2,4(fp)
10000d64:	10803fcc 	andi	r2,r2,255
10000d68:	1005d1ba 	srai	r2,r2,6
10000d6c:	1009883a 	mov	r4,r2
10000d70:	e0bffa0b 	ldhu	r2,-24(fp)
10000d74:	1085883a 	add	r2,r2,r2
10000d78:	1085883a 	add	r2,r2,r2
10000d7c:	2084b03a 	or	r2,r4,r2
10000d80:	18800005 	stb	r2,0(r3)
	spriteTable[spriteIndex++] = (realRadius >> 6);
10000d84:	d0e6b317 	ldw	r3,-25908(gp)
10000d88:	d0a6b417 	ldw	r2,-25904(gp)
10000d8c:	11000044 	addi	r4,r2,1
10000d90:	d126b415 	stw	r4,-25904(gp)
10000d94:	1885883a 	add	r2,r3,r2
10000d98:	e0fffa0b 	ldhu	r3,-24(fp)
10000d9c:	1807d1ba 	srai	r3,r3,6
10000da0:	10c00005 	stb	r3,0(r2)
	spriteTable[spriteIndex++] = 0;
10000da4:	d0e6b317 	ldw	r3,-25908(gp)
10000da8:	d0a6b417 	ldw	r2,-25904(gp)
10000dac:	11000044 	addi	r4,r2,1
10000db0:	d126b415 	stw	r4,-25904(gp)
10000db4:	1885883a 	add	r2,r3,r2
10000db8:	10000005 	stb	zero,0(r2)
}
10000dbc:	e037883a 	mov	sp,fp
10000dc0:	df000017 	ldw	fp,0(sp)
10000dc4:	dec00104 	addi	sp,sp,4
10000dc8:	f800283a 	ret

10000dcc <_Z18SetBackgroundColor5Color>:

// Instructions
void SetBackgroundColor(Color color) {
10000dcc:	defffe04 	addi	sp,sp,-8
10000dd0:	df000115 	stw	fp,4(sp)
10000dd4:	df000104 	addi	fp,sp,4
10000dd8:	e13fff15 	stw	r4,-4(fp)
	// Wait for the gpu to be ready
	while (!(*gpu_ready)) {}
10000ddc:	0001883a 	nop
10000de0:	00840034 	movhi	r2,4096
10000de4:	10969d04 	addi	r2,r2,23156
10000de8:	10800017 	ldw	r2,0(r2)
10000dec:	10800017 	ldw	r2,0(r2)
10000df0:	1005003a 	cmpeq	r2,r2,zero
10000df4:	10803fcc 	andi	r2,r2,255
10000df8:	103ff91e 	bne	r2,zero,10000de0 <__alt_data_end+0xf8000de0>

	// RGB (24), unused(4), opcode 1 (4)
	*gpu_instruction = (color.red << 24) | (color.green << 16) | (color.blue << 8) | 0x1;
10000dfc:	00840034 	movhi	r2,4096
10000e00:	10969b04 	addi	r2,r2,23148
10000e04:	10800017 	ldw	r2,0(r2)
10000e08:	e0ffff03 	ldbu	r3,-4(fp)
10000e0c:	18c03fcc 	andi	r3,r3,255
10000e10:	1808963a 	slli	r4,r3,24
10000e14:	e0ffff43 	ldbu	r3,-3(fp)
10000e18:	18c03fcc 	andi	r3,r3,255
10000e1c:	1806943a 	slli	r3,r3,16
10000e20:	20c8b03a 	or	r4,r4,r3
10000e24:	e0ffff83 	ldbu	r3,-2(fp)
10000e28:	18c03fcc 	andi	r3,r3,255
10000e2c:	1806923a 	slli	r3,r3,8
10000e30:	20c6b03a 	or	r3,r4,r3
10000e34:	18c00054 	ori	r3,r3,1
10000e38:	10c00015 	stw	r3,0(r2)

	// Toggle run
	*gpu_run = true;
10000e3c:	00840034 	movhi	r2,4096
10000e40:	10969c04 	addi	r2,r2,23152
10000e44:	10800017 	ldw	r2,0(r2)
10000e48:	00c00044 	movi	r3,1
10000e4c:	10c00015 	stw	r3,0(r2)
	*gpu_run = false;
10000e50:	00840034 	movhi	r2,4096
10000e54:	10969c04 	addi	r2,r2,23152
10000e58:	10800017 	ldw	r2,0(r2)
10000e5c:	10000015 	stw	zero,0(r2)
}
10000e60:	e037883a 	mov	sp,fp
10000e64:	df000017 	ldw	fp,0(sp)
10000e68:	dec00104 	addi	sp,sp,4
10000e6c:	f800283a 	ret

10000e70 <_Z16SetSpriteAddressj>:

void SetSpriteAddress(u32 address) {
10000e70:	defffe04 	addi	sp,sp,-8
10000e74:	df000115 	stw	fp,4(sp)
10000e78:	df000104 	addi	fp,sp,4
10000e7c:	e13fff15 	stw	r4,-4(fp)
	// Wait for the gpu to be ready
	while (!(*gpu_ready)) {}
10000e80:	0001883a 	nop
10000e84:	00840034 	movhi	r2,4096
10000e88:	10969d04 	addi	r2,r2,23156
10000e8c:	10800017 	ldw	r2,0(r2)
10000e90:	10800017 	ldw	r2,0(r2)
10000e94:	1005003a 	cmpeq	r2,r2,zero
10000e98:	10803fcc 	andi	r2,r2,255
10000e9c:	103ff91e 	bne	r2,zero,10000e84 <__alt_data_end+0xf8000e84>

	// address (20), unused(8), opcode 2 (4)
	*gpu_instruction = ((address & 0xFFFFF) << 12) | 0x2;
10000ea0:	00840034 	movhi	r2,4096
10000ea4:	10969b04 	addi	r2,r2,23148
10000ea8:	10800017 	ldw	r2,0(r2)
10000eac:	e0ffff17 	ldw	r3,-4(fp)
10000eb0:	1806933a 	slli	r3,r3,12
10000eb4:	18c00094 	ori	r3,r3,2
10000eb8:	10c00015 	stw	r3,0(r2)

	// Toggle run
	*gpu_run = true;
10000ebc:	00840034 	movhi	r2,4096
10000ec0:	10969c04 	addi	r2,r2,23152
10000ec4:	10800017 	ldw	r2,0(r2)
10000ec8:	00c00044 	movi	r3,1
10000ecc:	10c00015 	stw	r3,0(r2)
	*gpu_run = false;
10000ed0:	00840034 	movhi	r2,4096
10000ed4:	10969c04 	addi	r2,r2,23152
10000ed8:	10800017 	ldw	r2,0(r2)
10000edc:	10000015 	stw	zero,0(r2)
}
10000ee0:	e037883a 	mov	sp,fp
10000ee4:	df000017 	ldw	fp,0(sp)
10000ee8:	dec00104 	addi	sp,sp,4
10000eec:	f800283a 	ret

10000ef0 <main>:

#include "graphics.h"
#include "pio.h"
#include <stdio.h>

int main() {
10000ef0:	defff904 	addi	sp,sp,-28
10000ef4:	dfc00615 	stw	ra,24(sp)
10000ef8:	df000515 	stw	fp,20(sp)
10000efc:	df000504 	addi	fp,sp,20
	// Initialize the graphics
	InitGraphics();
10000f00:	00001f80 	call	100001f8 <_Z12InitGraphicsv>

	// Infinite loop
	int xpos = 0;
10000f04:	e03ffd15 	stw	zero,-12(fp)
	for (;;) {
		WaitForVSYNC();
10000f08:	000027c0 	call	1000027c <_Z12WaitForVSYNCv>
			xpos = 0;*/

		//for (int z = 0; z < 64; z++)
		//	FillRectangle(z * 10, 240 - 30, 10, 60, Color(z * 3 + 40, z * 3 + 40, z * 3 + 40));

		FillImage(0, 0, 640, 480, Color(255, 255, 255), 0x0);
10000f0c:	e0bffec4 	addi	r2,fp,-5
10000f10:	1009883a 	mov	r4,r2
10000f14:	01403fc4 	movi	r5,255
10000f18:	01803fc4 	movi	r6,255
10000f1c:	01c03fc4 	movi	r7,255
10000f20:	0000f9c0 	call	10000f9c <_ZN5ColorC1Ehhh>
10000f24:	e0bffec3 	ldbu	r2,-5(fp)
10000f28:	d8800005 	stb	r2,0(sp)
10000f2c:	e0bfff03 	ldbu	r2,-4(fp)
10000f30:	d8800045 	stb	r2,1(sp)
10000f34:	e0bfff43 	ldbu	r2,-3(fp)
10000f38:	d8800085 	stb	r2,2(sp)
10000f3c:	d8000115 	stw	zero,4(sp)
10000f40:	0009883a 	mov	r4,zero
10000f44:	000b883a 	mov	r5,zero
10000f48:	0180a004 	movi	r6,640
10000f4c:	01c07804 	movi	r7,480
10000f50:	00008e00 	call	100008e0 <_Z9FillImagetttt5Colorj>
		FillRectangle(0, 0, 64, 48, Color(255, 0, 0));
10000f54:	e0bffe04 	addi	r2,fp,-8
10000f58:	1009883a 	mov	r4,r2
10000f5c:	01403fc4 	movi	r5,255
10000f60:	000d883a 	mov	r6,zero
10000f64:	000f883a 	mov	r7,zero
10000f68:	0000f9c0 	call	10000f9c <_ZN5ColorC1Ehhh>
10000f6c:	e0bffe0b 	ldhu	r2,-8(fp)
10000f70:	d880000d 	sth	r2,0(sp)
10000f74:	e0bffe83 	ldbu	r2,-6(fp)
10000f78:	d8800085 	stb	r2,2(sp)
10000f7c:	0009883a 	mov	r4,zero
10000f80:	000b883a 	mov	r5,zero
10000f84:	01801004 	movi	r6,64
10000f88:	01c00c04 	movi	r7,48
10000f8c:	000042c0 	call	1000042c <_Z13FillRectangletttt5Color>

		//FillRectangle(80, 240 - 30, 640 - 160, 60, Color(255, 255, 255));

		UploadGraphics();
10000f90:	00002f00 	call	100002f0 <_Z14UploadGraphicsv>

		// Wait for frame to finish
		WaitForNotVSYNC();
10000f94:	00002b80 	call	100002b8 <_Z15WaitForNotVSYNCv>
	}

	// Cleanup the graphics
	DeallocGraphics();

	return 0;
10000f98:	003fdb06 	br	10000f08 <__alt_data_end+0xf8000f08>

10000f9c <_ZN5ColorC1Ehhh>:
		green = 0;
		blue = 0;
	}

	// Initialize with color
	Color(u8 r, u8 g, u8 b) {
10000f9c:	defffb04 	addi	sp,sp,-20
10000fa0:	df000415 	stw	fp,16(sp)
10000fa4:	df000404 	addi	fp,sp,16
10000fa8:	e13ffc15 	stw	r4,-16(fp)
10000fac:	2809883a 	mov	r4,r5
10000fb0:	3007883a 	mov	r3,r6
10000fb4:	3805883a 	mov	r2,r7
10000fb8:	e13ffd05 	stb	r4,-12(fp)
10000fbc:	e0fffe05 	stb	r3,-8(fp)
10000fc0:	e0bfff05 	stb	r2,-4(fp)
		red = r;
10000fc4:	e0bffc17 	ldw	r2,-16(fp)
10000fc8:	e0fffd03 	ldbu	r3,-12(fp)
10000fcc:	10c00005 	stb	r3,0(r2)
		green = g;
10000fd0:	e0bffc17 	ldw	r2,-16(fp)
10000fd4:	e0fffe03 	ldbu	r3,-8(fp)
10000fd8:	10c00045 	stb	r3,1(r2)
		blue = b;
10000fdc:	e0bffc17 	ldw	r2,-16(fp)
10000fe0:	e0ffff03 	ldbu	r3,-4(fp)
10000fe4:	10c00085 	stb	r3,2(r2)
	}
10000fe8:	e037883a 	mov	sp,fp
10000fec:	df000017 	ldw	fp,0(sp)
10000ff0:	dec00104 	addi	sp,sp,4
10000ff4:	f800283a 	ret

10000ff8 <malloc>:
10000ff8:	00840034 	movhi	r2,4096
10000ffc:	1096a204 	addi	r2,r2,23176
10001000:	200b883a 	mov	r5,r4
10001004:	11000017 	ldw	r4,0(r2)
10001008:	00010201 	jmpi	10001020 <_malloc_r>

1000100c <free>:
1000100c:	00840034 	movhi	r2,4096
10001010:	1096a204 	addi	r2,r2,23176
10001014:	200b883a 	mov	r5,r4
10001018:	11000017 	ldw	r4,0(r2)
1000101c:	0001a981 	jmpi	10001a98 <_free_r>

10001020 <_malloc_r>:
10001020:	defff504 	addi	sp,sp,-44
10001024:	dc800315 	stw	r18,12(sp)
10001028:	dfc00a15 	stw	ra,40(sp)
1000102c:	df000915 	stw	fp,36(sp)
10001030:	ddc00815 	stw	r23,32(sp)
10001034:	dd800715 	stw	r22,28(sp)
10001038:	dd400615 	stw	r21,24(sp)
1000103c:	dd000515 	stw	r20,20(sp)
10001040:	dcc00415 	stw	r19,16(sp)
10001044:	dc400215 	stw	r17,8(sp)
10001048:	dc000115 	stw	r16,4(sp)
1000104c:	288002c4 	addi	r2,r5,11
10001050:	00c00584 	movi	r3,22
10001054:	2025883a 	mov	r18,r4
10001058:	18802b2e 	bgeu	r3,r2,10001108 <_malloc_r+0xe8>
1000105c:	047ffe04 	movi	r17,-8
10001060:	1462703a 	and	r17,r2,r17
10001064:	88002a16 	blt	r17,zero,10001110 <_malloc_r+0xf0>
10001068:	89402936 	bltu	r17,r5,10001110 <_malloc_r+0xf0>
1000106c:	9009883a 	mov	r4,r18
10001070:	0001ec40 	call	10001ec4 <__malloc_lock>
10001074:	00807dc4 	movi	r2,503
10001078:	14402936 	bltu	r2,r17,10001120 <_malloc_r+0x100>
1000107c:	8808d0fa 	srli	r4,r17,3
10001080:	04c40034 	movhi	r19,4096
10001084:	9cd00d04 	addi	r19,r19,16436
10001088:	2105883a 	add	r2,r4,r4
1000108c:	1085883a 	add	r2,r2,r2
10001090:	1085883a 	add	r2,r2,r2
10001094:	9885883a 	add	r2,r19,r2
10001098:	14000317 	ldw	r16,12(r2)
1000109c:	80815226 	beq	r16,r2,100015e8 <_malloc_r+0x5c8>
100010a0:	81000117 	ldw	r4,4(r16)
100010a4:	00bfff04 	movi	r2,-4
100010a8:	80c00317 	ldw	r3,12(r16)
100010ac:	2084703a 	and	r2,r4,r2
100010b0:	8085883a 	add	r2,r16,r2
100010b4:	81000217 	ldw	r4,8(r16)
100010b8:	11400117 	ldw	r5,4(r2)
100010bc:	20c00315 	stw	r3,12(r4)
100010c0:	19000215 	stw	r4,8(r3)
100010c4:	28c00054 	ori	r3,r5,1
100010c8:	10c00115 	stw	r3,4(r2)
100010cc:	9009883a 	mov	r4,r18
100010d0:	0001ee40 	call	10001ee4 <__malloc_unlock>
100010d4:	80800204 	addi	r2,r16,8
100010d8:	dfc00a17 	ldw	ra,40(sp)
100010dc:	df000917 	ldw	fp,36(sp)
100010e0:	ddc00817 	ldw	r23,32(sp)
100010e4:	dd800717 	ldw	r22,28(sp)
100010e8:	dd400617 	ldw	r21,24(sp)
100010ec:	dd000517 	ldw	r20,20(sp)
100010f0:	dcc00417 	ldw	r19,16(sp)
100010f4:	dc800317 	ldw	r18,12(sp)
100010f8:	dc400217 	ldw	r17,8(sp)
100010fc:	dc000117 	ldw	r16,4(sp)
10001100:	dec00b04 	addi	sp,sp,44
10001104:	f800283a 	ret
10001108:	04400404 	movi	r17,16
1000110c:	897fd72e 	bgeu	r17,r5,1000106c <__alt_data_end+0xf800106c>
10001110:	00800304 	movi	r2,12
10001114:	90800015 	stw	r2,0(r18)
10001118:	0005883a 	mov	r2,zero
1000111c:	003fee06 	br	100010d8 <__alt_data_end+0xf80010d8>
10001120:	8808d27a 	srli	r4,r17,9
10001124:	20007126 	beq	r4,zero,100012ec <_malloc_r+0x2cc>
10001128:	00800104 	movi	r2,4
1000112c:	1100f536 	bltu	r2,r4,10001504 <_malloc_r+0x4e4>
10001130:	8808d1ba 	srli	r4,r17,6
10001134:	21000e04 	addi	r4,r4,56
10001138:	210b883a 	add	r5,r4,r4
1000113c:	294b883a 	add	r5,r5,r5
10001140:	294b883a 	add	r5,r5,r5
10001144:	04c40034 	movhi	r19,4096
10001148:	9cd00d04 	addi	r19,r19,16436
1000114c:	994b883a 	add	r5,r19,r5
10001150:	2c000317 	ldw	r16,12(r5)
10001154:	2c000e26 	beq	r5,r16,10001190 <_malloc_r+0x170>
10001158:	80c00117 	ldw	r3,4(r16)
1000115c:	01ffff04 	movi	r7,-4
10001160:	018003c4 	movi	r6,15
10001164:	19c6703a 	and	r3,r3,r7
10001168:	1c45c83a 	sub	r2,r3,r17
1000116c:	30800716 	blt	r6,r2,1000118c <_malloc_r+0x16c>
10001170:	1000610e 	bge	r2,zero,100012f8 <_malloc_r+0x2d8>
10001174:	84000317 	ldw	r16,12(r16)
10001178:	2c000526 	beq	r5,r16,10001190 <_malloc_r+0x170>
1000117c:	80c00117 	ldw	r3,4(r16)
10001180:	19c6703a 	and	r3,r3,r7
10001184:	1c45c83a 	sub	r2,r3,r17
10001188:	30bff90e 	bge	r6,r2,10001170 <__alt_data_end+0xf8001170>
1000118c:	213fffc4 	addi	r4,r4,-1
10001190:	21000044 	addi	r4,r4,1
10001194:	9c000417 	ldw	r16,16(r19)
10001198:	00c40034 	movhi	r3,4096
1000119c:	18d00d04 	addi	r3,r3,16436
100011a0:	1a400204 	addi	r9,r3,8
100011a4:	82410926 	beq	r16,r9,100015cc <_malloc_r+0x5ac>
100011a8:	81400117 	ldw	r5,4(r16)
100011ac:	00bfff04 	movi	r2,-4
100011b0:	018003c4 	movi	r6,15
100011b4:	2884703a 	and	r2,r5,r2
100011b8:	144bc83a 	sub	r5,r2,r17
100011bc:	3140f416 	blt	r6,r5,10001590 <_malloc_r+0x570>
100011c0:	1a400515 	stw	r9,20(r3)
100011c4:	1a400415 	stw	r9,16(r3)
100011c8:	2800570e 	bge	r5,zero,10001328 <_malloc_r+0x308>
100011cc:	01407fc4 	movi	r5,511
100011d0:	2880d436 	bltu	r5,r2,10001524 <_malloc_r+0x504>
100011d4:	1004d0fa 	srli	r2,r2,3
100011d8:	02000044 	movi	r8,1
100011dc:	19c00117 	ldw	r7,4(r3)
100011e0:	108b883a 	add	r5,r2,r2
100011e4:	294b883a 	add	r5,r5,r5
100011e8:	1005d0ba 	srai	r2,r2,2
100011ec:	294b883a 	add	r5,r5,r5
100011f0:	28cb883a 	add	r5,r5,r3
100011f4:	29800217 	ldw	r6,8(r5)
100011f8:	4084983a 	sll	r2,r8,r2
100011fc:	81400315 	stw	r5,12(r16)
10001200:	81800215 	stw	r6,8(r16)
10001204:	11c4b03a 	or	r2,r2,r7
10001208:	2c000215 	stw	r16,8(r5)
1000120c:	18800115 	stw	r2,4(r3)
10001210:	34000315 	stw	r16,12(r6)
10001214:	2007d0ba 	srai	r3,r4,2
10001218:	01400044 	movi	r5,1
1000121c:	28ca983a 	sll	r5,r5,r3
10001220:	11404936 	bltu	r2,r5,10001348 <_malloc_r+0x328>
10001224:	1146703a 	and	r3,r2,r5
10001228:	18000a1e 	bne	r3,zero,10001254 <_malloc_r+0x234>
1000122c:	00ffff04 	movi	r3,-4
10001230:	294b883a 	add	r5,r5,r5
10001234:	20c8703a 	and	r4,r4,r3
10001238:	1146703a 	and	r3,r2,r5
1000123c:	21000104 	addi	r4,r4,4
10001240:	1800041e 	bne	r3,zero,10001254 <_malloc_r+0x234>
10001244:	294b883a 	add	r5,r5,r5
10001248:	1146703a 	and	r3,r2,r5
1000124c:	21000104 	addi	r4,r4,4
10001250:	183ffc26 	beq	r3,zero,10001244 <__alt_data_end+0xf8001244>
10001254:	023fff04 	movi	r8,-4
10001258:	01c003c4 	movi	r7,15
1000125c:	2105883a 	add	r2,r4,r4
10001260:	1085883a 	add	r2,r2,r2
10001264:	1085883a 	add	r2,r2,r2
10001268:	9897883a 	add	r11,r19,r2
1000126c:	5a800304 	addi	r10,r11,12
10001270:	2019883a 	mov	r12,r4
10001274:	54000017 	ldw	r16,0(r10)
10001278:	51bffd04 	addi	r6,r10,-12
1000127c:	8180041e 	bne	r16,r6,10001290 <_malloc_r+0x270>
10001280:	0000d406 	br	100015d4 <_malloc_r+0x5b4>
10001284:	1000dd0e 	bge	r2,zero,100015fc <_malloc_r+0x5dc>
10001288:	84000317 	ldw	r16,12(r16)
1000128c:	8180d126 	beq	r16,r6,100015d4 <_malloc_r+0x5b4>
10001290:	80c00117 	ldw	r3,4(r16)
10001294:	1a06703a 	and	r3,r3,r8
10001298:	1c45c83a 	sub	r2,r3,r17
1000129c:	38bff90e 	bge	r7,r2,10001284 <__alt_data_end+0xf8001284>
100012a0:	80c00317 	ldw	r3,12(r16)
100012a4:	81000217 	ldw	r4,8(r16)
100012a8:	89400054 	ori	r5,r17,1
100012ac:	81400115 	stw	r5,4(r16)
100012b0:	20c00315 	stw	r3,12(r4)
100012b4:	19000215 	stw	r4,8(r3)
100012b8:	8463883a 	add	r17,r16,r17
100012bc:	9c400515 	stw	r17,20(r19)
100012c0:	9c400415 	stw	r17,16(r19)
100012c4:	10c00054 	ori	r3,r2,1
100012c8:	8a400315 	stw	r9,12(r17)
100012cc:	8a400215 	stw	r9,8(r17)
100012d0:	88c00115 	stw	r3,4(r17)
100012d4:	88a3883a 	add	r17,r17,r2
100012d8:	88800015 	stw	r2,0(r17)
100012dc:	9009883a 	mov	r4,r18
100012e0:	0001ee40 	call	10001ee4 <__malloc_unlock>
100012e4:	80800204 	addi	r2,r16,8
100012e8:	003f7b06 	br	100010d8 <__alt_data_end+0xf80010d8>
100012ec:	01401f84 	movi	r5,126
100012f0:	01000fc4 	movi	r4,63
100012f4:	003f9106 	br	1000113c <__alt_data_end+0xf800113c>
100012f8:	80800317 	ldw	r2,12(r16)
100012fc:	81000217 	ldw	r4,8(r16)
10001300:	80c7883a 	add	r3,r16,r3
10001304:	19400117 	ldw	r5,4(r3)
10001308:	20800315 	stw	r2,12(r4)
1000130c:	11000215 	stw	r4,8(r2)
10001310:	28800054 	ori	r2,r5,1
10001314:	18800115 	stw	r2,4(r3)
10001318:	9009883a 	mov	r4,r18
1000131c:	0001ee40 	call	10001ee4 <__malloc_unlock>
10001320:	80800204 	addi	r2,r16,8
10001324:	003f6c06 	br	100010d8 <__alt_data_end+0xf80010d8>
10001328:	8085883a 	add	r2,r16,r2
1000132c:	10c00117 	ldw	r3,4(r2)
10001330:	9009883a 	mov	r4,r18
10001334:	18c00054 	ori	r3,r3,1
10001338:	10c00115 	stw	r3,4(r2)
1000133c:	0001ee40 	call	10001ee4 <__malloc_unlock>
10001340:	80800204 	addi	r2,r16,8
10001344:	003f6406 	br	100010d8 <__alt_data_end+0xf80010d8>
10001348:	9c000217 	ldw	r16,8(r19)
1000134c:	00bfff04 	movi	r2,-4
10001350:	85400117 	ldw	r21,4(r16)
10001354:	a8aa703a 	and	r21,r21,r2
10001358:	ac400336 	bltu	r21,r17,10001368 <_malloc_r+0x348>
1000135c:	ac45c83a 	sub	r2,r21,r17
10001360:	00c003c4 	movi	r3,15
10001364:	18805d16 	blt	r3,r2,100014dc <_malloc_r+0x4bc>
10001368:	00840034 	movhi	r2,4096
1000136c:	109d5104 	addi	r2,r2,30020
10001370:	00c40034 	movhi	r3,4096
10001374:	18d69f04 	addi	r3,r3,23164
10001378:	15c00017 	ldw	r23,0(r2)
1000137c:	19000017 	ldw	r4,0(r3)
10001380:	00bfffc4 	movi	r2,-1
10001384:	8579883a 	add	fp,r16,r21
10001388:	8def883a 	add	r23,r17,r23
1000138c:	2080e426 	beq	r4,r2,10001720 <_malloc_r+0x700>
10001390:	bdc403c4 	addi	r23,r23,4111
10001394:	00bc0004 	movi	r2,-4096
10001398:	b8ae703a 	and	r23,r23,r2
1000139c:	9009883a 	mov	r4,r18
100013a0:	b80b883a 	mov	r5,r23
100013a4:	d8c00015 	stw	r3,0(sp)
100013a8:	00018f80 	call	100018f8 <_sbrk_r>
100013ac:	1029883a 	mov	r20,r2
100013b0:	00bfffc4 	movi	r2,-1
100013b4:	d8c00017 	ldw	r3,0(sp)
100013b8:	a080a426 	beq	r20,r2,1000164c <_malloc_r+0x62c>
100013bc:	a700a236 	bltu	r20,fp,10001648 <_malloc_r+0x628>
100013c0:	05840034 	movhi	r22,4096
100013c4:	b59d5904 	addi	r22,r22,30052
100013c8:	b0800017 	ldw	r2,0(r22)
100013cc:	b885883a 	add	r2,r23,r2
100013d0:	b0800015 	stw	r2,0(r22)
100013d4:	e500da26 	beq	fp,r20,10001740 <_malloc_r+0x720>
100013d8:	19000017 	ldw	r4,0(r3)
100013dc:	00ffffc4 	movi	r3,-1
100013e0:	20c0e426 	beq	r4,r3,10001774 <_malloc_r+0x754>
100013e4:	a739c83a 	sub	fp,r20,fp
100013e8:	1705883a 	add	r2,r2,fp
100013ec:	b0800015 	stw	r2,0(r22)
100013f0:	a08001cc 	andi	r2,r20,7
100013f4:	1000b526 	beq	r2,zero,100016cc <_malloc_r+0x6ac>
100013f8:	a0a9c83a 	sub	r20,r20,r2
100013fc:	00c40204 	movi	r3,4104
10001400:	a5000204 	addi	r20,r20,8
10001404:	1885c83a 	sub	r2,r3,r2
10001408:	a5c7883a 	add	r3,r20,r23
1000140c:	18c3ffcc 	andi	r3,r3,4095
10001410:	10efc83a 	sub	r23,r2,r3
10001414:	9009883a 	mov	r4,r18
10001418:	b80b883a 	mov	r5,r23
1000141c:	00018f80 	call	100018f8 <_sbrk_r>
10001420:	00ffffc4 	movi	r3,-1
10001424:	10c0d026 	beq	r2,r3,10001768 <_malloc_r+0x748>
10001428:	1505c83a 	sub	r2,r2,r20
1000142c:	b887883a 	add	r3,r23,r2
10001430:	18c00054 	ori	r3,r3,1
10001434:	b0800017 	ldw	r2,0(r22)
10001438:	9d000215 	stw	r20,8(r19)
1000143c:	a0c00115 	stw	r3,4(r20)
10001440:	b885883a 	add	r2,r23,r2
10001444:	b0800015 	stw	r2,0(r22)
10001448:	84c00e26 	beq	r16,r19,10001484 <_malloc_r+0x464>
1000144c:	00c003c4 	movi	r3,15
10001450:	1d40a02e 	bgeu	r3,r21,100016d4 <_malloc_r+0x6b4>
10001454:	81400117 	ldw	r5,4(r16)
10001458:	ad7ffd04 	addi	r21,r21,-12
1000145c:	013ffe04 	movi	r4,-8
10001460:	a908703a 	and	r4,r21,r4
10001464:	2940004c 	andi	r5,r5,1
10001468:	214ab03a 	or	r5,r4,r5
1000146c:	81400115 	stw	r5,4(r16)
10001470:	01800144 	movi	r6,5
10001474:	810b883a 	add	r5,r16,r4
10001478:	29800115 	stw	r6,4(r5)
1000147c:	29800215 	stw	r6,8(r5)
10001480:	1900c036 	bltu	r3,r4,10001784 <_malloc_r+0x764>
10001484:	00c40034 	movhi	r3,4096
10001488:	18dd5004 	addi	r3,r3,30016
1000148c:	19000017 	ldw	r4,0(r3)
10001490:	2080012e 	bgeu	r4,r2,10001498 <_malloc_r+0x478>
10001494:	18800015 	stw	r2,0(r3)
10001498:	00c40034 	movhi	r3,4096
1000149c:	18dd4f04 	addi	r3,r3,30012
100014a0:	19000017 	ldw	r4,0(r3)
100014a4:	9c000217 	ldw	r16,8(r19)
100014a8:	2080012e 	bgeu	r4,r2,100014b0 <_malloc_r+0x490>
100014ac:	18800015 	stw	r2,0(r3)
100014b0:	80c00117 	ldw	r3,4(r16)
100014b4:	00bfff04 	movi	r2,-4
100014b8:	1886703a 	and	r3,r3,r2
100014bc:	1c45c83a 	sub	r2,r3,r17
100014c0:	1c400236 	bltu	r3,r17,100014cc <_malloc_r+0x4ac>
100014c4:	00c003c4 	movi	r3,15
100014c8:	18800416 	blt	r3,r2,100014dc <_malloc_r+0x4bc>
100014cc:	9009883a 	mov	r4,r18
100014d0:	0001ee40 	call	10001ee4 <__malloc_unlock>
100014d4:	0005883a 	mov	r2,zero
100014d8:	003eff06 	br	100010d8 <__alt_data_end+0xf80010d8>
100014dc:	88c00054 	ori	r3,r17,1
100014e0:	80c00115 	stw	r3,4(r16)
100014e4:	8463883a 	add	r17,r16,r17
100014e8:	10800054 	ori	r2,r2,1
100014ec:	9c400215 	stw	r17,8(r19)
100014f0:	88800115 	stw	r2,4(r17)
100014f4:	9009883a 	mov	r4,r18
100014f8:	0001ee40 	call	10001ee4 <__malloc_unlock>
100014fc:	80800204 	addi	r2,r16,8
10001500:	003ef506 	br	100010d8 <__alt_data_end+0xf80010d8>
10001504:	00800504 	movi	r2,20
10001508:	1100482e 	bgeu	r2,r4,1000162c <_malloc_r+0x60c>
1000150c:	00801504 	movi	r2,84
10001510:	11006836 	bltu	r2,r4,100016b4 <_malloc_r+0x694>
10001514:	8808d33a 	srli	r4,r17,12
10001518:	21001b84 	addi	r4,r4,110
1000151c:	210b883a 	add	r5,r4,r4
10001520:	003f0606 	br	1000113c <__alt_data_end+0xf800113c>
10001524:	1006d27a 	srli	r3,r2,9
10001528:	01400104 	movi	r5,4
1000152c:	28c0422e 	bgeu	r5,r3,10001638 <_malloc_r+0x618>
10001530:	01400504 	movi	r5,20
10001534:	28c07c36 	bltu	r5,r3,10001728 <_malloc_r+0x708>
10001538:	194016c4 	addi	r5,r3,91
1000153c:	294d883a 	add	r6,r5,r5
10001540:	318d883a 	add	r6,r6,r6
10001544:	318d883a 	add	r6,r6,r6
10001548:	998d883a 	add	r6,r19,r6
1000154c:	30c00217 	ldw	r3,8(r6)
10001550:	01c40034 	movhi	r7,4096
10001554:	39d00d04 	addi	r7,r7,16436
10001558:	19806326 	beq	r3,r6,100016e8 <_malloc_r+0x6c8>
1000155c:	01ffff04 	movi	r7,-4
10001560:	19400117 	ldw	r5,4(r3)
10001564:	29ca703a 	and	r5,r5,r7
10001568:	1140022e 	bgeu	r2,r5,10001574 <_malloc_r+0x554>
1000156c:	18c00217 	ldw	r3,8(r3)
10001570:	30fffb1e 	bne	r6,r3,10001560 <__alt_data_end+0xf8001560>
10001574:	19400317 	ldw	r5,12(r3)
10001578:	98800117 	ldw	r2,4(r19)
1000157c:	81400315 	stw	r5,12(r16)
10001580:	80c00215 	stw	r3,8(r16)
10001584:	2c000215 	stw	r16,8(r5)
10001588:	1c000315 	stw	r16,12(r3)
1000158c:	003f2106 	br	10001214 <__alt_data_end+0xf8001214>
10001590:	88800054 	ori	r2,r17,1
10001594:	80800115 	stw	r2,4(r16)
10001598:	8463883a 	add	r17,r16,r17
1000159c:	1c400515 	stw	r17,20(r3)
100015a0:	1c400415 	stw	r17,16(r3)
100015a4:	28800054 	ori	r2,r5,1
100015a8:	88800115 	stw	r2,4(r17)
100015ac:	8a400315 	stw	r9,12(r17)
100015b0:	8a400215 	stw	r9,8(r17)
100015b4:	8963883a 	add	r17,r17,r5
100015b8:	89400015 	stw	r5,0(r17)
100015bc:	9009883a 	mov	r4,r18
100015c0:	0001ee40 	call	10001ee4 <__malloc_unlock>
100015c4:	80800204 	addi	r2,r16,8
100015c8:	003ec306 	br	100010d8 <__alt_data_end+0xf80010d8>
100015cc:	18800117 	ldw	r2,4(r3)
100015d0:	003f1006 	br	10001214 <__alt_data_end+0xf8001214>
100015d4:	63000044 	addi	r12,r12,1
100015d8:	608000cc 	andi	r2,r12,3
100015dc:	52800204 	addi	r10,r10,8
100015e0:	103f241e 	bne	r2,zero,10001274 <__alt_data_end+0xf8001274>
100015e4:	00002106 	br	1000166c <_malloc_r+0x64c>
100015e8:	80800204 	addi	r2,r16,8
100015ec:	84000517 	ldw	r16,20(r16)
100015f0:	143eab1e 	bne	r2,r16,100010a0 <__alt_data_end+0xf80010a0>
100015f4:	21000084 	addi	r4,r4,2
100015f8:	003ee606 	br	10001194 <__alt_data_end+0xf8001194>
100015fc:	80c7883a 	add	r3,r16,r3
10001600:	19400117 	ldw	r5,4(r3)
10001604:	80800317 	ldw	r2,12(r16)
10001608:	81000217 	ldw	r4,8(r16)
1000160c:	29400054 	ori	r5,r5,1
10001610:	19400115 	stw	r5,4(r3)
10001614:	20800315 	stw	r2,12(r4)
10001618:	11000215 	stw	r4,8(r2)
1000161c:	9009883a 	mov	r4,r18
10001620:	0001ee40 	call	10001ee4 <__malloc_unlock>
10001624:	80800204 	addi	r2,r16,8
10001628:	003eab06 	br	100010d8 <__alt_data_end+0xf80010d8>
1000162c:	210016c4 	addi	r4,r4,91
10001630:	210b883a 	add	r5,r4,r4
10001634:	003ec106 	br	1000113c <__alt_data_end+0xf800113c>
10001638:	100ad1ba 	srli	r5,r2,6
1000163c:	29400e04 	addi	r5,r5,56
10001640:	294d883a 	add	r6,r5,r5
10001644:	003fbe06 	br	10001540 <__alt_data_end+0xf8001540>
10001648:	84ff5d26 	beq	r16,r19,100013c0 <__alt_data_end+0xf80013c0>
1000164c:	9c000217 	ldw	r16,8(r19)
10001650:	00bfff04 	movi	r2,-4
10001654:	80c00117 	ldw	r3,4(r16)
10001658:	1886703a 	and	r3,r3,r2
1000165c:	003f9706 	br	100014bc <__alt_data_end+0xf80014bc>
10001660:	5ac00017 	ldw	r11,0(r11)
10001664:	213fffc4 	addi	r4,r4,-1
10001668:	58805c1e 	bne	r11,r2,100017dc <_malloc_r+0x7bc>
1000166c:	20c000cc 	andi	r3,r4,3
10001670:	58bffe04 	addi	r2,r11,-8
10001674:	183ffa1e 	bne	r3,zero,10001660 <__alt_data_end+0xf8001660>
10001678:	98800117 	ldw	r2,4(r19)
1000167c:	0146303a 	nor	r3,zero,r5
10001680:	1884703a 	and	r2,r3,r2
10001684:	98800115 	stw	r2,4(r19)
10001688:	294b883a 	add	r5,r5,r5
1000168c:	117f2e36 	bltu	r2,r5,10001348 <__alt_data_end+0xf8001348>
10001690:	283f2d26 	beq	r5,zero,10001348 <__alt_data_end+0xf8001348>
10001694:	1146703a 	and	r3,r2,r5
10001698:	6009883a 	mov	r4,r12
1000169c:	183eef1e 	bne	r3,zero,1000125c <__alt_data_end+0xf800125c>
100016a0:	294b883a 	add	r5,r5,r5
100016a4:	1146703a 	and	r3,r2,r5
100016a8:	21000104 	addi	r4,r4,4
100016ac:	183ffc26 	beq	r3,zero,100016a0 <__alt_data_end+0xf80016a0>
100016b0:	003eea06 	br	1000125c <__alt_data_end+0xf800125c>
100016b4:	00805504 	movi	r2,340
100016b8:	11001336 	bltu	r2,r4,10001708 <_malloc_r+0x6e8>
100016bc:	8808d3fa 	srli	r4,r17,15
100016c0:	21001dc4 	addi	r4,r4,119
100016c4:	210b883a 	add	r5,r4,r4
100016c8:	003e9c06 	br	1000113c <__alt_data_end+0xf800113c>
100016cc:	00840004 	movi	r2,4096
100016d0:	003f4d06 	br	10001408 <__alt_data_end+0xf8001408>
100016d4:	00800044 	movi	r2,1
100016d8:	a0800115 	stw	r2,4(r20)
100016dc:	a021883a 	mov	r16,r20
100016e0:	0007883a 	mov	r3,zero
100016e4:	003f7506 	br	100014bc <__alt_data_end+0xf80014bc>
100016e8:	280bd0ba 	srai	r5,r5,2
100016ec:	01800044 	movi	r6,1
100016f0:	38800117 	ldw	r2,4(r7)
100016f4:	314c983a 	sll	r6,r6,r5
100016f8:	180b883a 	mov	r5,r3
100016fc:	3084b03a 	or	r2,r6,r2
10001700:	38800115 	stw	r2,4(r7)
10001704:	003f9d06 	br	1000157c <__alt_data_end+0xf800157c>
10001708:	00815504 	movi	r2,1364
1000170c:	11001336 	bltu	r2,r4,1000175c <_malloc_r+0x73c>
10001710:	8808d4ba 	srli	r4,r17,18
10001714:	21001f04 	addi	r4,r4,124
10001718:	210b883a 	add	r5,r4,r4
1000171c:	003e8706 	br	1000113c <__alt_data_end+0xf800113c>
10001720:	bdc00404 	addi	r23,r23,16
10001724:	003f1d06 	br	1000139c <__alt_data_end+0xf800139c>
10001728:	01401504 	movi	r5,84
1000172c:	28c01c36 	bltu	r5,r3,100017a0 <_malloc_r+0x780>
10001730:	100ad33a 	srli	r5,r2,12
10001734:	29401b84 	addi	r5,r5,110
10001738:	294d883a 	add	r6,r5,r5
1000173c:	003f8006 	br	10001540 <__alt_data_end+0xf8001540>
10001740:	e103ffcc 	andi	r4,fp,4095
10001744:	203f241e 	bne	r4,zero,100013d8 <__alt_data_end+0xf80013d8>
10001748:	98c00217 	ldw	r3,8(r19)
1000174c:	bd49883a 	add	r4,r23,r21
10001750:	21000054 	ori	r4,r4,1
10001754:	19000115 	stw	r4,4(r3)
10001758:	003f4a06 	br	10001484 <__alt_data_end+0xf8001484>
1000175c:	01403f04 	movi	r5,252
10001760:	01001f84 	movi	r4,126
10001764:	003e7506 	br	1000113c <__alt_data_end+0xf800113c>
10001768:	00c00044 	movi	r3,1
1000176c:	002f883a 	mov	r23,zero
10001770:	003f3006 	br	10001434 <__alt_data_end+0xf8001434>
10001774:	00840034 	movhi	r2,4096
10001778:	10969f04 	addi	r2,r2,23164
1000177c:	15000015 	stw	r20,0(r2)
10001780:	003f1b06 	br	100013f0 <__alt_data_end+0xf80013f0>
10001784:	9009883a 	mov	r4,r18
10001788:	81400204 	addi	r5,r16,8
1000178c:	0001a980 	call	10001a98 <_free_r>
10001790:	00840034 	movhi	r2,4096
10001794:	109d5904 	addi	r2,r2,30052
10001798:	10800017 	ldw	r2,0(r2)
1000179c:	003f3906 	br	10001484 <__alt_data_end+0xf8001484>
100017a0:	01405504 	movi	r5,340
100017a4:	28c00436 	bltu	r5,r3,100017b8 <_malloc_r+0x798>
100017a8:	100ad3fa 	srli	r5,r2,15
100017ac:	29401dc4 	addi	r5,r5,119
100017b0:	294d883a 	add	r6,r5,r5
100017b4:	003f6206 	br	10001540 <__alt_data_end+0xf8001540>
100017b8:	01415504 	movi	r5,1364
100017bc:	28c00436 	bltu	r5,r3,100017d0 <_malloc_r+0x7b0>
100017c0:	100ad4ba 	srli	r5,r2,18
100017c4:	29401f04 	addi	r5,r5,124
100017c8:	294d883a 	add	r6,r5,r5
100017cc:	003f5c06 	br	10001540 <__alt_data_end+0xf8001540>
100017d0:	01803f04 	movi	r6,252
100017d4:	01401f84 	movi	r5,126
100017d8:	003f5906 	br	10001540 <__alt_data_end+0xf8001540>
100017dc:	98800117 	ldw	r2,4(r19)
100017e0:	003fa906 	br	10001688 <__alt_data_end+0xf8001688>

100017e4 <memset>:
100017e4:	20c000cc 	andi	r3,r4,3
100017e8:	2005883a 	mov	r2,r4
100017ec:	18003f26 	beq	r3,zero,100018ec <memset+0x108>
100017f0:	31ffffc4 	addi	r7,r6,-1
100017f4:	30003b26 	beq	r6,zero,100018e4 <memset+0x100>
100017f8:	2813883a 	mov	r9,r5
100017fc:	200d883a 	mov	r6,r4
10001800:	2007883a 	mov	r3,r4
10001804:	00000406 	br	10001818 <memset+0x34>
10001808:	3a3fffc4 	addi	r8,r7,-1
1000180c:	31800044 	addi	r6,r6,1
10001810:	38003426 	beq	r7,zero,100018e4 <memset+0x100>
10001814:	400f883a 	mov	r7,r8
10001818:	18c00044 	addi	r3,r3,1
1000181c:	32400005 	stb	r9,0(r6)
10001820:	1a0000cc 	andi	r8,r3,3
10001824:	403ff81e 	bne	r8,zero,10001808 <__alt_data_end+0xf8001808>
10001828:	010000c4 	movi	r4,3
1000182c:	21c0282e 	bgeu	r4,r7,100018d0 <memset+0xec>
10001830:	29003fcc 	andi	r4,r5,255
10001834:	2010923a 	slli	r8,r4,8
10001838:	4108b03a 	or	r4,r8,r4
1000183c:	2010943a 	slli	r8,r4,16
10001840:	4110b03a 	or	r8,r8,r4
10001844:	010003c4 	movi	r4,15
10001848:	21c0122e 	bgeu	r4,r7,10001894 <memset+0xb0>
1000184c:	3a7ffc04 	addi	r9,r7,-16
10001850:	4812d13a 	srli	r9,r9,4
10001854:	19000404 	addi	r4,r3,16
10001858:	180d883a 	mov	r6,r3
1000185c:	4814913a 	slli	r10,r9,4
10001860:	2289883a 	add	r4,r4,r10
10001864:	32000015 	stw	r8,0(r6)
10001868:	32000115 	stw	r8,4(r6)
1000186c:	32000215 	stw	r8,8(r6)
10001870:	32000315 	stw	r8,12(r6)
10001874:	31800404 	addi	r6,r6,16
10001878:	313ffa1e 	bne	r6,r4,10001864 <__alt_data_end+0xf8001864>
1000187c:	4a400044 	addi	r9,r9,1
10001880:	4812913a 	slli	r9,r9,4
10001884:	39c003cc 	andi	r7,r7,15
10001888:	010000c4 	movi	r4,3
1000188c:	1a47883a 	add	r3,r3,r9
10001890:	21c00f2e 	bgeu	r4,r7,100018d0 <memset+0xec>
10001894:	3a7fff04 	addi	r9,r7,-4
10001898:	4812d0ba 	srli	r9,r9,2
1000189c:	19000104 	addi	r4,r3,4
100018a0:	180d883a 	mov	r6,r3
100018a4:	4a55883a 	add	r10,r9,r9
100018a8:	5295883a 	add	r10,r10,r10
100018ac:	2289883a 	add	r4,r4,r10
100018b0:	32000015 	stw	r8,0(r6)
100018b4:	31800104 	addi	r6,r6,4
100018b8:	313ffd1e 	bne	r6,r4,100018b0 <__alt_data_end+0xf80018b0>
100018bc:	4a400044 	addi	r9,r9,1
100018c0:	4a53883a 	add	r9,r9,r9
100018c4:	4a53883a 	add	r9,r9,r9
100018c8:	1a47883a 	add	r3,r3,r9
100018cc:	39c000cc 	andi	r7,r7,3
100018d0:	38000526 	beq	r7,zero,100018e8 <memset+0x104>
100018d4:	19cf883a 	add	r7,r3,r7
100018d8:	19400005 	stb	r5,0(r3)
100018dc:	18c00044 	addi	r3,r3,1
100018e0:	19fffd1e 	bne	r3,r7,100018d8 <__alt_data_end+0xf80018d8>
100018e4:	f800283a 	ret
100018e8:	f800283a 	ret
100018ec:	2007883a 	mov	r3,r4
100018f0:	300f883a 	mov	r7,r6
100018f4:	003fcc06 	br	10001828 <__alt_data_end+0xf8001828>

100018f8 <_sbrk_r>:
100018f8:	defffd04 	addi	sp,sp,-12
100018fc:	dc400115 	stw	r17,4(sp)
10001900:	dc000015 	stw	r16,0(sp)
10001904:	2023883a 	mov	r17,r4
10001908:	04040034 	movhi	r16,4096
1000190c:	841d5204 	addi	r16,r16,30024
10001910:	2809883a 	mov	r4,r5
10001914:	dfc00215 	stw	ra,8(sp)
10001918:	80000015 	stw	zero,0(r16)
1000191c:	0001f040 	call	10001f04 <sbrk>
10001920:	00ffffc4 	movi	r3,-1
10001924:	10c00526 	beq	r2,r3,1000193c <_sbrk_r+0x44>
10001928:	dfc00217 	ldw	ra,8(sp)
1000192c:	dc400117 	ldw	r17,4(sp)
10001930:	dc000017 	ldw	r16,0(sp)
10001934:	dec00304 	addi	sp,sp,12
10001938:	f800283a 	ret
1000193c:	80c00017 	ldw	r3,0(r16)
10001940:	183ff926 	beq	r3,zero,10001928 <__alt_data_end+0xf8001928>
10001944:	88c00015 	stw	r3,0(r17)
10001948:	dfc00217 	ldw	ra,8(sp)
1000194c:	dc400117 	ldw	r17,4(sp)
10001950:	dc000017 	ldw	r16,0(sp)
10001954:	dec00304 	addi	sp,sp,12
10001958:	f800283a 	ret

1000195c <_malloc_trim_r>:
1000195c:	defffb04 	addi	sp,sp,-20
10001960:	dcc00315 	stw	r19,12(sp)
10001964:	dc800215 	stw	r18,8(sp)
10001968:	dc400115 	stw	r17,4(sp)
1000196c:	dc000015 	stw	r16,0(sp)
10001970:	2827883a 	mov	r19,r5
10001974:	dfc00415 	stw	ra,16(sp)
10001978:	04440034 	movhi	r17,4096
1000197c:	8c500d04 	addi	r17,r17,16436
10001980:	2021883a 	mov	r16,r4
10001984:	0001ec40 	call	10001ec4 <__malloc_lock>
10001988:	88800217 	ldw	r2,8(r17)
1000198c:	14800117 	ldw	r18,4(r2)
10001990:	00bfff04 	movi	r2,-4
10001994:	90a4703a 	and	r18,r18,r2
10001998:	94e7c83a 	sub	r19,r18,r19
1000199c:	9cc3fbc4 	addi	r19,r19,4079
100019a0:	9826d33a 	srli	r19,r19,12
100019a4:	0083ffc4 	movi	r2,4095
100019a8:	9cffffc4 	addi	r19,r19,-1
100019ac:	9826933a 	slli	r19,r19,12
100019b0:	14c0060e 	bge	r2,r19,100019cc <_malloc_trim_r+0x70>
100019b4:	8009883a 	mov	r4,r16
100019b8:	000b883a 	mov	r5,zero
100019bc:	00018f80 	call	100018f8 <_sbrk_r>
100019c0:	88c00217 	ldw	r3,8(r17)
100019c4:	1c87883a 	add	r3,r3,r18
100019c8:	10c00a26 	beq	r2,r3,100019f4 <_malloc_trim_r+0x98>
100019cc:	8009883a 	mov	r4,r16
100019d0:	0001ee40 	call	10001ee4 <__malloc_unlock>
100019d4:	0005883a 	mov	r2,zero
100019d8:	dfc00417 	ldw	ra,16(sp)
100019dc:	dcc00317 	ldw	r19,12(sp)
100019e0:	dc800217 	ldw	r18,8(sp)
100019e4:	dc400117 	ldw	r17,4(sp)
100019e8:	dc000017 	ldw	r16,0(sp)
100019ec:	dec00504 	addi	sp,sp,20
100019f0:	f800283a 	ret
100019f4:	8009883a 	mov	r4,r16
100019f8:	04cbc83a 	sub	r5,zero,r19
100019fc:	00018f80 	call	100018f8 <_sbrk_r>
10001a00:	00ffffc4 	movi	r3,-1
10001a04:	10c01326 	beq	r2,r3,10001a54 <_malloc_trim_r+0xf8>
10001a08:	00840034 	movhi	r2,4096
10001a0c:	109d5904 	addi	r2,r2,30052
10001a10:	11000017 	ldw	r4,0(r2)
10001a14:	88c00217 	ldw	r3,8(r17)
10001a18:	94e5c83a 	sub	r18,r18,r19
10001a1c:	94800054 	ori	r18,r18,1
10001a20:	24e7c83a 	sub	r19,r4,r19
10001a24:	1c800115 	stw	r18,4(r3)
10001a28:	8009883a 	mov	r4,r16
10001a2c:	14c00015 	stw	r19,0(r2)
10001a30:	0001ee40 	call	10001ee4 <__malloc_unlock>
10001a34:	00800044 	movi	r2,1
10001a38:	dfc00417 	ldw	ra,16(sp)
10001a3c:	dcc00317 	ldw	r19,12(sp)
10001a40:	dc800217 	ldw	r18,8(sp)
10001a44:	dc400117 	ldw	r17,4(sp)
10001a48:	dc000017 	ldw	r16,0(sp)
10001a4c:	dec00504 	addi	sp,sp,20
10001a50:	f800283a 	ret
10001a54:	8009883a 	mov	r4,r16
10001a58:	000b883a 	mov	r5,zero
10001a5c:	00018f80 	call	100018f8 <_sbrk_r>
10001a60:	88c00217 	ldw	r3,8(r17)
10001a64:	014003c4 	movi	r5,15
10001a68:	10c9c83a 	sub	r4,r2,r3
10001a6c:	293fd70e 	bge	r5,r4,100019cc <__alt_data_end+0xf80019cc>
10001a70:	01440034 	movhi	r5,4096
10001a74:	29569f04 	addi	r5,r5,23164
10001a78:	29400017 	ldw	r5,0(r5)
10001a7c:	21000054 	ori	r4,r4,1
10001a80:	19000115 	stw	r4,4(r3)
10001a84:	1145c83a 	sub	r2,r2,r5
10001a88:	01440034 	movhi	r5,4096
10001a8c:	295d5904 	addi	r5,r5,30052
10001a90:	28800015 	stw	r2,0(r5)
10001a94:	003fcd06 	br	100019cc <__alt_data_end+0xf80019cc>

10001a98 <_free_r>:
10001a98:	defffd04 	addi	sp,sp,-12
10001a9c:	dc000015 	stw	r16,0(sp)
10001aa0:	dfc00215 	stw	ra,8(sp)
10001aa4:	dc400115 	stw	r17,4(sp)
10001aa8:	2821883a 	mov	r16,r5
10001aac:	28004c26 	beq	r5,zero,10001be0 <_free_r+0x148>
10001ab0:	2023883a 	mov	r17,r4
10001ab4:	0001ec40 	call	10001ec4 <__malloc_lock>
10001ab8:	823fff17 	ldw	r8,-4(r16)
10001abc:	00bfff84 	movi	r2,-2
10001ac0:	81bffe04 	addi	r6,r16,-8
10001ac4:	4084703a 	and	r2,r8,r2
10001ac8:	3087883a 	add	r3,r6,r2
10001acc:	01440034 	movhi	r5,4096
10001ad0:	29500d04 	addi	r5,r5,16436
10001ad4:	1a400117 	ldw	r9,4(r3)
10001ad8:	29000217 	ldw	r4,8(r5)
10001adc:	01ffff04 	movi	r7,-4
10001ae0:	49ce703a 	and	r7,r9,r7
10001ae4:	20c06526 	beq	r4,r3,10001c7c <_free_r+0x1e4>
10001ae8:	19c00115 	stw	r7,4(r3)
10001aec:	4200004c 	andi	r8,r8,1
10001af0:	40003026 	beq	r8,zero,10001bb4 <_free_r+0x11c>
10001af4:	0009883a 	mov	r4,zero
10001af8:	19d1883a 	add	r8,r3,r7
10001afc:	42000117 	ldw	r8,4(r8)
10001b00:	4200004c 	andi	r8,r8,1
10001b04:	4000061e 	bne	r8,zero,10001b20 <_free_r+0x88>
10001b08:	11c5883a 	add	r2,r2,r7
10001b0c:	19c00217 	ldw	r7,8(r3)
10001b10:	20004e26 	beq	r4,zero,10001c4c <_free_r+0x1b4>
10001b14:	18c00317 	ldw	r3,12(r3)
10001b18:	38c00315 	stw	r3,12(r7)
10001b1c:	19c00215 	stw	r7,8(r3)
10001b20:	10c00054 	ori	r3,r2,1
10001b24:	30c00115 	stw	r3,4(r6)
10001b28:	3087883a 	add	r3,r6,r2
10001b2c:	18800015 	stw	r2,0(r3)
10001b30:	20001a1e 	bne	r4,zero,10001b9c <_free_r+0x104>
10001b34:	00c07fc4 	movi	r3,511
10001b38:	18802e2e 	bgeu	r3,r2,10001bf4 <_free_r+0x15c>
10001b3c:	1006d27a 	srli	r3,r2,9
10001b40:	01000104 	movi	r4,4
10001b44:	20c06636 	bltu	r4,r3,10001ce0 <_free_r+0x248>
10001b48:	1008d1ba 	srli	r4,r2,6
10001b4c:	21000e04 	addi	r4,r4,56
10001b50:	210f883a 	add	r7,r4,r4
10001b54:	39cf883a 	add	r7,r7,r7
10001b58:	39cf883a 	add	r7,r7,r7
10001b5c:	29cf883a 	add	r7,r5,r7
10001b60:	38c00217 	ldw	r3,8(r7)
10001b64:	01440034 	movhi	r5,4096
10001b68:	29500d04 	addi	r5,r5,16436
10001b6c:	19c06126 	beq	r3,r7,10001cf4 <_free_r+0x25c>
10001b70:	013fff04 	movi	r4,-4
10001b74:	19400117 	ldw	r5,4(r3)
10001b78:	290a703a 	and	r5,r5,r4
10001b7c:	1140022e 	bgeu	r2,r5,10001b88 <_free_r+0xf0>
10001b80:	18c00217 	ldw	r3,8(r3)
10001b84:	38fffb1e 	bne	r7,r3,10001b74 <__alt_data_end+0xf8001b74>
10001b88:	18800317 	ldw	r2,12(r3)
10001b8c:	30800315 	stw	r2,12(r6)
10001b90:	30c00215 	stw	r3,8(r6)
10001b94:	11800215 	stw	r6,8(r2)
10001b98:	19800315 	stw	r6,12(r3)
10001b9c:	8809883a 	mov	r4,r17
10001ba0:	dfc00217 	ldw	ra,8(sp)
10001ba4:	dc400117 	ldw	r17,4(sp)
10001ba8:	dc000017 	ldw	r16,0(sp)
10001bac:	dec00304 	addi	sp,sp,12
10001bb0:	0001ee41 	jmpi	10001ee4 <__malloc_unlock>
10001bb4:	813ffe17 	ldw	r4,-8(r16)
10001bb8:	2a400204 	addi	r9,r5,8
10001bbc:	310dc83a 	sub	r6,r6,r4
10001bc0:	32000217 	ldw	r8,8(r6)
10001bc4:	1105883a 	add	r2,r2,r4
10001bc8:	42404326 	beq	r8,r9,10001cd8 <_free_r+0x240>
10001bcc:	32400317 	ldw	r9,12(r6)
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	42400315 	stw	r9,12(r8)
10001bd8:	4a000215 	stw	r8,8(r9)
10001bdc:	003fc606 	br	10001af8 <__alt_data_end+0xf8001af8>
10001be0:	dfc00217 	ldw	ra,8(sp)
10001be4:	dc400117 	ldw	r17,4(sp)
10001be8:	dc000017 	ldw	r16,0(sp)
10001bec:	dec00304 	addi	sp,sp,12
10001bf0:	f800283a 	ret
10001bf4:	1004d0fa 	srli	r2,r2,3
10001bf8:	02000044 	movi	r8,1
10001bfc:	29c00117 	ldw	r7,4(r5)
10001c00:	1087883a 	add	r3,r2,r2
10001c04:	18c7883a 	add	r3,r3,r3
10001c08:	18c7883a 	add	r3,r3,r3
10001c0c:	28c7883a 	add	r3,r5,r3
10001c10:	1005d0ba 	srai	r2,r2,2
10001c14:	19000217 	ldw	r4,8(r3)
10001c18:	30c00315 	stw	r3,12(r6)
10001c1c:	4084983a 	sll	r2,r8,r2
10001c20:	31000215 	stw	r4,8(r6)
10001c24:	19800215 	stw	r6,8(r3)
10001c28:	11c4b03a 	or	r2,r2,r7
10001c2c:	21800315 	stw	r6,12(r4)
10001c30:	8809883a 	mov	r4,r17
10001c34:	28800115 	stw	r2,4(r5)
10001c38:	dfc00217 	ldw	ra,8(sp)
10001c3c:	dc400117 	ldw	r17,4(sp)
10001c40:	dc000017 	ldw	r16,0(sp)
10001c44:	dec00304 	addi	sp,sp,12
10001c48:	0001ee41 	jmpi	10001ee4 <__malloc_unlock>
10001c4c:	02040034 	movhi	r8,4096
10001c50:	42100f04 	addi	r8,r8,16444
10001c54:	3a3faf1e 	bne	r7,r8,10001b14 <__alt_data_end+0xf8001b14>
10001c58:	29800515 	stw	r6,20(r5)
10001c5c:	29800415 	stw	r6,16(r5)
10001c60:	10c00054 	ori	r3,r2,1
10001c64:	31c00315 	stw	r7,12(r6)
10001c68:	31c00215 	stw	r7,8(r6)
10001c6c:	30c00115 	stw	r3,4(r6)
10001c70:	308d883a 	add	r6,r6,r2
10001c74:	30800015 	stw	r2,0(r6)
10001c78:	003fc806 	br	10001b9c <__alt_data_end+0xf8001b9c>
10001c7c:	4200004c 	andi	r8,r8,1
10001c80:	3885883a 	add	r2,r7,r2
10001c84:	4000071e 	bne	r8,zero,10001ca4 <_free_r+0x20c>
10001c88:	81fffe17 	ldw	r7,-8(r16)
10001c8c:	31cdc83a 	sub	r6,r6,r7
10001c90:	30c00317 	ldw	r3,12(r6)
10001c94:	31000217 	ldw	r4,8(r6)
10001c98:	11c5883a 	add	r2,r2,r7
10001c9c:	20c00315 	stw	r3,12(r4)
10001ca0:	19000215 	stw	r4,8(r3)
10001ca4:	00c40034 	movhi	r3,4096
10001ca8:	18d6a004 	addi	r3,r3,23168
10001cac:	11000054 	ori	r4,r2,1
10001cb0:	18c00017 	ldw	r3,0(r3)
10001cb4:	31000115 	stw	r4,4(r6)
10001cb8:	29800215 	stw	r6,8(r5)
10001cbc:	10ffb736 	bltu	r2,r3,10001b9c <__alt_data_end+0xf8001b9c>
10001cc0:	00840034 	movhi	r2,4096
10001cc4:	109d5104 	addi	r2,r2,30020
10001cc8:	11400017 	ldw	r5,0(r2)
10001ccc:	8809883a 	mov	r4,r17
10001cd0:	000195c0 	call	1000195c <_malloc_trim_r>
10001cd4:	003fb106 	br	10001b9c <__alt_data_end+0xf8001b9c>
10001cd8:	01000044 	movi	r4,1
10001cdc:	003f8606 	br	10001af8 <__alt_data_end+0xf8001af8>
10001ce0:	01000504 	movi	r4,20
10001ce4:	20c00b36 	bltu	r4,r3,10001d14 <_free_r+0x27c>
10001ce8:	190016c4 	addi	r4,r3,91
10001cec:	210f883a 	add	r7,r4,r4
10001cf0:	003f9806 	br	10001b54 <__alt_data_end+0xf8001b54>
10001cf4:	2009d0ba 	srai	r4,r4,2
10001cf8:	00800044 	movi	r2,1
10001cfc:	29c00117 	ldw	r7,4(r5)
10001d00:	1108983a 	sll	r4,r2,r4
10001d04:	1805883a 	mov	r2,r3
10001d08:	21c8b03a 	or	r4,r4,r7
10001d0c:	29000115 	stw	r4,4(r5)
10001d10:	003f9e06 	br	10001b8c <__alt_data_end+0xf8001b8c>
10001d14:	01001504 	movi	r4,84
10001d18:	20c00436 	bltu	r4,r3,10001d2c <_free_r+0x294>
10001d1c:	1008d33a 	srli	r4,r2,12
10001d20:	21001b84 	addi	r4,r4,110
10001d24:	210f883a 	add	r7,r4,r4
10001d28:	003f8a06 	br	10001b54 <__alt_data_end+0xf8001b54>
10001d2c:	01005504 	movi	r4,340
10001d30:	20c00436 	bltu	r4,r3,10001d44 <_free_r+0x2ac>
10001d34:	1008d3fa 	srli	r4,r2,15
10001d38:	21001dc4 	addi	r4,r4,119
10001d3c:	210f883a 	add	r7,r4,r4
10001d40:	003f8406 	br	10001b54 <__alt_data_end+0xf8001b54>
10001d44:	01015504 	movi	r4,1364
10001d48:	20c00436 	bltu	r4,r3,10001d5c <_free_r+0x2c4>
10001d4c:	1008d4ba 	srli	r4,r2,18
10001d50:	21001f04 	addi	r4,r4,124
10001d54:	210f883a 	add	r7,r4,r4
10001d58:	003f7e06 	br	10001b54 <__alt_data_end+0xf8001b54>
10001d5c:	01c03f04 	movi	r7,252
10001d60:	01001f84 	movi	r4,126
10001d64:	003f7b06 	br	10001b54 <__alt_data_end+0xf8001b54>

10001d68 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10001d68:	defffc04 	addi	sp,sp,-16
10001d6c:	df000315 	stw	fp,12(sp)
10001d70:	df000304 	addi	fp,sp,12
10001d74:	e13ffd15 	stw	r4,-12(fp)
10001d78:	e17ffe15 	stw	r5,-8(fp)
10001d7c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10001d80:	e0fffe17 	ldw	r3,-8(fp)
10001d84:	e0bffd17 	ldw	r2,-12(fp)
10001d88:	18800c26 	beq	r3,r2,10001dbc <alt_load_section+0x54>
  {
    while( to != end )
10001d8c:	00000806 	br	10001db0 <alt_load_section+0x48>
    {
      *to++ = *from++;
10001d90:	e0bffe17 	ldw	r2,-8(fp)
10001d94:	10c00104 	addi	r3,r2,4
10001d98:	e0fffe15 	stw	r3,-8(fp)
10001d9c:	e0fffd17 	ldw	r3,-12(fp)
10001da0:	19000104 	addi	r4,r3,4
10001da4:	e13ffd15 	stw	r4,-12(fp)
10001da8:	18c00017 	ldw	r3,0(r3)
10001dac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10001db0:	e0fffe17 	ldw	r3,-8(fp)
10001db4:	e0bfff17 	ldw	r2,-4(fp)
10001db8:	18bff51e 	bne	r3,r2,10001d90 <__alt_data_end+0xf8001d90>
    {
      *to++ = *from++;
    }
  }
}
10001dbc:	e037883a 	mov	sp,fp
10001dc0:	df000017 	ldw	fp,0(sp)
10001dc4:	dec00104 	addi	sp,sp,4
10001dc8:	f800283a 	ret

10001dcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10001dcc:	defffe04 	addi	sp,sp,-8
10001dd0:	dfc00115 	stw	ra,4(sp)
10001dd4:	df000015 	stw	fp,0(sp)
10001dd8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10001ddc:	01040034 	movhi	r4,4096
10001de0:	2116ad04 	addi	r4,r4,23220
10001de4:	01440034 	movhi	r5,4096
10001de8:	29500d04 	addi	r5,r5,16436
10001dec:	01840034 	movhi	r6,4096
10001df0:	3196ad04 	addi	r6,r6,23220
10001df4:	0001d680 	call	10001d68 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10001df8:	01040034 	movhi	r4,4096
10001dfc:	21000804 	addi	r4,r4,32
10001e00:	01440034 	movhi	r5,4096
10001e04:	29400804 	addi	r5,r5,32
10001e08:	01840034 	movhi	r6,4096
10001e0c:	31806f04 	addi	r6,r6,444
10001e10:	0001d680 	call	10001d68 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10001e14:	01040034 	movhi	r4,4096
10001e18:	210fff04 	addi	r4,r4,16380
10001e1c:	01440034 	movhi	r5,4096
10001e20:	294fff04 	addi	r5,r5,16380
10001e24:	01840034 	movhi	r6,4096
10001e28:	31900d04 	addi	r6,r6,16436
10001e2c:	0001d680 	call	10001d68 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10001e30:	0002d000 	call	10002d00 <alt_dcache_flush_all>
  alt_icache_flush_all();
10001e34:	0002ef00 	call	10002ef0 <alt_icache_flush_all>
}
10001e38:	e037883a 	mov	sp,fp
10001e3c:	dfc00117 	ldw	ra,4(sp)
10001e40:	df000017 	ldw	fp,0(sp)
10001e44:	dec00204 	addi	sp,sp,8
10001e48:	f800283a 	ret

10001e4c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10001e4c:	defffd04 	addi	sp,sp,-12
10001e50:	dfc00215 	stw	ra,8(sp)
10001e54:	df000115 	stw	fp,4(sp)
10001e58:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10001e5c:	0009883a 	mov	r4,zero
10001e60:	0001fec0 	call	10001fec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10001e64:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10001e68:	00020200 	call	10002020 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10001e6c:	01040034 	movhi	r4,4096
10001e70:	21100004 	addi	r4,r4,16384
10001e74:	01440034 	movhi	r5,4096
10001e78:	29500004 	addi	r5,r5,16384
10001e7c:	01840034 	movhi	r6,4096
10001e80:	31900004 	addi	r6,r6,16384
10001e84:	00032b40 	call	100032b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10001e88:	0002e380 	call	10002e38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10001e8c:	01040034 	movhi	r4,4096
10001e90:	210ba504 	addi	r4,r4,11924
10001e94:	0003a800 	call	10003a80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10001e98:	d126b917 	ldw	r4,-25884(gp)
10001e9c:	d0e6ba17 	ldw	r3,-25880(gp)
10001ea0:	d0a6bb17 	ldw	r2,-25876(gp)
10001ea4:	180b883a 	mov	r5,r3
10001ea8:	100d883a 	mov	r6,r2
10001eac:	0000ef00 	call	10000ef0 <main>
10001eb0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10001eb4:	01000044 	movi	r4,1
10001eb8:	0002c300 	call	10002c30 <close>
  exit (result);
10001ebc:	e13fff17 	ldw	r4,-4(fp)
10001ec0:	0003a940 	call	10003a94 <exit>

10001ec4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10001ec4:	defffe04 	addi	sp,sp,-8
10001ec8:	df000115 	stw	fp,4(sp)
10001ecc:	df000104 	addi	fp,sp,4
10001ed0:	e13fff15 	stw	r4,-4(fp)
}
10001ed4:	e037883a 	mov	sp,fp
10001ed8:	df000017 	ldw	fp,0(sp)
10001edc:	dec00104 	addi	sp,sp,4
10001ee0:	f800283a 	ret

10001ee4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10001ee4:	defffe04 	addi	sp,sp,-8
10001ee8:	df000115 	stw	fp,4(sp)
10001eec:	df000104 	addi	fp,sp,4
10001ef0:	e13fff15 	stw	r4,-4(fp)
}
10001ef4:	e037883a 	mov	sp,fp
10001ef8:	df000017 	ldw	fp,0(sp)
10001efc:	dec00104 	addi	sp,sp,4
10001f00:	f800283a 	ret

10001f04 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10001f04:	defff904 	addi	sp,sp,-28
10001f08:	df000615 	stw	fp,24(sp)
10001f0c:	df000604 	addi	fp,sp,24
10001f10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10001f14:	0005303a 	rdctl	r2,status
10001f18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10001f1c:	e0fffc17 	ldw	r3,-16(fp)
10001f20:	00bfff84 	movi	r2,-2
10001f24:	1884703a 	and	r2,r3,r2
10001f28:	1001703a 	wrctl	status,r2
  
  return context;
10001f2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10001f30:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10001f34:	d0a00917 	ldw	r2,-32732(gp)
10001f38:	10c000c4 	addi	r3,r2,3
10001f3c:	00bfff04 	movi	r2,-4
10001f40:	1884703a 	and	r2,r3,r2
10001f44:	d0a00915 	stw	r2,-32732(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10001f48:	d0e00917 	ldw	r3,-32732(gp)
10001f4c:	e0bfff17 	ldw	r2,-4(fp)
10001f50:	1885883a 	add	r2,r3,r2
10001f54:	00c60034 	movhi	r3,6144
10001f58:	18c00004 	addi	r3,r3,0
10001f5c:	1880062e 	bgeu	r3,r2,10001f78 <sbrk+0x74>
10001f60:	e0bffa17 	ldw	r2,-24(fp)
10001f64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10001f68:	e0bffd17 	ldw	r2,-12(fp)
10001f6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10001f70:	00bfffc4 	movi	r2,-1
10001f74:	00000b06 	br	10001fa4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10001f78:	d0a00917 	ldw	r2,-32732(gp)
10001f7c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10001f80:	d0e00917 	ldw	r3,-32732(gp)
10001f84:	e0bfff17 	ldw	r2,-4(fp)
10001f88:	1885883a 	add	r2,r3,r2
10001f8c:	d0a00915 	stw	r2,-32732(gp)
10001f90:	e0bffa17 	ldw	r2,-24(fp)
10001f94:	e0bffe15 	stw	r2,-8(fp)
10001f98:	e0bffe17 	ldw	r2,-8(fp)
10001f9c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10001fa0:	e0bffb17 	ldw	r2,-20(fp)
} 
10001fa4:	e037883a 	mov	sp,fp
10001fa8:	df000017 	ldw	fp,0(sp)
10001fac:	dec00104 	addi	sp,sp,4
10001fb0:	f800283a 	ret

10001fb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10001fb4:	defffd04 	addi	sp,sp,-12
10001fb8:	dfc00215 	stw	ra,8(sp)
10001fbc:	df000115 	stw	fp,4(sp)
10001fc0:	df000104 	addi	fp,sp,4
10001fc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10001fc8:	e13fff17 	ldw	r4,-4(fp)
10001fcc:	01440034 	movhi	r5,4096
10001fd0:	2956a604 	addi	r5,r5,23192
10001fd4:	0002d980 	call	10002d98 <alt_dev_llist_insert>
}
10001fd8:	e037883a 	mov	sp,fp
10001fdc:	dfc00117 	ldw	ra,4(sp)
10001fe0:	df000017 	ldw	fp,0(sp)
10001fe4:	dec00204 	addi	sp,sp,8
10001fe8:	f800283a 	ret

10001fec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10001fec:	defffd04 	addi	sp,sp,-12
10001ff0:	dfc00215 	stw	ra,8(sp)
10001ff4:	df000115 	stw	fp,4(sp)
10001ff8:	df000104 	addi	fp,sp,4
10001ffc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10002000:	00037e80 	call	100037e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10002004:	00800044 	movi	r2,1
10002008:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000200c:	e037883a 	mov	sp,fp
10002010:	dfc00117 	ldw	ra,4(sp)
10002014:	df000017 	ldw	fp,0(sp)
10002018:	dec00204 	addi	sp,sp,8
1000201c:	f800283a 	ret

10002020 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10002020:	defffe04 	addi	sp,sp,-8
10002024:	dfc00115 	stw	ra,4(sp)
10002028:	df000015 	stw	fp,0(sp)
1000202c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10002030:	01040034 	movhi	r4,4096
10002034:	21122204 	addi	r4,r4,18568
10002038:	000b883a 	mov	r5,zero
1000203c:	01800144 	movi	r6,5
10002040:	00021cc0 	call	100021cc <altera_avalon_jtag_uart_init>
10002044:	01040034 	movhi	r4,4096
10002048:	21121804 	addi	r4,r4,18528
1000204c:	0001fb40 	call	10001fb4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10002050:	0001883a 	nop
}
10002054:	e037883a 	mov	sp,fp
10002058:	dfc00117 	ldw	ra,4(sp)
1000205c:	df000017 	ldw	fp,0(sp)
10002060:	dec00204 	addi	sp,sp,8
10002064:	f800283a 	ret

10002068 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10002068:	defffa04 	addi	sp,sp,-24
1000206c:	dfc00515 	stw	ra,20(sp)
10002070:	df000415 	stw	fp,16(sp)
10002074:	df000404 	addi	fp,sp,16
10002078:	e13ffd15 	stw	r4,-12(fp)
1000207c:	e17ffe15 	stw	r5,-8(fp)
10002080:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10002084:	e0bffd17 	ldw	r2,-12(fp)
10002088:	10800017 	ldw	r2,0(r2)
1000208c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10002090:	e0bffc17 	ldw	r2,-16(fp)
10002094:	10c00a04 	addi	r3,r2,40
10002098:	e0bffd17 	ldw	r2,-12(fp)
1000209c:	10800217 	ldw	r2,8(r2)
100020a0:	1809883a 	mov	r4,r3
100020a4:	e17ffe17 	ldw	r5,-8(fp)
100020a8:	e1bfff17 	ldw	r6,-4(fp)
100020ac:	100f883a 	mov	r7,r2
100020b0:	00026800 	call	10002680 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100020b4:	e037883a 	mov	sp,fp
100020b8:	dfc00117 	ldw	ra,4(sp)
100020bc:	df000017 	ldw	fp,0(sp)
100020c0:	dec00204 	addi	sp,sp,8
100020c4:	f800283a 	ret

100020c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100020c8:	defffa04 	addi	sp,sp,-24
100020cc:	dfc00515 	stw	ra,20(sp)
100020d0:	df000415 	stw	fp,16(sp)
100020d4:	df000404 	addi	fp,sp,16
100020d8:	e13ffd15 	stw	r4,-12(fp)
100020dc:	e17ffe15 	stw	r5,-8(fp)
100020e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100020e4:	e0bffd17 	ldw	r2,-12(fp)
100020e8:	10800017 	ldw	r2,0(r2)
100020ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100020f0:	e0bffc17 	ldw	r2,-16(fp)
100020f4:	10c00a04 	addi	r3,r2,40
100020f8:	e0bffd17 	ldw	r2,-12(fp)
100020fc:	10800217 	ldw	r2,8(r2)
10002100:	1809883a 	mov	r4,r3
10002104:	e17ffe17 	ldw	r5,-8(fp)
10002108:	e1bfff17 	ldw	r6,-4(fp)
1000210c:	100f883a 	mov	r7,r2
10002110:	00028880 	call	10002888 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10002114:	e037883a 	mov	sp,fp
10002118:	dfc00117 	ldw	ra,4(sp)
1000211c:	df000017 	ldw	fp,0(sp)
10002120:	dec00204 	addi	sp,sp,8
10002124:	f800283a 	ret

10002128 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10002128:	defffc04 	addi	sp,sp,-16
1000212c:	dfc00315 	stw	ra,12(sp)
10002130:	df000215 	stw	fp,8(sp)
10002134:	df000204 	addi	fp,sp,8
10002138:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000213c:	e0bfff17 	ldw	r2,-4(fp)
10002140:	10800017 	ldw	r2,0(r2)
10002144:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10002148:	e0bffe17 	ldw	r2,-8(fp)
1000214c:	10c00a04 	addi	r3,r2,40
10002150:	e0bfff17 	ldw	r2,-4(fp)
10002154:	10800217 	ldw	r2,8(r2)
10002158:	1809883a 	mov	r4,r3
1000215c:	100b883a 	mov	r5,r2
10002160:	000252c0 	call	1000252c <altera_avalon_jtag_uart_close>
}
10002164:	e037883a 	mov	sp,fp
10002168:	dfc00117 	ldw	ra,4(sp)
1000216c:	df000017 	ldw	fp,0(sp)
10002170:	dec00204 	addi	sp,sp,8
10002174:	f800283a 	ret

10002178 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10002178:	defffa04 	addi	sp,sp,-24
1000217c:	dfc00515 	stw	ra,20(sp)
10002180:	df000415 	stw	fp,16(sp)
10002184:	df000404 	addi	fp,sp,16
10002188:	e13ffd15 	stw	r4,-12(fp)
1000218c:	e17ffe15 	stw	r5,-8(fp)
10002190:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10002194:	e0bffd17 	ldw	r2,-12(fp)
10002198:	10800017 	ldw	r2,0(r2)
1000219c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100021a0:	e0bffc17 	ldw	r2,-16(fp)
100021a4:	10800a04 	addi	r2,r2,40
100021a8:	1009883a 	mov	r4,r2
100021ac:	e17ffe17 	ldw	r5,-8(fp)
100021b0:	e1bfff17 	ldw	r6,-4(fp)
100021b4:	00025940 	call	10002594 <altera_avalon_jtag_uart_ioctl>
}
100021b8:	e037883a 	mov	sp,fp
100021bc:	dfc00117 	ldw	ra,4(sp)
100021c0:	df000017 	ldw	fp,0(sp)
100021c4:	dec00204 	addi	sp,sp,8
100021c8:	f800283a 	ret

100021cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100021cc:	defffa04 	addi	sp,sp,-24
100021d0:	dfc00515 	stw	ra,20(sp)
100021d4:	df000415 	stw	fp,16(sp)
100021d8:	df000404 	addi	fp,sp,16
100021dc:	e13ffd15 	stw	r4,-12(fp)
100021e0:	e17ffe15 	stw	r5,-8(fp)
100021e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100021e8:	e0bffd17 	ldw	r2,-12(fp)
100021ec:	00c00044 	movi	r3,1
100021f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100021f4:	e0bffd17 	ldw	r2,-12(fp)
100021f8:	10800017 	ldw	r2,0(r2)
100021fc:	10800104 	addi	r2,r2,4
10002200:	e0fffd17 	ldw	r3,-12(fp)
10002204:	18c00817 	ldw	r3,32(r3)
10002208:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000220c:	e0fffe17 	ldw	r3,-8(fp)
10002210:	e0bfff17 	ldw	r2,-4(fp)
10002214:	d8000015 	stw	zero,0(sp)
10002218:	1809883a 	mov	r4,r3
1000221c:	100b883a 	mov	r5,r2
10002220:	01840034 	movhi	r6,4096
10002224:	3188a304 	addi	r6,r6,8844
10002228:	e1fffd17 	ldw	r7,-12(fp)
1000222c:	0002f0c0 	call	10002f0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10002230:	e0bffd17 	ldw	r2,-12(fp)
10002234:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10002238:	e0bffd17 	ldw	r2,-12(fp)
1000223c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10002240:	00840034 	movhi	r2,4096
10002244:	109d5704 	addi	r2,r2,30044
10002248:	10800017 	ldw	r2,0(r2)
1000224c:	1809883a 	mov	r4,r3
10002250:	100b883a 	mov	r5,r2
10002254:	01840034 	movhi	r6,4096
10002258:	31892204 	addi	r6,r6,9352
1000225c:	e1fffd17 	ldw	r7,-12(fp)
10002260:	0002aa00 	call	10002aa0 <alt_alarm_start>
10002264:	1000040e 	bge	r2,zero,10002278 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10002268:	e0bffd17 	ldw	r2,-12(fp)
1000226c:	00e00034 	movhi	r3,32768
10002270:	18ffffc4 	addi	r3,r3,-1
10002274:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10002278:	e037883a 	mov	sp,fp
1000227c:	dfc00117 	ldw	ra,4(sp)
10002280:	df000017 	ldw	fp,0(sp)
10002284:	dec00204 	addi	sp,sp,8
10002288:	f800283a 	ret

1000228c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000228c:	defff804 	addi	sp,sp,-32
10002290:	df000715 	stw	fp,28(sp)
10002294:	df000704 	addi	fp,sp,28
10002298:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000229c:	e0bfff17 	ldw	r2,-4(fp)
100022a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100022a4:	e0bffb17 	ldw	r2,-20(fp)
100022a8:	10800017 	ldw	r2,0(r2)
100022ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100022b0:	e0bffc17 	ldw	r2,-16(fp)
100022b4:	10800104 	addi	r2,r2,4
100022b8:	10800037 	ldwio	r2,0(r2)
100022bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100022c0:	e0bffd17 	ldw	r2,-12(fp)
100022c4:	1080c00c 	andi	r2,r2,768
100022c8:	1000011e 	bne	r2,zero,100022d0 <altera_avalon_jtag_uart_irq+0x44>
      break;
100022cc:	00006a06 	br	10002478 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100022d0:	e0bffd17 	ldw	r2,-12(fp)
100022d4:	1080400c 	andi	r2,r2,256
100022d8:	10003226 	beq	r2,zero,100023a4 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100022dc:	00800074 	movhi	r2,1
100022e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100022e4:	e0bffb17 	ldw	r2,-20(fp)
100022e8:	10800a17 	ldw	r2,40(r2)
100022ec:	10800044 	addi	r2,r2,1
100022f0:	1081ffcc 	andi	r2,r2,2047
100022f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100022f8:	e0bffb17 	ldw	r2,-20(fp)
100022fc:	10c00b17 	ldw	r3,44(r2)
10002300:	e0bffe17 	ldw	r2,-8(fp)
10002304:	1880011e 	bne	r3,r2,1000230c <altera_avalon_jtag_uart_irq+0x80>
          break;
10002308:	00001506 	br	10002360 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000230c:	e0bffc17 	ldw	r2,-16(fp)
10002310:	10800037 	ldwio	r2,0(r2)
10002314:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10002318:	e0bff917 	ldw	r2,-28(fp)
1000231c:	10a0000c 	andi	r2,r2,32768
10002320:	1000011e 	bne	r2,zero,10002328 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10002324:	00000e06 	br	10002360 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10002328:	e0bffb17 	ldw	r2,-20(fp)
1000232c:	10800a17 	ldw	r2,40(r2)
10002330:	e0fff917 	ldw	r3,-28(fp)
10002334:	e13ffb17 	ldw	r4,-20(fp)
10002338:	2085883a 	add	r2,r4,r2
1000233c:	10800e04 	addi	r2,r2,56
10002340:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10002344:	e0bffb17 	ldw	r2,-20(fp)
10002348:	10800a17 	ldw	r2,40(r2)
1000234c:	10800044 	addi	r2,r2,1
10002350:	10c1ffcc 	andi	r3,r2,2047
10002354:	e0bffb17 	ldw	r2,-20(fp)
10002358:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000235c:	003fe106 	br	100022e4 <__alt_data_end+0xf80022e4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10002360:	e0bff917 	ldw	r2,-28(fp)
10002364:	10bfffec 	andhi	r2,r2,65535
10002368:	10000e26 	beq	r2,zero,100023a4 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000236c:	e0bffb17 	ldw	r2,-20(fp)
10002370:	10c00817 	ldw	r3,32(r2)
10002374:	00bfff84 	movi	r2,-2
10002378:	1886703a 	and	r3,r3,r2
1000237c:	e0bffb17 	ldw	r2,-20(fp)
10002380:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10002384:	e0bffc17 	ldw	r2,-16(fp)
10002388:	10800104 	addi	r2,r2,4
1000238c:	e0fffb17 	ldw	r3,-20(fp)
10002390:	18c00817 	ldw	r3,32(r3)
10002394:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10002398:	e0bffc17 	ldw	r2,-16(fp)
1000239c:	10800104 	addi	r2,r2,4
100023a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100023a4:	e0bffd17 	ldw	r2,-12(fp)
100023a8:	1080800c 	andi	r2,r2,512
100023ac:	10003126 	beq	r2,zero,10002474 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100023b0:	e0bffd17 	ldw	r2,-12(fp)
100023b4:	1004d43a 	srli	r2,r2,16
100023b8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100023bc:	00001406 	br	10002410 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100023c0:	e0bffc17 	ldw	r2,-16(fp)
100023c4:	e0fffb17 	ldw	r3,-20(fp)
100023c8:	18c00d17 	ldw	r3,52(r3)
100023cc:	e13ffb17 	ldw	r4,-20(fp)
100023d0:	20c7883a 	add	r3,r4,r3
100023d4:	18c20e04 	addi	r3,r3,2104
100023d8:	18c00003 	ldbu	r3,0(r3)
100023dc:	18c03fcc 	andi	r3,r3,255
100023e0:	18c0201c 	xori	r3,r3,128
100023e4:	18ffe004 	addi	r3,r3,-128
100023e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100023ec:	e0bffb17 	ldw	r2,-20(fp)
100023f0:	10800d17 	ldw	r2,52(r2)
100023f4:	10800044 	addi	r2,r2,1
100023f8:	10c1ffcc 	andi	r3,r2,2047
100023fc:	e0bffb17 	ldw	r2,-20(fp)
10002400:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10002404:	e0bffa17 	ldw	r2,-24(fp)
10002408:	10bfffc4 	addi	r2,r2,-1
1000240c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10002410:	e0bffa17 	ldw	r2,-24(fp)
10002414:	10000526 	beq	r2,zero,1000242c <altera_avalon_jtag_uart_irq+0x1a0>
10002418:	e0bffb17 	ldw	r2,-20(fp)
1000241c:	10c00d17 	ldw	r3,52(r2)
10002420:	e0bffb17 	ldw	r2,-20(fp)
10002424:	10800c17 	ldw	r2,48(r2)
10002428:	18bfe51e 	bne	r3,r2,100023c0 <__alt_data_end+0xf80023c0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000242c:	e0bffa17 	ldw	r2,-24(fp)
10002430:	10001026 	beq	r2,zero,10002474 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10002434:	e0bffb17 	ldw	r2,-20(fp)
10002438:	10c00817 	ldw	r3,32(r2)
1000243c:	00bfff44 	movi	r2,-3
10002440:	1886703a 	and	r3,r3,r2
10002444:	e0bffb17 	ldw	r2,-20(fp)
10002448:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000244c:	e0bffb17 	ldw	r2,-20(fp)
10002450:	10800017 	ldw	r2,0(r2)
10002454:	10800104 	addi	r2,r2,4
10002458:	e0fffb17 	ldw	r3,-20(fp)
1000245c:	18c00817 	ldw	r3,32(r3)
10002460:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10002464:	e0bffc17 	ldw	r2,-16(fp)
10002468:	10800104 	addi	r2,r2,4
1000246c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10002470:	003f8f06 	br	100022b0 <__alt_data_end+0xf80022b0>
10002474:	003f8e06 	br	100022b0 <__alt_data_end+0xf80022b0>
}
10002478:	e037883a 	mov	sp,fp
1000247c:	df000017 	ldw	fp,0(sp)
10002480:	dec00104 	addi	sp,sp,4
10002484:	f800283a 	ret

10002488 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10002488:	defff804 	addi	sp,sp,-32
1000248c:	df000715 	stw	fp,28(sp)
10002490:	df000704 	addi	fp,sp,28
10002494:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10002498:	e0bffb17 	ldw	r2,-20(fp)
1000249c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100024a0:	e0bff917 	ldw	r2,-28(fp)
100024a4:	10800017 	ldw	r2,0(r2)
100024a8:	10800104 	addi	r2,r2,4
100024ac:	10800037 	ldwio	r2,0(r2)
100024b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100024b4:	e0bffa17 	ldw	r2,-24(fp)
100024b8:	1081000c 	andi	r2,r2,1024
100024bc:	10000a26 	beq	r2,zero,100024e8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100024c0:	e0bff917 	ldw	r2,-28(fp)
100024c4:	10800017 	ldw	r2,0(r2)
100024c8:	10800104 	addi	r2,r2,4
100024cc:	e0fff917 	ldw	r3,-28(fp)
100024d0:	18c00817 	ldw	r3,32(r3)
100024d4:	18c10014 	ori	r3,r3,1024
100024d8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
100024dc:	e0bff917 	ldw	r2,-28(fp)
100024e0:	10000915 	stw	zero,36(r2)
100024e4:	00000a06 	br	10002510 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100024e8:	e0bff917 	ldw	r2,-28(fp)
100024ec:	10800917 	ldw	r2,36(r2)
100024f0:	00e00034 	movhi	r3,32768
100024f4:	18ffff04 	addi	r3,r3,-4
100024f8:	18800536 	bltu	r3,r2,10002510 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
100024fc:	e0bff917 	ldw	r2,-28(fp)
10002500:	10800917 	ldw	r2,36(r2)
10002504:	10c00044 	addi	r3,r2,1
10002508:	e0bff917 	ldw	r2,-28(fp)
1000250c:	10c00915 	stw	r3,36(r2)
10002510:	00840034 	movhi	r2,4096
10002514:	109d5704 	addi	r2,r2,30044
10002518:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000251c:	e037883a 	mov	sp,fp
10002520:	df000017 	ldw	fp,0(sp)
10002524:	dec00104 	addi	sp,sp,4
10002528:	f800283a 	ret

1000252c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000252c:	defffd04 	addi	sp,sp,-12
10002530:	df000215 	stw	fp,8(sp)
10002534:	df000204 	addi	fp,sp,8
10002538:	e13ffe15 	stw	r4,-8(fp)
1000253c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10002540:	00000506 	br	10002558 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10002544:	e0bfff17 	ldw	r2,-4(fp)
10002548:	1090000c 	andi	r2,r2,16384
1000254c:	10000226 	beq	r2,zero,10002558 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10002550:	00bffd44 	movi	r2,-11
10002554:	00000b06 	br	10002584 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10002558:	e0bffe17 	ldw	r2,-8(fp)
1000255c:	10c00d17 	ldw	r3,52(r2)
10002560:	e0bffe17 	ldw	r2,-8(fp)
10002564:	10800c17 	ldw	r2,48(r2)
10002568:	18800526 	beq	r3,r2,10002580 <altera_avalon_jtag_uart_close+0x54>
1000256c:	e0bffe17 	ldw	r2,-8(fp)
10002570:	10c00917 	ldw	r3,36(r2)
10002574:	e0bffe17 	ldw	r2,-8(fp)
10002578:	10800117 	ldw	r2,4(r2)
1000257c:	18bff136 	bltu	r3,r2,10002544 <__alt_data_end+0xf8002544>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10002580:	0005883a 	mov	r2,zero
}
10002584:	e037883a 	mov	sp,fp
10002588:	df000017 	ldw	fp,0(sp)
1000258c:	dec00104 	addi	sp,sp,4
10002590:	f800283a 	ret

10002594 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10002594:	defffa04 	addi	sp,sp,-24
10002598:	df000515 	stw	fp,20(sp)
1000259c:	df000504 	addi	fp,sp,20
100025a0:	e13ffd15 	stw	r4,-12(fp)
100025a4:	e17ffe15 	stw	r5,-8(fp)
100025a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100025ac:	00bff9c4 	movi	r2,-25
100025b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100025b4:	e0bffe17 	ldw	r2,-8(fp)
100025b8:	10da8060 	cmpeqi	r3,r2,27137
100025bc:	1800031e 	bne	r3,zero,100025cc <altera_avalon_jtag_uart_ioctl+0x38>
100025c0:	109a80a0 	cmpeqi	r2,r2,27138
100025c4:	1000191e 	bne	r2,zero,1000262c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100025c8:	00002806 	br	1000266c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100025cc:	e0bffd17 	ldw	r2,-12(fp)
100025d0:	10c00117 	ldw	r3,4(r2)
100025d4:	00a00034 	movhi	r2,32768
100025d8:	10bfffc4 	addi	r2,r2,-1
100025dc:	18801226 	beq	r3,r2,10002628 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
100025e0:	e0bfff17 	ldw	r2,-4(fp)
100025e4:	10800017 	ldw	r2,0(r2)
100025e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100025ec:	e0bffc17 	ldw	r2,-16(fp)
100025f0:	10800090 	cmplti	r2,r2,2
100025f4:	1000061e 	bne	r2,zero,10002610 <altera_avalon_jtag_uart_ioctl+0x7c>
100025f8:	e0fffc17 	ldw	r3,-16(fp)
100025fc:	00a00034 	movhi	r2,32768
10002600:	10bfffc4 	addi	r2,r2,-1
10002604:	18800226 	beq	r3,r2,10002610 <altera_avalon_jtag_uart_ioctl+0x7c>
10002608:	e0bffc17 	ldw	r2,-16(fp)
1000260c:	00000206 	br	10002618 <altera_avalon_jtag_uart_ioctl+0x84>
10002610:	00a00034 	movhi	r2,32768
10002614:	10bfff84 	addi	r2,r2,-2
10002618:	e0fffd17 	ldw	r3,-12(fp)
1000261c:	18800115 	stw	r2,4(r3)
      rc = 0;
10002620:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10002624:	00001106 	br	1000266c <altera_avalon_jtag_uart_ioctl+0xd8>
10002628:	00001006 	br	1000266c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000262c:	e0bffd17 	ldw	r2,-12(fp)
10002630:	10c00117 	ldw	r3,4(r2)
10002634:	00a00034 	movhi	r2,32768
10002638:	10bfffc4 	addi	r2,r2,-1
1000263c:	18800a26 	beq	r3,r2,10002668 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10002640:	e0bffd17 	ldw	r2,-12(fp)
10002644:	10c00917 	ldw	r3,36(r2)
10002648:	e0bffd17 	ldw	r2,-12(fp)
1000264c:	10800117 	ldw	r2,4(r2)
10002650:	1885803a 	cmpltu	r2,r3,r2
10002654:	10c03fcc 	andi	r3,r2,255
10002658:	e0bfff17 	ldw	r2,-4(fp)
1000265c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10002660:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10002664:	00000006 	br	10002668 <altera_avalon_jtag_uart_ioctl+0xd4>
10002668:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000266c:	e0bffb17 	ldw	r2,-20(fp)
}
10002670:	e037883a 	mov	sp,fp
10002674:	df000017 	ldw	fp,0(sp)
10002678:	dec00104 	addi	sp,sp,4
1000267c:	f800283a 	ret

10002680 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10002680:	defff304 	addi	sp,sp,-52
10002684:	dfc00c15 	stw	ra,48(sp)
10002688:	df000b15 	stw	fp,44(sp)
1000268c:	df000b04 	addi	fp,sp,44
10002690:	e13ffc15 	stw	r4,-16(fp)
10002694:	e17ffd15 	stw	r5,-12(fp)
10002698:	e1bffe15 	stw	r6,-8(fp)
1000269c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100026a0:	e0bffd17 	ldw	r2,-12(fp)
100026a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100026a8:	00004906 	br	100027d0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100026ac:	e0bffc17 	ldw	r2,-16(fp)
100026b0:	10800a17 	ldw	r2,40(r2)
100026b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100026b8:	e0bffc17 	ldw	r2,-16(fp)
100026bc:	10800b17 	ldw	r2,44(r2)
100026c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100026c4:	e0fff717 	ldw	r3,-36(fp)
100026c8:	e0bff817 	ldw	r2,-32(fp)
100026cc:	18800536 	bltu	r3,r2,100026e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100026d0:	e0fff717 	ldw	r3,-36(fp)
100026d4:	e0bff817 	ldw	r2,-32(fp)
100026d8:	1885c83a 	sub	r2,r3,r2
100026dc:	e0bff615 	stw	r2,-40(fp)
100026e0:	00000406 	br	100026f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100026e4:	00c20004 	movi	r3,2048
100026e8:	e0bff817 	ldw	r2,-32(fp)
100026ec:	1885c83a 	sub	r2,r3,r2
100026f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100026f4:	e0bff617 	ldw	r2,-40(fp)
100026f8:	1000011e 	bne	r2,zero,10002700 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100026fc:	00001d06 	br	10002774 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10002700:	e0fffe17 	ldw	r3,-8(fp)
10002704:	e0bff617 	ldw	r2,-40(fp)
10002708:	1880022e 	bgeu	r3,r2,10002714 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000270c:	e0bffe17 	ldw	r2,-8(fp)
10002710:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10002714:	e0bff817 	ldw	r2,-32(fp)
10002718:	10800e04 	addi	r2,r2,56
1000271c:	e0fffc17 	ldw	r3,-16(fp)
10002720:	1885883a 	add	r2,r3,r2
10002724:	e13ff517 	ldw	r4,-44(fp)
10002728:	100b883a 	mov	r5,r2
1000272c:	e1bff617 	ldw	r6,-40(fp)
10002730:	0003b480 	call	10003b48 <memcpy>
      ptr   += n;
10002734:	e0fff517 	ldw	r3,-44(fp)
10002738:	e0bff617 	ldw	r2,-40(fp)
1000273c:	1885883a 	add	r2,r3,r2
10002740:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10002744:	e0fffe17 	ldw	r3,-8(fp)
10002748:	e0bff617 	ldw	r2,-40(fp)
1000274c:	1885c83a 	sub	r2,r3,r2
10002750:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10002754:	e0fff817 	ldw	r3,-32(fp)
10002758:	e0bff617 	ldw	r2,-40(fp)
1000275c:	1885883a 	add	r2,r3,r2
10002760:	10c1ffcc 	andi	r3,r2,2047
10002764:	e0bffc17 	ldw	r2,-16(fp)
10002768:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000276c:	e0bffe17 	ldw	r2,-8(fp)
10002770:	00bfce16 	blt	zero,r2,100026ac <__alt_data_end+0xf80026ac>

    /* If we read any data then return it */
    if (ptr != buffer)
10002774:	e0fff517 	ldw	r3,-44(fp)
10002778:	e0bffd17 	ldw	r2,-12(fp)
1000277c:	18800126 	beq	r3,r2,10002784 <altera_avalon_jtag_uart_read+0x104>
      break;
10002780:	00001506 	br	100027d8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10002784:	e0bfff17 	ldw	r2,-4(fp)
10002788:	1090000c 	andi	r2,r2,16384
1000278c:	10000126 	beq	r2,zero,10002794 <altera_avalon_jtag_uart_read+0x114>
      break;
10002790:	00001106 	br	100027d8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10002794:	0001883a 	nop
10002798:	e0bffc17 	ldw	r2,-16(fp)
1000279c:	10c00a17 	ldw	r3,40(r2)
100027a0:	e0bff717 	ldw	r2,-36(fp)
100027a4:	1880051e 	bne	r3,r2,100027bc <altera_avalon_jtag_uart_read+0x13c>
100027a8:	e0bffc17 	ldw	r2,-16(fp)
100027ac:	10c00917 	ldw	r3,36(r2)
100027b0:	e0bffc17 	ldw	r2,-16(fp)
100027b4:	10800117 	ldw	r2,4(r2)
100027b8:	18bff736 	bltu	r3,r2,10002798 <__alt_data_end+0xf8002798>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100027bc:	e0bffc17 	ldw	r2,-16(fp)
100027c0:	10c00a17 	ldw	r3,40(r2)
100027c4:	e0bff717 	ldw	r2,-36(fp)
100027c8:	1880011e 	bne	r3,r2,100027d0 <altera_avalon_jtag_uart_read+0x150>
      break;
100027cc:	00000206 	br	100027d8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100027d0:	e0bffe17 	ldw	r2,-8(fp)
100027d4:	00bfb516 	blt	zero,r2,100026ac <__alt_data_end+0xf80026ac>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100027d8:	e0fff517 	ldw	r3,-44(fp)
100027dc:	e0bffd17 	ldw	r2,-12(fp)
100027e0:	18801726 	beq	r3,r2,10002840 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100027e4:	0005303a 	rdctl	r2,status
100027e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100027ec:	e0fffa17 	ldw	r3,-24(fp)
100027f0:	00bfff84 	movi	r2,-2
100027f4:	1884703a 	and	r2,r3,r2
100027f8:	1001703a 	wrctl	status,r2
  
  return context;
100027fc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10002800:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10002804:	e0bffc17 	ldw	r2,-16(fp)
10002808:	10800817 	ldw	r2,32(r2)
1000280c:	10c00054 	ori	r3,r2,1
10002810:	e0bffc17 	ldw	r2,-16(fp)
10002814:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10002818:	e0bffc17 	ldw	r2,-16(fp)
1000281c:	10800017 	ldw	r2,0(r2)
10002820:	10800104 	addi	r2,r2,4
10002824:	e0fffc17 	ldw	r3,-16(fp)
10002828:	18c00817 	ldw	r3,32(r3)
1000282c:	10c00035 	stwio	r3,0(r2)
10002830:	e0bff917 	ldw	r2,-28(fp)
10002834:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002838:	e0bffb17 	ldw	r2,-20(fp)
1000283c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10002840:	e0fff517 	ldw	r3,-44(fp)
10002844:	e0bffd17 	ldw	r2,-12(fp)
10002848:	18800426 	beq	r3,r2,1000285c <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
1000284c:	e0fff517 	ldw	r3,-44(fp)
10002850:	e0bffd17 	ldw	r2,-12(fp)
10002854:	1885c83a 	sub	r2,r3,r2
10002858:	00000606 	br	10002874 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
1000285c:	e0bfff17 	ldw	r2,-4(fp)
10002860:	1090000c 	andi	r2,r2,16384
10002864:	10000226 	beq	r2,zero,10002870 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
10002868:	00bffd44 	movi	r2,-11
1000286c:	00000106 	br	10002874 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
10002870:	00bffec4 	movi	r2,-5
}
10002874:	e037883a 	mov	sp,fp
10002878:	dfc00117 	ldw	ra,4(sp)
1000287c:	df000017 	ldw	fp,0(sp)
10002880:	dec00204 	addi	sp,sp,8
10002884:	f800283a 	ret

10002888 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10002888:	defff304 	addi	sp,sp,-52
1000288c:	dfc00c15 	stw	ra,48(sp)
10002890:	df000b15 	stw	fp,44(sp)
10002894:	df000b04 	addi	fp,sp,44
10002898:	e13ffc15 	stw	r4,-16(fp)
1000289c:	e17ffd15 	stw	r5,-12(fp)
100028a0:	e1bffe15 	stw	r6,-8(fp)
100028a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100028a8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100028ac:	e0bffd17 	ldw	r2,-12(fp)
100028b0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100028b4:	00003906 	br	1000299c <altera_avalon_jtag_uart_write+0x114>
100028b8:	00003806 	br	1000299c <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100028bc:	e0bffc17 	ldw	r2,-16(fp)
100028c0:	10800c17 	ldw	r2,48(r2)
100028c4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100028c8:	e0bffc17 	ldw	r2,-16(fp)
100028cc:	10800d17 	ldw	r2,52(r2)
100028d0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100028d4:	e0fff817 	ldw	r3,-32(fp)
100028d8:	e0bff517 	ldw	r2,-44(fp)
100028dc:	1880062e 	bgeu	r3,r2,100028f8 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
100028e0:	e0fff517 	ldw	r3,-44(fp)
100028e4:	e0bff817 	ldw	r2,-32(fp)
100028e8:	1885c83a 	sub	r2,r3,r2
100028ec:	10bfffc4 	addi	r2,r2,-1
100028f0:	e0bff615 	stw	r2,-40(fp)
100028f4:	00000b06 	br	10002924 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
100028f8:	e0bff517 	ldw	r2,-44(fp)
100028fc:	10000526 	beq	r2,zero,10002914 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10002900:	00c20004 	movi	r3,2048
10002904:	e0bff817 	ldw	r2,-32(fp)
10002908:	1885c83a 	sub	r2,r3,r2
1000290c:	e0bff615 	stw	r2,-40(fp)
10002910:	00000406 	br	10002924 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10002914:	00c1ffc4 	movi	r3,2047
10002918:	e0bff817 	ldw	r2,-32(fp)
1000291c:	1885c83a 	sub	r2,r3,r2
10002920:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10002924:	e0bff617 	ldw	r2,-40(fp)
10002928:	1000011e 	bne	r2,zero,10002930 <altera_avalon_jtag_uart_write+0xa8>
        break;
1000292c:	00001d06 	br	100029a4 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
10002930:	e0fffe17 	ldw	r3,-8(fp)
10002934:	e0bff617 	ldw	r2,-40(fp)
10002938:	1880022e 	bgeu	r3,r2,10002944 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1000293c:	e0bffe17 	ldw	r2,-8(fp)
10002940:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10002944:	e0bff817 	ldw	r2,-32(fp)
10002948:	10820e04 	addi	r2,r2,2104
1000294c:	e0fffc17 	ldw	r3,-16(fp)
10002950:	1885883a 	add	r2,r3,r2
10002954:	1009883a 	mov	r4,r2
10002958:	e17ffd17 	ldw	r5,-12(fp)
1000295c:	e1bff617 	ldw	r6,-40(fp)
10002960:	0003b480 	call	10003b48 <memcpy>
      ptr   += n;
10002964:	e0fffd17 	ldw	r3,-12(fp)
10002968:	e0bff617 	ldw	r2,-40(fp)
1000296c:	1885883a 	add	r2,r3,r2
10002970:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10002974:	e0fffe17 	ldw	r3,-8(fp)
10002978:	e0bff617 	ldw	r2,-40(fp)
1000297c:	1885c83a 	sub	r2,r3,r2
10002980:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10002984:	e0fff817 	ldw	r3,-32(fp)
10002988:	e0bff617 	ldw	r2,-40(fp)
1000298c:	1885883a 	add	r2,r3,r2
10002990:	10c1ffcc 	andi	r3,r2,2047
10002994:	e0bffc17 	ldw	r2,-16(fp)
10002998:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000299c:	e0bffe17 	ldw	r2,-8(fp)
100029a0:	00bfc616 	blt	zero,r2,100028bc <__alt_data_end+0xf80028bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100029a4:	0005303a 	rdctl	r2,status
100029a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100029ac:	e0fffa17 	ldw	r3,-24(fp)
100029b0:	00bfff84 	movi	r2,-2
100029b4:	1884703a 	and	r2,r3,r2
100029b8:	1001703a 	wrctl	status,r2
  
  return context;
100029bc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100029c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100029c4:	e0bffc17 	ldw	r2,-16(fp)
100029c8:	10800817 	ldw	r2,32(r2)
100029cc:	10c00094 	ori	r3,r2,2
100029d0:	e0bffc17 	ldw	r2,-16(fp)
100029d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100029d8:	e0bffc17 	ldw	r2,-16(fp)
100029dc:	10800017 	ldw	r2,0(r2)
100029e0:	10800104 	addi	r2,r2,4
100029e4:	e0fffc17 	ldw	r3,-16(fp)
100029e8:	18c00817 	ldw	r3,32(r3)
100029ec:	10c00035 	stwio	r3,0(r2)
100029f0:	e0bff917 	ldw	r2,-28(fp)
100029f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100029f8:	e0bffb17 	ldw	r2,-20(fp)
100029fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10002a00:	e0bffe17 	ldw	r2,-8(fp)
10002a04:	0080120e 	bge	zero,r2,10002a50 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10002a08:	e0bfff17 	ldw	r2,-4(fp)
10002a0c:	1090000c 	andi	r2,r2,16384
10002a10:	10000126 	beq	r2,zero,10002a18 <altera_avalon_jtag_uart_write+0x190>
        break;
10002a14:	00001006 	br	10002a58 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10002a18:	0001883a 	nop
10002a1c:	e0bffc17 	ldw	r2,-16(fp)
10002a20:	10c00d17 	ldw	r3,52(r2)
10002a24:	e0bff517 	ldw	r2,-44(fp)
10002a28:	1880051e 	bne	r3,r2,10002a40 <altera_avalon_jtag_uart_write+0x1b8>
10002a2c:	e0bffc17 	ldw	r2,-16(fp)
10002a30:	10c00917 	ldw	r3,36(r2)
10002a34:	e0bffc17 	ldw	r2,-16(fp)
10002a38:	10800117 	ldw	r2,4(r2)
10002a3c:	18bff736 	bltu	r3,r2,10002a1c <__alt_data_end+0xf8002a1c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10002a40:	e0bffc17 	ldw	r2,-16(fp)
10002a44:	10800917 	ldw	r2,36(r2)
10002a48:	10000126 	beq	r2,zero,10002a50 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10002a4c:	00000206 	br	10002a58 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10002a50:	e0bffe17 	ldw	r2,-8(fp)
10002a54:	00bf9816 	blt	zero,r2,100028b8 <__alt_data_end+0xf80028b8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10002a58:	e0fffd17 	ldw	r3,-12(fp)
10002a5c:	e0bff717 	ldw	r2,-36(fp)
10002a60:	18800426 	beq	r3,r2,10002a74 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10002a64:	e0fffd17 	ldw	r3,-12(fp)
10002a68:	e0bff717 	ldw	r2,-36(fp)
10002a6c:	1885c83a 	sub	r2,r3,r2
10002a70:	00000606 	br	10002a8c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10002a74:	e0bfff17 	ldw	r2,-4(fp)
10002a78:	1090000c 	andi	r2,r2,16384
10002a7c:	10000226 	beq	r2,zero,10002a88 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10002a80:	00bffd44 	movi	r2,-11
10002a84:	00000106 	br	10002a8c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10002a88:	00bffec4 	movi	r2,-5
}
10002a8c:	e037883a 	mov	sp,fp
10002a90:	dfc00117 	ldw	ra,4(sp)
10002a94:	df000017 	ldw	fp,0(sp)
10002a98:	dec00204 	addi	sp,sp,8
10002a9c:	f800283a 	ret

10002aa0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10002aa0:	defff504 	addi	sp,sp,-44
10002aa4:	df000a15 	stw	fp,40(sp)
10002aa8:	df000a04 	addi	fp,sp,40
10002aac:	e13ffc15 	stw	r4,-16(fp)
10002ab0:	e17ffd15 	stw	r5,-12(fp)
10002ab4:	e1bffe15 	stw	r6,-8(fp)
10002ab8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10002abc:	e03ff615 	stw	zero,-40(fp)
10002ac0:	00840034 	movhi	r2,4096
10002ac4:	109d5704 	addi	r2,r2,30044
10002ac8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10002acc:	10003f26 	beq	r2,zero,10002bcc <alt_alarm_start+0x12c>
  {
    if (alarm)
10002ad0:	e0bffc17 	ldw	r2,-16(fp)
10002ad4:	10003b26 	beq	r2,zero,10002bc4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10002ad8:	e0bffc17 	ldw	r2,-16(fp)
10002adc:	e0fffe17 	ldw	r3,-8(fp)
10002ae0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10002ae4:	e0bffc17 	ldw	r2,-16(fp)
10002ae8:	e0ffff17 	ldw	r3,-4(fp)
10002aec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10002af0:	0005303a 	rdctl	r2,status
10002af4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10002af8:	e0fff817 	ldw	r3,-32(fp)
10002afc:	00bfff84 	movi	r2,-2
10002b00:	1884703a 	and	r2,r3,r2
10002b04:	1001703a 	wrctl	status,r2
  
  return context;
10002b08:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10002b0c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10002b10:	00840034 	movhi	r2,4096
10002b14:	109d5804 	addi	r2,r2,30048
10002b18:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10002b1c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10002b20:	e0fffd17 	ldw	r3,-12(fp)
10002b24:	e0bff617 	ldw	r2,-40(fp)
10002b28:	1885883a 	add	r2,r3,r2
10002b2c:	10c00044 	addi	r3,r2,1
10002b30:	e0bffc17 	ldw	r2,-16(fp)
10002b34:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10002b38:	e0bffc17 	ldw	r2,-16(fp)
10002b3c:	10c00217 	ldw	r3,8(r2)
10002b40:	e0bff617 	ldw	r2,-40(fp)
10002b44:	1880042e 	bgeu	r3,r2,10002b58 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10002b48:	e0bffc17 	ldw	r2,-16(fp)
10002b4c:	00c00044 	movi	r3,1
10002b50:	10c00405 	stb	r3,16(r2)
10002b54:	00000206 	br	10002b60 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10002b58:	e0bffc17 	ldw	r2,-16(fp)
10002b5c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10002b60:	e0bffc17 	ldw	r2,-16(fp)
10002b64:	00c40034 	movhi	r3,4096
10002b68:	18d6ab04 	addi	r3,r3,23212
10002b6c:	e0fff915 	stw	r3,-28(fp)
10002b70:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10002b74:	e0bffa17 	ldw	r2,-24(fp)
10002b78:	e0fff917 	ldw	r3,-28(fp)
10002b7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10002b80:	e0bff917 	ldw	r2,-28(fp)
10002b84:	10c00017 	ldw	r3,0(r2)
10002b88:	e0bffa17 	ldw	r2,-24(fp)
10002b8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10002b90:	e0bff917 	ldw	r2,-28(fp)
10002b94:	10800017 	ldw	r2,0(r2)
10002b98:	e0fffa17 	ldw	r3,-24(fp)
10002b9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10002ba0:	e0bff917 	ldw	r2,-28(fp)
10002ba4:	e0fffa17 	ldw	r3,-24(fp)
10002ba8:	10c00015 	stw	r3,0(r2)
10002bac:	e0bff717 	ldw	r2,-36(fp)
10002bb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002bb4:	e0bffb17 	ldw	r2,-20(fp)
10002bb8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10002bbc:	0005883a 	mov	r2,zero
10002bc0:	00000306 	br	10002bd0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10002bc4:	00bffa84 	movi	r2,-22
10002bc8:	00000106 	br	10002bd0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10002bcc:	00bfde84 	movi	r2,-134
  }
}
10002bd0:	e037883a 	mov	sp,fp
10002bd4:	df000017 	ldw	fp,0(sp)
10002bd8:	dec00104 	addi	sp,sp,4
10002bdc:	f800283a 	ret

10002be0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002be0:	defffe04 	addi	sp,sp,-8
10002be4:	dfc00115 	stw	ra,4(sp)
10002be8:	df000015 	stw	fp,0(sp)
10002bec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002bf0:	00840034 	movhi	r2,4096
10002bf4:	1096a904 	addi	r2,r2,23204
10002bf8:	10800017 	ldw	r2,0(r2)
10002bfc:	10000526 	beq	r2,zero,10002c14 <alt_get_errno+0x34>
10002c00:	00840034 	movhi	r2,4096
10002c04:	1096a904 	addi	r2,r2,23204
10002c08:	10800017 	ldw	r2,0(r2)
10002c0c:	103ee83a 	callr	r2
10002c10:	00000206 	br	10002c1c <alt_get_errno+0x3c>
10002c14:	00840034 	movhi	r2,4096
10002c18:	109d5204 	addi	r2,r2,30024
}
10002c1c:	e037883a 	mov	sp,fp
10002c20:	dfc00117 	ldw	ra,4(sp)
10002c24:	df000017 	ldw	fp,0(sp)
10002c28:	dec00204 	addi	sp,sp,8
10002c2c:	f800283a 	ret

10002c30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10002c30:	defffb04 	addi	sp,sp,-20
10002c34:	dfc00415 	stw	ra,16(sp)
10002c38:	df000315 	stw	fp,12(sp)
10002c3c:	df000304 	addi	fp,sp,12
10002c40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10002c44:	e0bfff17 	ldw	r2,-4(fp)
10002c48:	10000816 	blt	r2,zero,10002c6c <close+0x3c>
10002c4c:	e13fff17 	ldw	r4,-4(fp)
10002c50:	01400304 	movi	r5,12
10002c54:	0003fa00 	call	10003fa0 <__mulsi3>
10002c58:	1007883a 	mov	r3,r2
10002c5c:	00840034 	movhi	r2,4096
10002c60:	10963a04 	addi	r2,r2,22760
10002c64:	1885883a 	add	r2,r3,r2
10002c68:	00000106 	br	10002c70 <close+0x40>
10002c6c:	0005883a 	mov	r2,zero
10002c70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10002c74:	e0bffd17 	ldw	r2,-12(fp)
10002c78:	10001826 	beq	r2,zero,10002cdc <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10002c7c:	e0bffd17 	ldw	r2,-12(fp)
10002c80:	10800017 	ldw	r2,0(r2)
10002c84:	10800417 	ldw	r2,16(r2)
10002c88:	10000626 	beq	r2,zero,10002ca4 <close+0x74>
10002c8c:	e0bffd17 	ldw	r2,-12(fp)
10002c90:	10800017 	ldw	r2,0(r2)
10002c94:	10800417 	ldw	r2,16(r2)
10002c98:	e13ffd17 	ldw	r4,-12(fp)
10002c9c:	103ee83a 	callr	r2
10002ca0:	00000106 	br	10002ca8 <close+0x78>
10002ca4:	0005883a 	mov	r2,zero
10002ca8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10002cac:	e13fff17 	ldw	r4,-4(fp)
10002cb0:	00035cc0 	call	100035cc <alt_release_fd>
    if (rval < 0)
10002cb4:	e0bffe17 	ldw	r2,-8(fp)
10002cb8:	1000060e 	bge	r2,zero,10002cd4 <close+0xa4>
    {
      ALT_ERRNO = -rval;
10002cbc:	0002be00 	call	10002be0 <alt_get_errno>
10002cc0:	e0fffe17 	ldw	r3,-8(fp)
10002cc4:	00c7c83a 	sub	r3,zero,r3
10002cc8:	10c00015 	stw	r3,0(r2)
      return -1;
10002ccc:	00bfffc4 	movi	r2,-1
10002cd0:	00000606 	br	10002cec <close+0xbc>
    }
    return 0;
10002cd4:	0005883a 	mov	r2,zero
10002cd8:	00000406 	br	10002cec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10002cdc:	0002be00 	call	10002be0 <alt_get_errno>
10002ce0:	00c01444 	movi	r3,81
10002ce4:	10c00015 	stw	r3,0(r2)
    return -1;
10002ce8:	00bfffc4 	movi	r2,-1
  }
}
10002cec:	e037883a 	mov	sp,fp
10002cf0:	dfc00117 	ldw	ra,4(sp)
10002cf4:	df000017 	ldw	fp,0(sp)
10002cf8:	dec00204 	addi	sp,sp,8
10002cfc:	f800283a 	ret

10002d00 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10002d00:	deffff04 	addi	sp,sp,-4
10002d04:	df000015 	stw	fp,0(sp)
10002d08:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10002d0c:	e037883a 	mov	sp,fp
10002d10:	df000017 	ldw	fp,0(sp)
10002d14:	dec00104 	addi	sp,sp,4
10002d18:	f800283a 	ret

10002d1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10002d1c:	defffc04 	addi	sp,sp,-16
10002d20:	df000315 	stw	fp,12(sp)
10002d24:	df000304 	addi	fp,sp,12
10002d28:	e13ffd15 	stw	r4,-12(fp)
10002d2c:	e17ffe15 	stw	r5,-8(fp)
10002d30:	e1bfff15 	stw	r6,-4(fp)
  return len;
10002d34:	e0bfff17 	ldw	r2,-4(fp)
}
10002d38:	e037883a 	mov	sp,fp
10002d3c:	df000017 	ldw	fp,0(sp)
10002d40:	dec00104 	addi	sp,sp,4
10002d44:	f800283a 	ret

10002d48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002d48:	defffe04 	addi	sp,sp,-8
10002d4c:	dfc00115 	stw	ra,4(sp)
10002d50:	df000015 	stw	fp,0(sp)
10002d54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002d58:	00840034 	movhi	r2,4096
10002d5c:	1096a904 	addi	r2,r2,23204
10002d60:	10800017 	ldw	r2,0(r2)
10002d64:	10000526 	beq	r2,zero,10002d7c <alt_get_errno+0x34>
10002d68:	00840034 	movhi	r2,4096
10002d6c:	1096a904 	addi	r2,r2,23204
10002d70:	10800017 	ldw	r2,0(r2)
10002d74:	103ee83a 	callr	r2
10002d78:	00000206 	br	10002d84 <alt_get_errno+0x3c>
10002d7c:	00840034 	movhi	r2,4096
10002d80:	109d5204 	addi	r2,r2,30024
}
10002d84:	e037883a 	mov	sp,fp
10002d88:	dfc00117 	ldw	ra,4(sp)
10002d8c:	df000017 	ldw	fp,0(sp)
10002d90:	dec00204 	addi	sp,sp,8
10002d94:	f800283a 	ret

10002d98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10002d98:	defffa04 	addi	sp,sp,-24
10002d9c:	dfc00515 	stw	ra,20(sp)
10002da0:	df000415 	stw	fp,16(sp)
10002da4:	df000404 	addi	fp,sp,16
10002da8:	e13ffe15 	stw	r4,-8(fp)
10002dac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10002db0:	e0bffe17 	ldw	r2,-8(fp)
10002db4:	10000326 	beq	r2,zero,10002dc4 <alt_dev_llist_insert+0x2c>
10002db8:	e0bffe17 	ldw	r2,-8(fp)
10002dbc:	10800217 	ldw	r2,8(r2)
10002dc0:	1000051e 	bne	r2,zero,10002dd8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
10002dc4:	0002d480 	call	10002d48 <alt_get_errno>
10002dc8:	00c00584 	movi	r3,22
10002dcc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10002dd0:	00bffa84 	movi	r2,-22
10002dd4:	00001306 	br	10002e24 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10002dd8:	e0bffe17 	ldw	r2,-8(fp)
10002ddc:	e0ffff17 	ldw	r3,-4(fp)
10002de0:	e0fffc15 	stw	r3,-16(fp)
10002de4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10002de8:	e0bffd17 	ldw	r2,-12(fp)
10002dec:	e0fffc17 	ldw	r3,-16(fp)
10002df0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10002df4:	e0bffc17 	ldw	r2,-16(fp)
10002df8:	10c00017 	ldw	r3,0(r2)
10002dfc:	e0bffd17 	ldw	r2,-12(fp)
10002e00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10002e04:	e0bffc17 	ldw	r2,-16(fp)
10002e08:	10800017 	ldw	r2,0(r2)
10002e0c:	e0fffd17 	ldw	r3,-12(fp)
10002e10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10002e14:	e0bffc17 	ldw	r2,-16(fp)
10002e18:	e0fffd17 	ldw	r3,-12(fp)
10002e1c:	10c00015 	stw	r3,0(r2)

  return 0;  
10002e20:	0005883a 	mov	r2,zero
}
10002e24:	e037883a 	mov	sp,fp
10002e28:	dfc00117 	ldw	ra,4(sp)
10002e2c:	df000017 	ldw	fp,0(sp)
10002e30:	dec00204 	addi	sp,sp,8
10002e34:	f800283a 	ret

10002e38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10002e38:	defffd04 	addi	sp,sp,-12
10002e3c:	dfc00215 	stw	ra,8(sp)
10002e40:	df000115 	stw	fp,4(sp)
10002e44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10002e48:	00840034 	movhi	r2,4096
10002e4c:	108ffe04 	addi	r2,r2,16376
10002e50:	e0bfff15 	stw	r2,-4(fp)
10002e54:	00000606 	br	10002e70 <_do_ctors+0x38>
        (*ctor) (); 
10002e58:	e0bfff17 	ldw	r2,-4(fp)
10002e5c:	10800017 	ldw	r2,0(r2)
10002e60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10002e64:	e0bfff17 	ldw	r2,-4(fp)
10002e68:	10bfff04 	addi	r2,r2,-4
10002e6c:	e0bfff15 	stw	r2,-4(fp)
10002e70:	e0ffff17 	ldw	r3,-4(fp)
10002e74:	00840034 	movhi	r2,4096
10002e78:	108fff04 	addi	r2,r2,16380
10002e7c:	18bff62e 	bgeu	r3,r2,10002e58 <__alt_data_end+0xf8002e58>
        (*ctor) (); 
}
10002e80:	e037883a 	mov	sp,fp
10002e84:	dfc00117 	ldw	ra,4(sp)
10002e88:	df000017 	ldw	fp,0(sp)
10002e8c:	dec00204 	addi	sp,sp,8
10002e90:	f800283a 	ret

10002e94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10002e94:	defffd04 	addi	sp,sp,-12
10002e98:	dfc00215 	stw	ra,8(sp)
10002e9c:	df000115 	stw	fp,4(sp)
10002ea0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10002ea4:	00840034 	movhi	r2,4096
10002ea8:	108ffe04 	addi	r2,r2,16376
10002eac:	e0bfff15 	stw	r2,-4(fp)
10002eb0:	00000606 	br	10002ecc <_do_dtors+0x38>
        (*dtor) (); 
10002eb4:	e0bfff17 	ldw	r2,-4(fp)
10002eb8:	10800017 	ldw	r2,0(r2)
10002ebc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10002ec0:	e0bfff17 	ldw	r2,-4(fp)
10002ec4:	10bfff04 	addi	r2,r2,-4
10002ec8:	e0bfff15 	stw	r2,-4(fp)
10002ecc:	e0ffff17 	ldw	r3,-4(fp)
10002ed0:	00840034 	movhi	r2,4096
10002ed4:	108fff04 	addi	r2,r2,16380
10002ed8:	18bff62e 	bgeu	r3,r2,10002eb4 <__alt_data_end+0xf8002eb4>
        (*dtor) (); 
}
10002edc:	e037883a 	mov	sp,fp
10002ee0:	dfc00117 	ldw	ra,4(sp)
10002ee4:	df000017 	ldw	fp,0(sp)
10002ee8:	dec00204 	addi	sp,sp,8
10002eec:	f800283a 	ret

10002ef0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10002ef0:	deffff04 	addi	sp,sp,-4
10002ef4:	df000015 	stw	fp,0(sp)
10002ef8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10002efc:	e037883a 	mov	sp,fp
10002f00:	df000017 	ldw	fp,0(sp)
10002f04:	dec00104 	addi	sp,sp,4
10002f08:	f800283a 	ret

10002f0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10002f0c:	defff904 	addi	sp,sp,-28
10002f10:	dfc00615 	stw	ra,24(sp)
10002f14:	df000515 	stw	fp,20(sp)
10002f18:	df000504 	addi	fp,sp,20
10002f1c:	e13ffc15 	stw	r4,-16(fp)
10002f20:	e17ffd15 	stw	r5,-12(fp)
10002f24:	e1bffe15 	stw	r6,-8(fp)
10002f28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10002f2c:	e0800217 	ldw	r2,8(fp)
10002f30:	d8800015 	stw	r2,0(sp)
10002f34:	e13ffc17 	ldw	r4,-16(fp)
10002f38:	e17ffd17 	ldw	r5,-12(fp)
10002f3c:	e1bffe17 	ldw	r6,-8(fp)
10002f40:	e1ffff17 	ldw	r7,-4(fp)
10002f44:	00030e40 	call	100030e4 <alt_iic_isr_register>
}  
10002f48:	e037883a 	mov	sp,fp
10002f4c:	dfc00117 	ldw	ra,4(sp)
10002f50:	df000017 	ldw	fp,0(sp)
10002f54:	dec00204 	addi	sp,sp,8
10002f58:	f800283a 	ret

10002f5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10002f5c:	defff904 	addi	sp,sp,-28
10002f60:	df000615 	stw	fp,24(sp)
10002f64:	df000604 	addi	fp,sp,24
10002f68:	e13ffe15 	stw	r4,-8(fp)
10002f6c:	e17fff15 	stw	r5,-4(fp)
10002f70:	e0bfff17 	ldw	r2,-4(fp)
10002f74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10002f78:	0005303a 	rdctl	r2,status
10002f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10002f80:	e0fffb17 	ldw	r3,-20(fp)
10002f84:	00bfff84 	movi	r2,-2
10002f88:	1884703a 	and	r2,r3,r2
10002f8c:	1001703a 	wrctl	status,r2
  
  return context;
10002f90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10002f94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10002f98:	e0bffa17 	ldw	r2,-24(fp)
10002f9c:	00c00044 	movi	r3,1
10002fa0:	1884983a 	sll	r2,r3,r2
10002fa4:	1007883a 	mov	r3,r2
10002fa8:	00840034 	movhi	r2,4096
10002fac:	109d5604 	addi	r2,r2,30040
10002fb0:	10800017 	ldw	r2,0(r2)
10002fb4:	1886b03a 	or	r3,r3,r2
10002fb8:	00840034 	movhi	r2,4096
10002fbc:	109d5604 	addi	r2,r2,30040
10002fc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10002fc4:	00840034 	movhi	r2,4096
10002fc8:	109d5604 	addi	r2,r2,30040
10002fcc:	10800017 	ldw	r2,0(r2)
10002fd0:	100170fa 	wrctl	ienable,r2
10002fd4:	e0bffc17 	ldw	r2,-16(fp)
10002fd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002fdc:	e0bffd17 	ldw	r2,-12(fp)
10002fe0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10002fe4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10002fe8:	e037883a 	mov	sp,fp
10002fec:	df000017 	ldw	fp,0(sp)
10002ff0:	dec00104 	addi	sp,sp,4
10002ff4:	f800283a 	ret

10002ff8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10002ff8:	defff904 	addi	sp,sp,-28
10002ffc:	df000615 	stw	fp,24(sp)
10003000:	df000604 	addi	fp,sp,24
10003004:	e13ffe15 	stw	r4,-8(fp)
10003008:	e17fff15 	stw	r5,-4(fp)
1000300c:	e0bfff17 	ldw	r2,-4(fp)
10003010:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003014:	0005303a 	rdctl	r2,status
10003018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000301c:	e0fffb17 	ldw	r3,-20(fp)
10003020:	00bfff84 	movi	r2,-2
10003024:	1884703a 	and	r2,r3,r2
10003028:	1001703a 	wrctl	status,r2
  
  return context;
1000302c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10003030:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10003034:	e0bffa17 	ldw	r2,-24(fp)
10003038:	00c00044 	movi	r3,1
1000303c:	1884983a 	sll	r2,r3,r2
10003040:	0084303a 	nor	r2,zero,r2
10003044:	1007883a 	mov	r3,r2
10003048:	00840034 	movhi	r2,4096
1000304c:	109d5604 	addi	r2,r2,30040
10003050:	10800017 	ldw	r2,0(r2)
10003054:	1886703a 	and	r3,r3,r2
10003058:	00840034 	movhi	r2,4096
1000305c:	109d5604 	addi	r2,r2,30040
10003060:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10003064:	00840034 	movhi	r2,4096
10003068:	109d5604 	addi	r2,r2,30040
1000306c:	10800017 	ldw	r2,0(r2)
10003070:	100170fa 	wrctl	ienable,r2
10003074:	e0bffc17 	ldw	r2,-16(fp)
10003078:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000307c:	e0bffd17 	ldw	r2,-12(fp)
10003080:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10003084:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
10003088:	e037883a 	mov	sp,fp
1000308c:	df000017 	ldw	fp,0(sp)
10003090:	dec00104 	addi	sp,sp,4
10003094:	f800283a 	ret

10003098 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10003098:	defffc04 	addi	sp,sp,-16
1000309c:	df000315 	stw	fp,12(sp)
100030a0:	df000304 	addi	fp,sp,12
100030a4:	e13ffe15 	stw	r4,-8(fp)
100030a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100030ac:	000530fa 	rdctl	r2,ienable
100030b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100030b4:	e0bfff17 	ldw	r2,-4(fp)
100030b8:	00c00044 	movi	r3,1
100030bc:	1884983a 	sll	r2,r3,r2
100030c0:	1007883a 	mov	r3,r2
100030c4:	e0bffd17 	ldw	r2,-12(fp)
100030c8:	1884703a 	and	r2,r3,r2
100030cc:	1004c03a 	cmpne	r2,r2,zero
100030d0:	10803fcc 	andi	r2,r2,255
}
100030d4:	e037883a 	mov	sp,fp
100030d8:	df000017 	ldw	fp,0(sp)
100030dc:	dec00104 	addi	sp,sp,4
100030e0:	f800283a 	ret

100030e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100030e4:	defff504 	addi	sp,sp,-44
100030e8:	dfc00a15 	stw	ra,40(sp)
100030ec:	df000915 	stw	fp,36(sp)
100030f0:	df000904 	addi	fp,sp,36
100030f4:	e13ffc15 	stw	r4,-16(fp)
100030f8:	e17ffd15 	stw	r5,-12(fp)
100030fc:	e1bffe15 	stw	r6,-8(fp)
10003100:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10003104:	00bffa84 	movi	r2,-22
10003108:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000310c:	e0bffd17 	ldw	r2,-12(fp)
10003110:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10003114:	e0bff817 	ldw	r2,-32(fp)
10003118:	10800808 	cmpgei	r2,r2,32
1000311c:	1000271e 	bne	r2,zero,100031bc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003120:	0005303a 	rdctl	r2,status
10003124:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003128:	e0fffa17 	ldw	r3,-24(fp)
1000312c:	00bfff84 	movi	r2,-2
10003130:	1884703a 	and	r2,r3,r2
10003134:	1001703a 	wrctl	status,r2
  
  return context;
10003138:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000313c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10003140:	00c40034 	movhi	r3,4096
10003144:	18dd6304 	addi	r3,r3,30092
10003148:	e0bff817 	ldw	r2,-32(fp)
1000314c:	100490fa 	slli	r2,r2,3
10003150:	1885883a 	add	r2,r3,r2
10003154:	e0fffe17 	ldw	r3,-8(fp)
10003158:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000315c:	00c40034 	movhi	r3,4096
10003160:	18dd6304 	addi	r3,r3,30092
10003164:	e0bff817 	ldw	r2,-32(fp)
10003168:	100490fa 	slli	r2,r2,3
1000316c:	1885883a 	add	r2,r3,r2
10003170:	10800104 	addi	r2,r2,4
10003174:	e0ffff17 	ldw	r3,-4(fp)
10003178:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000317c:	e0bffe17 	ldw	r2,-8(fp)
10003180:	10000526 	beq	r2,zero,10003198 <alt_iic_isr_register+0xb4>
10003184:	e0bff817 	ldw	r2,-32(fp)
10003188:	e13ffc17 	ldw	r4,-16(fp)
1000318c:	100b883a 	mov	r5,r2
10003190:	0002f5c0 	call	10002f5c <alt_ic_irq_enable>
10003194:	00000406 	br	100031a8 <alt_iic_isr_register+0xc4>
10003198:	e0bff817 	ldw	r2,-32(fp)
1000319c:	e13ffc17 	ldw	r4,-16(fp)
100031a0:	100b883a 	mov	r5,r2
100031a4:	0002ff80 	call	10002ff8 <alt_ic_irq_disable>
100031a8:	e0bff715 	stw	r2,-36(fp)
100031ac:	e0bff917 	ldw	r2,-28(fp)
100031b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100031b4:	e0bffb17 	ldw	r2,-20(fp)
100031b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100031bc:	e0bff717 	ldw	r2,-36(fp)
}
100031c0:	e037883a 	mov	sp,fp
100031c4:	dfc00117 	ldw	ra,4(sp)
100031c8:	df000017 	ldw	fp,0(sp)
100031cc:	dec00204 	addi	sp,sp,8
100031d0:	f800283a 	ret

100031d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100031d4:	defff804 	addi	sp,sp,-32
100031d8:	dfc00715 	stw	ra,28(sp)
100031dc:	df000615 	stw	fp,24(sp)
100031e0:	dc000515 	stw	r16,20(sp)
100031e4:	df000604 	addi	fp,sp,24
100031e8:	e13ffb15 	stw	r4,-20(fp)
100031ec:	e17ffc15 	stw	r5,-16(fp)
100031f0:	e1bffd15 	stw	r6,-12(fp)
100031f4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100031f8:	e13ffc17 	ldw	r4,-16(fp)
100031fc:	e17ffd17 	ldw	r5,-12(fp)
10003200:	e1bffe17 	ldw	r6,-8(fp)
10003204:	00034700 	call	10003470 <open>
10003208:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000320c:	e0bffa17 	ldw	r2,-24(fp)
10003210:	10002216 	blt	r2,zero,1000329c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10003214:	04040034 	movhi	r16,4096
10003218:	84163a04 	addi	r16,r16,22760
1000321c:	e0bffa17 	ldw	r2,-24(fp)
10003220:	1009883a 	mov	r4,r2
10003224:	01400304 	movi	r5,12
10003228:	0003fa00 	call	10003fa0 <__mulsi3>
1000322c:	8085883a 	add	r2,r16,r2
10003230:	10c00017 	ldw	r3,0(r2)
10003234:	e0bffb17 	ldw	r2,-20(fp)
10003238:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000323c:	04040034 	movhi	r16,4096
10003240:	84163a04 	addi	r16,r16,22760
10003244:	e0bffa17 	ldw	r2,-24(fp)
10003248:	1009883a 	mov	r4,r2
1000324c:	01400304 	movi	r5,12
10003250:	0003fa00 	call	10003fa0 <__mulsi3>
10003254:	8085883a 	add	r2,r16,r2
10003258:	10800104 	addi	r2,r2,4
1000325c:	10c00017 	ldw	r3,0(r2)
10003260:	e0bffb17 	ldw	r2,-20(fp)
10003264:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10003268:	04040034 	movhi	r16,4096
1000326c:	84163a04 	addi	r16,r16,22760
10003270:	e0bffa17 	ldw	r2,-24(fp)
10003274:	1009883a 	mov	r4,r2
10003278:	01400304 	movi	r5,12
1000327c:	0003fa00 	call	10003fa0 <__mulsi3>
10003280:	8085883a 	add	r2,r16,r2
10003284:	10800204 	addi	r2,r2,8
10003288:	10c00017 	ldw	r3,0(r2)
1000328c:	e0bffb17 	ldw	r2,-20(fp)
10003290:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10003294:	e13ffa17 	ldw	r4,-24(fp)
10003298:	00035cc0 	call	100035cc <alt_release_fd>
  }
} 
1000329c:	e6ffff04 	addi	sp,fp,-4
100032a0:	dfc00217 	ldw	ra,8(sp)
100032a4:	df000117 	ldw	fp,4(sp)
100032a8:	dc000017 	ldw	r16,0(sp)
100032ac:	dec00304 	addi	sp,sp,12
100032b0:	f800283a 	ret

100032b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100032b4:	defffb04 	addi	sp,sp,-20
100032b8:	dfc00415 	stw	ra,16(sp)
100032bc:	df000315 	stw	fp,12(sp)
100032c0:	df000304 	addi	fp,sp,12
100032c4:	e13ffd15 	stw	r4,-12(fp)
100032c8:	e17ffe15 	stw	r5,-8(fp)
100032cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100032d0:	01040034 	movhi	r4,4096
100032d4:	21163d04 	addi	r4,r4,22772
100032d8:	e17ffd17 	ldw	r5,-12(fp)
100032dc:	01800044 	movi	r6,1
100032e0:	01c07fc4 	movi	r7,511
100032e4:	00031d40 	call	100031d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100032e8:	01040034 	movhi	r4,4096
100032ec:	21163a04 	addi	r4,r4,22760
100032f0:	e17ffe17 	ldw	r5,-8(fp)
100032f4:	000d883a 	mov	r6,zero
100032f8:	01c07fc4 	movi	r7,511
100032fc:	00031d40 	call	100031d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10003300:	01040034 	movhi	r4,4096
10003304:	21164004 	addi	r4,r4,22784
10003308:	e17fff17 	ldw	r5,-4(fp)
1000330c:	01800044 	movi	r6,1
10003310:	01c07fc4 	movi	r7,511
10003314:	00031d40 	call	100031d4 <alt_open_fd>
}  
10003318:	e037883a 	mov	sp,fp
1000331c:	dfc00117 	ldw	ra,4(sp)
10003320:	df000017 	ldw	fp,0(sp)
10003324:	dec00204 	addi	sp,sp,8
10003328:	f800283a 	ret

1000332c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000332c:	defffe04 	addi	sp,sp,-8
10003330:	dfc00115 	stw	ra,4(sp)
10003334:	df000015 	stw	fp,0(sp)
10003338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000333c:	00840034 	movhi	r2,4096
10003340:	1096a904 	addi	r2,r2,23204
10003344:	10800017 	ldw	r2,0(r2)
10003348:	10000526 	beq	r2,zero,10003360 <alt_get_errno+0x34>
1000334c:	00840034 	movhi	r2,4096
10003350:	1096a904 	addi	r2,r2,23204
10003354:	10800017 	ldw	r2,0(r2)
10003358:	103ee83a 	callr	r2
1000335c:	00000206 	br	10003368 <alt_get_errno+0x3c>
10003360:	00840034 	movhi	r2,4096
10003364:	109d5204 	addi	r2,r2,30024
}
10003368:	e037883a 	mov	sp,fp
1000336c:	dfc00117 	ldw	ra,4(sp)
10003370:	df000017 	ldw	fp,0(sp)
10003374:	dec00204 	addi	sp,sp,8
10003378:	f800283a 	ret

1000337c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000337c:	defffb04 	addi	sp,sp,-20
10003380:	dfc00415 	stw	ra,16(sp)
10003384:	df000315 	stw	fp,12(sp)
10003388:	dc000215 	stw	r16,8(sp)
1000338c:	df000304 	addi	fp,sp,12
10003390:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10003394:	e0bffe17 	ldw	r2,-8(fp)
10003398:	10800217 	ldw	r2,8(r2)
1000339c:	10d00034 	orhi	r3,r2,16384
100033a0:	e0bffe17 	ldw	r2,-8(fp)
100033a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100033a8:	e03ffd15 	stw	zero,-12(fp)
100033ac:	00002306 	br	1000343c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100033b0:	04040034 	movhi	r16,4096
100033b4:	84163a04 	addi	r16,r16,22760
100033b8:	e0bffd17 	ldw	r2,-12(fp)
100033bc:	1009883a 	mov	r4,r2
100033c0:	01400304 	movi	r5,12
100033c4:	0003fa00 	call	10003fa0 <__mulsi3>
100033c8:	8085883a 	add	r2,r16,r2
100033cc:	10c00017 	ldw	r3,0(r2)
100033d0:	e0bffe17 	ldw	r2,-8(fp)
100033d4:	10800017 	ldw	r2,0(r2)
100033d8:	1880151e 	bne	r3,r2,10003430 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100033dc:	04040034 	movhi	r16,4096
100033e0:	84163a04 	addi	r16,r16,22760
100033e4:	e0bffd17 	ldw	r2,-12(fp)
100033e8:	1009883a 	mov	r4,r2
100033ec:	01400304 	movi	r5,12
100033f0:	0003fa00 	call	10003fa0 <__mulsi3>
100033f4:	8085883a 	add	r2,r16,r2
100033f8:	10800204 	addi	r2,r2,8
100033fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10003400:	10000b0e 	bge	r2,zero,10003430 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10003404:	e13ffd17 	ldw	r4,-12(fp)
10003408:	01400304 	movi	r5,12
1000340c:	0003fa00 	call	10003fa0 <__mulsi3>
10003410:	1007883a 	mov	r3,r2
10003414:	00840034 	movhi	r2,4096
10003418:	10963a04 	addi	r2,r2,22760
1000341c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10003420:	e0bffe17 	ldw	r2,-8(fp)
10003424:	18800226 	beq	r3,r2,10003430 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10003428:	00bffcc4 	movi	r2,-13
1000342c:	00000a06 	br	10003458 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10003430:	e0bffd17 	ldw	r2,-12(fp)
10003434:	10800044 	addi	r2,r2,1
10003438:	e0bffd15 	stw	r2,-12(fp)
1000343c:	00840034 	movhi	r2,4096
10003440:	1096a804 	addi	r2,r2,23200
10003444:	10800017 	ldw	r2,0(r2)
10003448:	1007883a 	mov	r3,r2
1000344c:	e0bffd17 	ldw	r2,-12(fp)
10003450:	18bfd72e 	bgeu	r3,r2,100033b0 <__alt_data_end+0xf80033b0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10003454:	0005883a 	mov	r2,zero
}
10003458:	e6ffff04 	addi	sp,fp,-4
1000345c:	dfc00217 	ldw	ra,8(sp)
10003460:	df000117 	ldw	fp,4(sp)
10003464:	dc000017 	ldw	r16,0(sp)
10003468:	dec00304 	addi	sp,sp,12
1000346c:	f800283a 	ret

10003470 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10003470:	defff604 	addi	sp,sp,-40
10003474:	dfc00915 	stw	ra,36(sp)
10003478:	df000815 	stw	fp,32(sp)
1000347c:	df000804 	addi	fp,sp,32
10003480:	e13ffd15 	stw	r4,-12(fp)
10003484:	e17ffe15 	stw	r5,-8(fp)
10003488:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000348c:	00bfffc4 	movi	r2,-1
10003490:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10003494:	00bffb44 	movi	r2,-19
10003498:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000349c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100034a0:	e13ffd17 	ldw	r4,-12(fp)
100034a4:	01440034 	movhi	r5,4096
100034a8:	2956a604 	addi	r5,r5,23192
100034ac:	00038080 	call	10003808 <alt_find_dev>
100034b0:	e0bff815 	stw	r2,-32(fp)
100034b4:	e0bff817 	ldw	r2,-32(fp)
100034b8:	1000051e 	bne	r2,zero,100034d0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100034bc:	e13ffd17 	ldw	r4,-12(fp)
100034c0:	00038980 	call	10003898 <alt_find_file>
100034c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100034c8:	00800044 	movi	r2,1
100034cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100034d0:	e0bff817 	ldw	r2,-32(fp)
100034d4:	10002b26 	beq	r2,zero,10003584 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
100034d8:	e13ff817 	ldw	r4,-32(fp)
100034dc:	00039ac0 	call	100039ac <alt_get_fd>
100034e0:	e0bff915 	stw	r2,-28(fp)
100034e4:	e0bff917 	ldw	r2,-28(fp)
100034e8:	1000030e 	bge	r2,zero,100034f8 <open+0x88>
    {
      status = index;
100034ec:	e0bff917 	ldw	r2,-28(fp)
100034f0:	e0bffa15 	stw	r2,-24(fp)
100034f4:	00002506 	br	1000358c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100034f8:	e13ff917 	ldw	r4,-28(fp)
100034fc:	01400304 	movi	r5,12
10003500:	0003fa00 	call	10003fa0 <__mulsi3>
10003504:	1007883a 	mov	r3,r2
10003508:	00840034 	movhi	r2,4096
1000350c:	10963a04 	addi	r2,r2,22760
10003510:	1885883a 	add	r2,r3,r2
10003514:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10003518:	e0fffe17 	ldw	r3,-8(fp)
1000351c:	00900034 	movhi	r2,16384
10003520:	10bfffc4 	addi	r2,r2,-1
10003524:	1886703a 	and	r3,r3,r2
10003528:	e0bffc17 	ldw	r2,-16(fp)
1000352c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10003530:	e0bffb17 	ldw	r2,-20(fp)
10003534:	1000051e 	bne	r2,zero,1000354c <open+0xdc>
10003538:	e13ffc17 	ldw	r4,-16(fp)
1000353c:	000337c0 	call	1000337c <alt_file_locked>
10003540:	e0bffa15 	stw	r2,-24(fp)
10003544:	e0bffa17 	ldw	r2,-24(fp)
10003548:	10001016 	blt	r2,zero,1000358c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000354c:	e0bff817 	ldw	r2,-32(fp)
10003550:	10800317 	ldw	r2,12(r2)
10003554:	10000826 	beq	r2,zero,10003578 <open+0x108>
10003558:	e0bff817 	ldw	r2,-32(fp)
1000355c:	10800317 	ldw	r2,12(r2)
10003560:	e13ffc17 	ldw	r4,-16(fp)
10003564:	e17ffd17 	ldw	r5,-12(fp)
10003568:	e1bffe17 	ldw	r6,-8(fp)
1000356c:	e1ffff17 	ldw	r7,-4(fp)
10003570:	103ee83a 	callr	r2
10003574:	00000106 	br	1000357c <open+0x10c>
10003578:	0005883a 	mov	r2,zero
1000357c:	e0bffa15 	stw	r2,-24(fp)
10003580:	00000206 	br	1000358c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10003584:	00bffb44 	movi	r2,-19
10003588:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000358c:	e0bffa17 	ldw	r2,-24(fp)
10003590:	1000080e 	bge	r2,zero,100035b4 <open+0x144>
  {
    alt_release_fd (index);  
10003594:	e13ff917 	ldw	r4,-28(fp)
10003598:	00035cc0 	call	100035cc <alt_release_fd>
    ALT_ERRNO = -status;
1000359c:	000332c0 	call	1000332c <alt_get_errno>
100035a0:	e0fffa17 	ldw	r3,-24(fp)
100035a4:	00c7c83a 	sub	r3,zero,r3
100035a8:	10c00015 	stw	r3,0(r2)
    return -1;
100035ac:	00bfffc4 	movi	r2,-1
100035b0:	00000106 	br	100035b8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100035b4:	e0bff917 	ldw	r2,-28(fp)
}
100035b8:	e037883a 	mov	sp,fp
100035bc:	dfc00117 	ldw	ra,4(sp)
100035c0:	df000017 	ldw	fp,0(sp)
100035c4:	dec00204 	addi	sp,sp,8
100035c8:	f800283a 	ret

100035cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100035cc:	defffc04 	addi	sp,sp,-16
100035d0:	dfc00315 	stw	ra,12(sp)
100035d4:	df000215 	stw	fp,8(sp)
100035d8:	dc000115 	stw	r16,4(sp)
100035dc:	df000204 	addi	fp,sp,8
100035e0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100035e4:	e0bffe17 	ldw	r2,-8(fp)
100035e8:	108000d0 	cmplti	r2,r2,3
100035ec:	1000111e 	bne	r2,zero,10003634 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100035f0:	04040034 	movhi	r16,4096
100035f4:	84163a04 	addi	r16,r16,22760
100035f8:	e0bffe17 	ldw	r2,-8(fp)
100035fc:	1009883a 	mov	r4,r2
10003600:	01400304 	movi	r5,12
10003604:	0003fa00 	call	10003fa0 <__mulsi3>
10003608:	8085883a 	add	r2,r16,r2
1000360c:	10800204 	addi	r2,r2,8
10003610:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10003614:	04040034 	movhi	r16,4096
10003618:	84163a04 	addi	r16,r16,22760
1000361c:	e0bffe17 	ldw	r2,-8(fp)
10003620:	1009883a 	mov	r4,r2
10003624:	01400304 	movi	r5,12
10003628:	0003fa00 	call	10003fa0 <__mulsi3>
1000362c:	8085883a 	add	r2,r16,r2
10003630:	10000015 	stw	zero,0(r2)
  }
}
10003634:	e6ffff04 	addi	sp,fp,-4
10003638:	dfc00217 	ldw	ra,8(sp)
1000363c:	df000117 	ldw	fp,4(sp)
10003640:	dc000017 	ldw	r16,0(sp)
10003644:	dec00304 	addi	sp,sp,12
10003648:	f800283a 	ret

1000364c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000364c:	defffa04 	addi	sp,sp,-24
10003650:	df000515 	stw	fp,20(sp)
10003654:	df000504 	addi	fp,sp,20
10003658:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000365c:	0005303a 	rdctl	r2,status
10003660:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003664:	e0fffc17 	ldw	r3,-16(fp)
10003668:	00bfff84 	movi	r2,-2
1000366c:	1884703a 	and	r2,r3,r2
10003670:	1001703a 	wrctl	status,r2
  
  return context;
10003674:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10003678:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000367c:	e0bfff17 	ldw	r2,-4(fp)
10003680:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10003684:	e0bffd17 	ldw	r2,-12(fp)
10003688:	10800017 	ldw	r2,0(r2)
1000368c:	e0fffd17 	ldw	r3,-12(fp)
10003690:	18c00117 	ldw	r3,4(r3)
10003694:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10003698:	e0bffd17 	ldw	r2,-12(fp)
1000369c:	10800117 	ldw	r2,4(r2)
100036a0:	e0fffd17 	ldw	r3,-12(fp)
100036a4:	18c00017 	ldw	r3,0(r3)
100036a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100036ac:	e0bffd17 	ldw	r2,-12(fp)
100036b0:	e0fffd17 	ldw	r3,-12(fp)
100036b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100036b8:	e0bffd17 	ldw	r2,-12(fp)
100036bc:	e0fffd17 	ldw	r3,-12(fp)
100036c0:	10c00015 	stw	r3,0(r2)
100036c4:	e0bffb17 	ldw	r2,-20(fp)
100036c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100036cc:	e0bffe17 	ldw	r2,-8(fp)
100036d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100036d4:	e037883a 	mov	sp,fp
100036d8:	df000017 	ldw	fp,0(sp)
100036dc:	dec00104 	addi	sp,sp,4
100036e0:	f800283a 	ret

100036e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100036e4:	defffb04 	addi	sp,sp,-20
100036e8:	dfc00415 	stw	ra,16(sp)
100036ec:	df000315 	stw	fp,12(sp)
100036f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100036f4:	d0a01117 	ldw	r2,-32700(gp)
100036f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100036fc:	d0a6be17 	ldw	r2,-25864(gp)
10003700:	10800044 	addi	r2,r2,1
10003704:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10003708:	00002e06 	br	100037c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000370c:	e0bffd17 	ldw	r2,-12(fp)
10003710:	10800017 	ldw	r2,0(r2)
10003714:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10003718:	e0bffd17 	ldw	r2,-12(fp)
1000371c:	10800403 	ldbu	r2,16(r2)
10003720:	10803fcc 	andi	r2,r2,255
10003724:	10000426 	beq	r2,zero,10003738 <alt_tick+0x54>
10003728:	d0a6be17 	ldw	r2,-25864(gp)
1000372c:	1000021e 	bne	r2,zero,10003738 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10003730:	e0bffd17 	ldw	r2,-12(fp)
10003734:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10003738:	e0bffd17 	ldw	r2,-12(fp)
1000373c:	10800217 	ldw	r2,8(r2)
10003740:	d0e6be17 	ldw	r3,-25864(gp)
10003744:	18801d36 	bltu	r3,r2,100037bc <alt_tick+0xd8>
10003748:	e0bffd17 	ldw	r2,-12(fp)
1000374c:	10800403 	ldbu	r2,16(r2)
10003750:	10803fcc 	andi	r2,r2,255
10003754:	1000191e 	bne	r2,zero,100037bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10003758:	e0bffd17 	ldw	r2,-12(fp)
1000375c:	10800317 	ldw	r2,12(r2)
10003760:	e0fffd17 	ldw	r3,-12(fp)
10003764:	18c00517 	ldw	r3,20(r3)
10003768:	1809883a 	mov	r4,r3
1000376c:	103ee83a 	callr	r2
10003770:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10003774:	e0bfff17 	ldw	r2,-4(fp)
10003778:	1000031e 	bne	r2,zero,10003788 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000377c:	e13ffd17 	ldw	r4,-12(fp)
10003780:	000364c0 	call	1000364c <alt_alarm_stop>
10003784:	00000d06 	br	100037bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10003788:	e0bffd17 	ldw	r2,-12(fp)
1000378c:	10c00217 	ldw	r3,8(r2)
10003790:	e0bfff17 	ldw	r2,-4(fp)
10003794:	1887883a 	add	r3,r3,r2
10003798:	e0bffd17 	ldw	r2,-12(fp)
1000379c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100037a0:	e0bffd17 	ldw	r2,-12(fp)
100037a4:	10c00217 	ldw	r3,8(r2)
100037a8:	d0a6be17 	ldw	r2,-25864(gp)
100037ac:	1880032e 	bgeu	r3,r2,100037bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100037b0:	e0bffd17 	ldw	r2,-12(fp)
100037b4:	00c00044 	movi	r3,1
100037b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100037bc:	e0bffe17 	ldw	r2,-8(fp)
100037c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100037c4:	e0fffd17 	ldw	r3,-12(fp)
100037c8:	d0a01104 	addi	r2,gp,-32700
100037cc:	18bfcf1e 	bne	r3,r2,1000370c <__alt_data_end+0xf800370c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100037d0:	0001883a 	nop
}
100037d4:	e037883a 	mov	sp,fp
100037d8:	dfc00117 	ldw	ra,4(sp)
100037dc:	df000017 	ldw	fp,0(sp)
100037e0:	dec00204 	addi	sp,sp,8
100037e4:	f800283a 	ret

100037e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
100037e8:	deffff04 	addi	sp,sp,-4
100037ec:	df000015 	stw	fp,0(sp)
100037f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100037f4:	000170fa 	wrctl	ienable,zero
}
100037f8:	e037883a 	mov	sp,fp
100037fc:	df000017 	ldw	fp,0(sp)
10003800:	dec00104 	addi	sp,sp,4
10003804:	f800283a 	ret

10003808 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10003808:	defffa04 	addi	sp,sp,-24
1000380c:	dfc00515 	stw	ra,20(sp)
10003810:	df000415 	stw	fp,16(sp)
10003814:	df000404 	addi	fp,sp,16
10003818:	e13ffe15 	stw	r4,-8(fp)
1000381c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10003820:	e0bfff17 	ldw	r2,-4(fp)
10003824:	10800017 	ldw	r2,0(r2)
10003828:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000382c:	e13ffe17 	ldw	r4,-8(fp)
10003830:	0003c540 	call	10003c54 <strlen>
10003834:	10800044 	addi	r2,r2,1
10003838:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000383c:	00000d06 	br	10003874 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10003840:	e0bffc17 	ldw	r2,-16(fp)
10003844:	10c00217 	ldw	r3,8(r2)
10003848:	e0bffd17 	ldw	r2,-12(fp)
1000384c:	1809883a 	mov	r4,r3
10003850:	e17ffe17 	ldw	r5,-8(fp)
10003854:	100d883a 	mov	r6,r2
10003858:	0003acc0 	call	10003acc <memcmp>
1000385c:	1000021e 	bne	r2,zero,10003868 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10003860:	e0bffc17 	ldw	r2,-16(fp)
10003864:	00000706 	br	10003884 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10003868:	e0bffc17 	ldw	r2,-16(fp)
1000386c:	10800017 	ldw	r2,0(r2)
10003870:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10003874:	e0fffc17 	ldw	r3,-16(fp)
10003878:	e0bfff17 	ldw	r2,-4(fp)
1000387c:	18bff01e 	bne	r3,r2,10003840 <__alt_data_end+0xf8003840>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10003880:	0005883a 	mov	r2,zero
}
10003884:	e037883a 	mov	sp,fp
10003888:	dfc00117 	ldw	ra,4(sp)
1000388c:	df000017 	ldw	fp,0(sp)
10003890:	dec00204 	addi	sp,sp,8
10003894:	f800283a 	ret

10003898 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10003898:	defffb04 	addi	sp,sp,-20
1000389c:	dfc00415 	stw	ra,16(sp)
100038a0:	df000315 	stw	fp,12(sp)
100038a4:	df000304 	addi	fp,sp,12
100038a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100038ac:	00840034 	movhi	r2,4096
100038b0:	1096a404 	addi	r2,r2,23184
100038b4:	10800017 	ldw	r2,0(r2)
100038b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100038bc:	00003106 	br	10003984 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100038c0:	e0bffd17 	ldw	r2,-12(fp)
100038c4:	10800217 	ldw	r2,8(r2)
100038c8:	1009883a 	mov	r4,r2
100038cc:	0003c540 	call	10003c54 <strlen>
100038d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100038d4:	e0bffd17 	ldw	r2,-12(fp)
100038d8:	10c00217 	ldw	r3,8(r2)
100038dc:	e0bffe17 	ldw	r2,-8(fp)
100038e0:	10bfffc4 	addi	r2,r2,-1
100038e4:	1885883a 	add	r2,r3,r2
100038e8:	10800003 	ldbu	r2,0(r2)
100038ec:	10803fcc 	andi	r2,r2,255
100038f0:	1080201c 	xori	r2,r2,128
100038f4:	10bfe004 	addi	r2,r2,-128
100038f8:	10800bd8 	cmpnei	r2,r2,47
100038fc:	1000031e 	bne	r2,zero,1000390c <alt_find_file+0x74>
    {
      len -= 1;
10003900:	e0bffe17 	ldw	r2,-8(fp)
10003904:	10bfffc4 	addi	r2,r2,-1
10003908:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000390c:	e0bffe17 	ldw	r2,-8(fp)
10003910:	e0ffff17 	ldw	r3,-4(fp)
10003914:	1885883a 	add	r2,r3,r2
10003918:	10800003 	ldbu	r2,0(r2)
1000391c:	10803fcc 	andi	r2,r2,255
10003920:	1080201c 	xori	r2,r2,128
10003924:	10bfe004 	addi	r2,r2,-128
10003928:	10800be0 	cmpeqi	r2,r2,47
1000392c:	1000081e 	bne	r2,zero,10003950 <alt_find_file+0xb8>
10003930:	e0bffe17 	ldw	r2,-8(fp)
10003934:	e0ffff17 	ldw	r3,-4(fp)
10003938:	1885883a 	add	r2,r3,r2
1000393c:	10800003 	ldbu	r2,0(r2)
10003940:	10803fcc 	andi	r2,r2,255
10003944:	1080201c 	xori	r2,r2,128
10003948:	10bfe004 	addi	r2,r2,-128
1000394c:	10000a1e 	bne	r2,zero,10003978 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10003950:	e0bffd17 	ldw	r2,-12(fp)
10003954:	10c00217 	ldw	r3,8(r2)
10003958:	e0bffe17 	ldw	r2,-8(fp)
1000395c:	1809883a 	mov	r4,r3
10003960:	e17fff17 	ldw	r5,-4(fp)
10003964:	100d883a 	mov	r6,r2
10003968:	0003acc0 	call	10003acc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000396c:	1000021e 	bne	r2,zero,10003978 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10003970:	e0bffd17 	ldw	r2,-12(fp)
10003974:	00000806 	br	10003998 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10003978:	e0bffd17 	ldw	r2,-12(fp)
1000397c:	10800017 	ldw	r2,0(r2)
10003980:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10003984:	e0fffd17 	ldw	r3,-12(fp)
10003988:	00840034 	movhi	r2,4096
1000398c:	1096a404 	addi	r2,r2,23184
10003990:	18bfcb1e 	bne	r3,r2,100038c0 <__alt_data_end+0xf80038c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10003994:	0005883a 	mov	r2,zero
}
10003998:	e037883a 	mov	sp,fp
1000399c:	dfc00117 	ldw	ra,4(sp)
100039a0:	df000017 	ldw	fp,0(sp)
100039a4:	dec00204 	addi	sp,sp,8
100039a8:	f800283a 	ret

100039ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100039ac:	defffa04 	addi	sp,sp,-24
100039b0:	dfc00515 	stw	ra,20(sp)
100039b4:	df000415 	stw	fp,16(sp)
100039b8:	dc000315 	stw	r16,12(sp)
100039bc:	df000404 	addi	fp,sp,16
100039c0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100039c4:	00bffa04 	movi	r2,-24
100039c8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100039cc:	e03ffc15 	stw	zero,-16(fp)
100039d0:	00002106 	br	10003a58 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100039d4:	04040034 	movhi	r16,4096
100039d8:	84163a04 	addi	r16,r16,22760
100039dc:	e0bffc17 	ldw	r2,-16(fp)
100039e0:	1009883a 	mov	r4,r2
100039e4:	01400304 	movi	r5,12
100039e8:	0003fa00 	call	10003fa0 <__mulsi3>
100039ec:	8085883a 	add	r2,r16,r2
100039f0:	10800017 	ldw	r2,0(r2)
100039f4:	1000151e 	bne	r2,zero,10003a4c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
100039f8:	04040034 	movhi	r16,4096
100039fc:	84163a04 	addi	r16,r16,22760
10003a00:	e0bffc17 	ldw	r2,-16(fp)
10003a04:	1009883a 	mov	r4,r2
10003a08:	01400304 	movi	r5,12
10003a0c:	0003fa00 	call	10003fa0 <__mulsi3>
10003a10:	8085883a 	add	r2,r16,r2
10003a14:	e0fffe17 	ldw	r3,-8(fp)
10003a18:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10003a1c:	00840034 	movhi	r2,4096
10003a20:	1096a804 	addi	r2,r2,23200
10003a24:	10c00017 	ldw	r3,0(r2)
10003a28:	e0bffc17 	ldw	r2,-16(fp)
10003a2c:	1880040e 	bge	r3,r2,10003a40 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10003a30:	00840034 	movhi	r2,4096
10003a34:	1096a804 	addi	r2,r2,23200
10003a38:	e0fffc17 	ldw	r3,-16(fp)
10003a3c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10003a40:	e0bffc17 	ldw	r2,-16(fp)
10003a44:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10003a48:	00000606 	br	10003a64 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10003a4c:	e0bffc17 	ldw	r2,-16(fp)
10003a50:	10800044 	addi	r2,r2,1
10003a54:	e0bffc15 	stw	r2,-16(fp)
10003a58:	e0bffc17 	ldw	r2,-16(fp)
10003a5c:	10800810 	cmplti	r2,r2,32
10003a60:	103fdc1e 	bne	r2,zero,100039d4 <__alt_data_end+0xf80039d4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10003a64:	e0bffd17 	ldw	r2,-12(fp)
}
10003a68:	e6ffff04 	addi	sp,fp,-4
10003a6c:	dfc00217 	ldw	ra,8(sp)
10003a70:	df000117 	ldw	fp,4(sp)
10003a74:	dc000017 	ldw	r16,0(sp)
10003a78:	dec00304 	addi	sp,sp,12
10003a7c:	f800283a 	ret

10003a80 <atexit>:
10003a80:	200b883a 	mov	r5,r4
10003a84:	000d883a 	mov	r6,zero
10003a88:	0009883a 	mov	r4,zero
10003a8c:	000f883a 	mov	r7,zero
10003a90:	0003ce01 	jmpi	10003ce0 <__register_exitproc>

10003a94 <exit>:
10003a94:	defffe04 	addi	sp,sp,-8
10003a98:	000b883a 	mov	r5,zero
10003a9c:	dc000015 	stw	r16,0(sp)
10003aa0:	dfc00115 	stw	ra,4(sp)
10003aa4:	2021883a 	mov	r16,r4
10003aa8:	0003dfc0 	call	10003dfc <__call_exitprocs>
10003aac:	00840034 	movhi	r2,4096
10003ab0:	1096a104 	addi	r2,r2,23172
10003ab4:	11000017 	ldw	r4,0(r2)
10003ab8:	20800f17 	ldw	r2,60(r4)
10003abc:	10000126 	beq	r2,zero,10003ac4 <exit+0x30>
10003ac0:	103ee83a 	callr	r2
10003ac4:	8009883a 	mov	r4,r16
10003ac8:	0003fc80 	call	10003fc8 <_exit>

10003acc <memcmp>:
10003acc:	01c000c4 	movi	r7,3
10003ad0:	3980192e 	bgeu	r7,r6,10003b38 <memcmp+0x6c>
10003ad4:	2144b03a 	or	r2,r4,r5
10003ad8:	11c4703a 	and	r2,r2,r7
10003adc:	10000f26 	beq	r2,zero,10003b1c <memcmp+0x50>
10003ae0:	21c00003 	ldbu	r7,0(r4)
10003ae4:	28800003 	ldbu	r2,0(r5)
10003ae8:	3880151e 	bne	r7,r2,10003b40 <memcmp+0x74>
10003aec:	30ffff84 	addi	r3,r6,-2
10003af0:	01bfffc4 	movi	r6,-1
10003af4:	00000406 	br	10003b08 <memcmp+0x3c>
10003af8:	21c00003 	ldbu	r7,0(r4)
10003afc:	28800003 	ldbu	r2,0(r5)
10003b00:	18ffffc4 	addi	r3,r3,-1
10003b04:	38800e1e 	bne	r7,r2,10003b40 <memcmp+0x74>
10003b08:	21000044 	addi	r4,r4,1
10003b0c:	29400044 	addi	r5,r5,1
10003b10:	19bff91e 	bne	r3,r6,10003af8 <__alt_data_end+0xf8003af8>
10003b14:	0005883a 	mov	r2,zero
10003b18:	f800283a 	ret
10003b1c:	20c00017 	ldw	r3,0(r4)
10003b20:	28800017 	ldw	r2,0(r5)
10003b24:	1880041e 	bne	r3,r2,10003b38 <memcmp+0x6c>
10003b28:	31bfff04 	addi	r6,r6,-4
10003b2c:	21000104 	addi	r4,r4,4
10003b30:	29400104 	addi	r5,r5,4
10003b34:	39bff936 	bltu	r7,r6,10003b1c <__alt_data_end+0xf8003b1c>
10003b38:	303fe91e 	bne	r6,zero,10003ae0 <__alt_data_end+0xf8003ae0>
10003b3c:	003ff506 	br	10003b14 <__alt_data_end+0xf8003b14>
10003b40:	3885c83a 	sub	r2,r7,r2
10003b44:	f800283a 	ret

10003b48 <memcpy>:
10003b48:	00c003c4 	movi	r3,15
10003b4c:	2005883a 	mov	r2,r4
10003b50:	1980372e 	bgeu	r3,r6,10003c30 <memcpy+0xe8>
10003b54:	2146b03a 	or	r3,r4,r5
10003b58:	18c000cc 	andi	r3,r3,3
10003b5c:	1800371e 	bne	r3,zero,10003c3c <memcpy+0xf4>
10003b60:	327ffc04 	addi	r9,r6,-16
10003b64:	4812d13a 	srli	r9,r9,4
10003b68:	2007883a 	mov	r3,r4
10003b6c:	280f883a 	mov	r7,r5
10003b70:	4808913a 	slli	r4,r9,4
10003b74:	1109883a 	add	r4,r2,r4
10003b78:	21000404 	addi	r4,r4,16
10003b7c:	3a000017 	ldw	r8,0(r7)
10003b80:	18c00404 	addi	r3,r3,16
10003b84:	39c00404 	addi	r7,r7,16
10003b88:	1a3ffc15 	stw	r8,-16(r3)
10003b8c:	3a3ffd17 	ldw	r8,-12(r7)
10003b90:	1a3ffd15 	stw	r8,-12(r3)
10003b94:	3a3ffe17 	ldw	r8,-8(r7)
10003b98:	1a3ffe15 	stw	r8,-8(r3)
10003b9c:	3a3fff17 	ldw	r8,-4(r7)
10003ba0:	1a3fff15 	stw	r8,-4(r3)
10003ba4:	193ff51e 	bne	r3,r4,10003b7c <__alt_data_end+0xf8003b7c>
10003ba8:	49000044 	addi	r4,r9,1
10003bac:	2008913a 	slli	r4,r4,4
10003bb0:	328003cc 	andi	r10,r6,15
10003bb4:	1107883a 	add	r3,r2,r4
10003bb8:	290b883a 	add	r5,r5,r4
10003bbc:	010000c4 	movi	r4,3
10003bc0:	2280212e 	bgeu	r4,r10,10003c48 <memcpy+0x100>
10003bc4:	52bfff04 	addi	r10,r10,-4
10003bc8:	5014d0ba 	srli	r10,r10,2
10003bcc:	180f883a 	mov	r7,r3
10003bd0:	2811883a 	mov	r8,r5
10003bd4:	5289883a 	add	r4,r10,r10
10003bd8:	2109883a 	add	r4,r4,r4
10003bdc:	21000104 	addi	r4,r4,4
10003be0:	1909883a 	add	r4,r3,r4
10003be4:	42400017 	ldw	r9,0(r8)
10003be8:	39c00104 	addi	r7,r7,4
10003bec:	42000104 	addi	r8,r8,4
10003bf0:	3a7fff15 	stw	r9,-4(r7)
10003bf4:	393ffb1e 	bne	r7,r4,10003be4 <__alt_data_end+0xf8003be4>
10003bf8:	51000044 	addi	r4,r10,1
10003bfc:	2109883a 	add	r4,r4,r4
10003c00:	2109883a 	add	r4,r4,r4
10003c04:	318000cc 	andi	r6,r6,3
10003c08:	1907883a 	add	r3,r3,r4
10003c0c:	290b883a 	add	r5,r5,r4
10003c10:	30000c26 	beq	r6,zero,10003c44 <memcpy+0xfc>
10003c14:	298d883a 	add	r6,r5,r6
10003c18:	29c00003 	ldbu	r7,0(r5)
10003c1c:	18c00044 	addi	r3,r3,1
10003c20:	29400044 	addi	r5,r5,1
10003c24:	19ffffc5 	stb	r7,-1(r3)
10003c28:	29bffb1e 	bne	r5,r6,10003c18 <__alt_data_end+0xf8003c18>
10003c2c:	f800283a 	ret
10003c30:	2007883a 	mov	r3,r4
10003c34:	303ff71e 	bne	r6,zero,10003c14 <__alt_data_end+0xf8003c14>
10003c38:	00000206 	br	10003c44 <memcpy+0xfc>
10003c3c:	2007883a 	mov	r3,r4
10003c40:	003ff406 	br	10003c14 <__alt_data_end+0xf8003c14>
10003c44:	f800283a 	ret
10003c48:	500d883a 	mov	r6,r10
10003c4c:	303ff11e 	bne	r6,zero,10003c14 <__alt_data_end+0xf8003c14>
10003c50:	003ffc06 	br	10003c44 <__alt_data_end+0xf8003c44>

10003c54 <strlen>:
10003c54:	208000cc 	andi	r2,r4,3
10003c58:	10001d26 	beq	r2,zero,10003cd0 <strlen+0x7c>
10003c5c:	20800007 	ldb	r2,0(r4)
10003c60:	10001d26 	beq	r2,zero,10003cd8 <strlen+0x84>
10003c64:	2005883a 	mov	r2,r4
10003c68:	00000206 	br	10003c74 <strlen+0x20>
10003c6c:	10c00007 	ldb	r3,0(r2)
10003c70:	18001526 	beq	r3,zero,10003cc8 <strlen+0x74>
10003c74:	10800044 	addi	r2,r2,1
10003c78:	10c000cc 	andi	r3,r2,3
10003c7c:	183ffb1e 	bne	r3,zero,10003c6c <__alt_data_end+0xf8003c6c>
10003c80:	10c00017 	ldw	r3,0(r2)
10003c84:	01ffbff4 	movhi	r7,65279
10003c88:	39ffbfc4 	addi	r7,r7,-257
10003c8c:	01a02074 	movhi	r6,32897
10003c90:	31a02004 	addi	r6,r6,-32640
10003c94:	00000206 	br	10003ca0 <strlen+0x4c>
10003c98:	10800104 	addi	r2,r2,4
10003c9c:	10c00017 	ldw	r3,0(r2)
10003ca0:	19cb883a 	add	r5,r3,r7
10003ca4:	00c6303a 	nor	r3,zero,r3
10003ca8:	28c6703a 	and	r3,r5,r3
10003cac:	1986703a 	and	r3,r3,r6
10003cb0:	183ff926 	beq	r3,zero,10003c98 <__alt_data_end+0xf8003c98>
10003cb4:	10c00007 	ldb	r3,0(r2)
10003cb8:	18000326 	beq	r3,zero,10003cc8 <strlen+0x74>
10003cbc:	10800044 	addi	r2,r2,1
10003cc0:	10c00007 	ldb	r3,0(r2)
10003cc4:	183ffd1e 	bne	r3,zero,10003cbc <__alt_data_end+0xf8003cbc>
10003cc8:	1105c83a 	sub	r2,r2,r4
10003ccc:	f800283a 	ret
10003cd0:	2005883a 	mov	r2,r4
10003cd4:	003fea06 	br	10003c80 <__alt_data_end+0xf8003c80>
10003cd8:	0005883a 	mov	r2,zero
10003cdc:	f800283a 	ret

10003ce0 <__register_exitproc>:
10003ce0:	defffa04 	addi	sp,sp,-24
10003ce4:	00840034 	movhi	r2,4096
10003ce8:	1096a104 	addi	r2,r2,23172
10003cec:	dc000315 	stw	r16,12(sp)
10003cf0:	14000017 	ldw	r16,0(r2)
10003cf4:	dc400415 	stw	r17,16(sp)
10003cf8:	dfc00515 	stw	ra,20(sp)
10003cfc:	80805217 	ldw	r2,328(r16)
10003d00:	2023883a 	mov	r17,r4
10003d04:	10003a26 	beq	r2,zero,10003df0 <__register_exitproc+0x110>
10003d08:	10c00117 	ldw	r3,4(r2)
10003d0c:	020007c4 	movi	r8,31
10003d10:	40c0190e 	bge	r8,r3,10003d78 <__register_exitproc+0x98>
10003d14:	00840034 	movhi	r2,4096
10003d18:	1083fe04 	addi	r2,r2,4088
10003d1c:	1000061e 	bne	r2,zero,10003d38 <__register_exitproc+0x58>
10003d20:	00bfffc4 	movi	r2,-1
10003d24:	dfc00517 	ldw	ra,20(sp)
10003d28:	dc400417 	ldw	r17,16(sp)
10003d2c:	dc000317 	ldw	r16,12(sp)
10003d30:	dec00604 	addi	sp,sp,24
10003d34:	f800283a 	ret
10003d38:	01006404 	movi	r4,400
10003d3c:	d9400015 	stw	r5,0(sp)
10003d40:	d9800115 	stw	r6,4(sp)
10003d44:	d9c00215 	stw	r7,8(sp)
10003d48:	0000ff80 	call	10000ff8 <malloc>
10003d4c:	d9400017 	ldw	r5,0(sp)
10003d50:	d9800117 	ldw	r6,4(sp)
10003d54:	d9c00217 	ldw	r7,8(sp)
10003d58:	103ff126 	beq	r2,zero,10003d20 <__alt_data_end+0xf8003d20>
10003d5c:	81005217 	ldw	r4,328(r16)
10003d60:	10000115 	stw	zero,4(r2)
10003d64:	0007883a 	mov	r3,zero
10003d68:	11000015 	stw	r4,0(r2)
10003d6c:	80805215 	stw	r2,328(r16)
10003d70:	10006215 	stw	zero,392(r2)
10003d74:	10006315 	stw	zero,396(r2)
10003d78:	88000d1e 	bne	r17,zero,10003db0 <__register_exitproc+0xd0>
10003d7c:	19000084 	addi	r4,r3,2
10003d80:	2109883a 	add	r4,r4,r4
10003d84:	18c00044 	addi	r3,r3,1
10003d88:	2109883a 	add	r4,r4,r4
10003d8c:	10c00115 	stw	r3,4(r2)
10003d90:	1105883a 	add	r2,r2,r4
10003d94:	11400015 	stw	r5,0(r2)
10003d98:	0005883a 	mov	r2,zero
10003d9c:	dfc00517 	ldw	ra,20(sp)
10003da0:	dc400417 	ldw	r17,16(sp)
10003da4:	dc000317 	ldw	r16,12(sp)
10003da8:	dec00604 	addi	sp,sp,24
10003dac:	f800283a 	ret
10003db0:	18c9883a 	add	r4,r3,r3
10003db4:	2109883a 	add	r4,r4,r4
10003db8:	1109883a 	add	r4,r2,r4
10003dbc:	21802215 	stw	r6,136(r4)
10003dc0:	01800044 	movi	r6,1
10003dc4:	12006217 	ldw	r8,392(r2)
10003dc8:	30cc983a 	sll	r6,r6,r3
10003dcc:	4190b03a 	or	r8,r8,r6
10003dd0:	12006215 	stw	r8,392(r2)
10003dd4:	21c04215 	stw	r7,264(r4)
10003dd8:	01000084 	movi	r4,2
10003ddc:	893fe71e 	bne	r17,r4,10003d7c <__alt_data_end+0xf8003d7c>
10003de0:	11006317 	ldw	r4,396(r2)
10003de4:	218cb03a 	or	r6,r4,r6
10003de8:	11806315 	stw	r6,396(r2)
10003dec:	003fe306 	br	10003d7c <__alt_data_end+0xf8003d7c>
10003df0:	80805304 	addi	r2,r16,332
10003df4:	80805215 	stw	r2,328(r16)
10003df8:	003fc306 	br	10003d08 <__alt_data_end+0xf8003d08>

10003dfc <__call_exitprocs>:
10003dfc:	00840034 	movhi	r2,4096
10003e00:	1096a104 	addi	r2,r2,23172
10003e04:	10800017 	ldw	r2,0(r2)
10003e08:	defff304 	addi	sp,sp,-52
10003e0c:	df000b15 	stw	fp,44(sp)
10003e10:	d8800015 	stw	r2,0(sp)
10003e14:	10805204 	addi	r2,r2,328
10003e18:	dd400815 	stw	r21,32(sp)
10003e1c:	dfc00c15 	stw	ra,48(sp)
10003e20:	ddc00a15 	stw	r23,40(sp)
10003e24:	dd800915 	stw	r22,36(sp)
10003e28:	dd000715 	stw	r20,28(sp)
10003e2c:	dcc00615 	stw	r19,24(sp)
10003e30:	dc800515 	stw	r18,20(sp)
10003e34:	dc400415 	stw	r17,16(sp)
10003e38:	dc000315 	stw	r16,12(sp)
10003e3c:	d9000115 	stw	r4,4(sp)
10003e40:	2839883a 	mov	fp,r5
10003e44:	d8800215 	stw	r2,8(sp)
10003e48:	057fffc4 	movi	r21,-1
10003e4c:	d8800017 	ldw	r2,0(sp)
10003e50:	14805217 	ldw	r18,328(r2)
10003e54:	90001826 	beq	r18,zero,10003eb8 <__call_exitprocs+0xbc>
10003e58:	ddc00217 	ldw	r23,8(sp)
10003e5c:	90c00117 	ldw	r3,4(r18)
10003e60:	1c3fffc4 	addi	r16,r3,-1
10003e64:	80001116 	blt	r16,zero,10003eac <__call_exitprocs+0xb0>
10003e68:	18c00044 	addi	r3,r3,1
10003e6c:	8427883a 	add	r19,r16,r16
10003e70:	18c7883a 	add	r3,r3,r3
10003e74:	95802204 	addi	r22,r18,136
10003e78:	9ce7883a 	add	r19,r19,r19
10003e7c:	18c7883a 	add	r3,r3,r3
10003e80:	b4e7883a 	add	r19,r22,r19
10003e84:	90e3883a 	add	r17,r18,r3
10003e88:	e0001726 	beq	fp,zero,10003ee8 <__call_exitprocs+0xec>
10003e8c:	8c87c83a 	sub	r3,r17,r18
10003e90:	b0c7883a 	add	r3,r22,r3
10003e94:	18c01e17 	ldw	r3,120(r3)
10003e98:	1f001326 	beq	r3,fp,10003ee8 <__call_exitprocs+0xec>
10003e9c:	843fffc4 	addi	r16,r16,-1
10003ea0:	9cffff04 	addi	r19,r19,-4
10003ea4:	8c7fff04 	addi	r17,r17,-4
10003ea8:	857ff71e 	bne	r16,r21,10003e88 <__alt_data_end+0xf8003e88>
10003eac:	00840034 	movhi	r2,4096
10003eb0:	10840304 	addi	r2,r2,4108
10003eb4:	10002a1e 	bne	r2,zero,10003f60 <__call_exitprocs+0x164>
10003eb8:	dfc00c17 	ldw	ra,48(sp)
10003ebc:	df000b17 	ldw	fp,44(sp)
10003ec0:	ddc00a17 	ldw	r23,40(sp)
10003ec4:	dd800917 	ldw	r22,36(sp)
10003ec8:	dd400817 	ldw	r21,32(sp)
10003ecc:	dd000717 	ldw	r20,28(sp)
10003ed0:	dcc00617 	ldw	r19,24(sp)
10003ed4:	dc800517 	ldw	r18,20(sp)
10003ed8:	dc400417 	ldw	r17,16(sp)
10003edc:	dc000317 	ldw	r16,12(sp)
10003ee0:	dec00d04 	addi	sp,sp,52
10003ee4:	f800283a 	ret
10003ee8:	91000117 	ldw	r4,4(r18)
10003eec:	88c00017 	ldw	r3,0(r17)
10003ef0:	213fffc4 	addi	r4,r4,-1
10003ef4:	24001526 	beq	r4,r16,10003f4c <__call_exitprocs+0x150>
10003ef8:	88000015 	stw	zero,0(r17)
10003efc:	183fe726 	beq	r3,zero,10003e9c <__alt_data_end+0xf8003e9c>
10003f00:	00800044 	movi	r2,1
10003f04:	1408983a 	sll	r4,r2,r16
10003f08:	91406217 	ldw	r5,392(r18)
10003f0c:	95000117 	ldw	r20,4(r18)
10003f10:	214a703a 	and	r5,r4,r5
10003f14:	28000b26 	beq	r5,zero,10003f44 <__call_exitprocs+0x148>
10003f18:	91406317 	ldw	r5,396(r18)
10003f1c:	2148703a 	and	r4,r4,r5
10003f20:	20000c1e 	bne	r4,zero,10003f54 <__call_exitprocs+0x158>
10003f24:	99400017 	ldw	r5,0(r19)
10003f28:	d9000117 	ldw	r4,4(sp)
10003f2c:	183ee83a 	callr	r3
10003f30:	90c00117 	ldw	r3,4(r18)
10003f34:	1d3fc51e 	bne	r3,r20,10003e4c <__alt_data_end+0xf8003e4c>
10003f38:	b8c00017 	ldw	r3,0(r23)
10003f3c:	1cbfd726 	beq	r3,r18,10003e9c <__alt_data_end+0xf8003e9c>
10003f40:	003fc206 	br	10003e4c <__alt_data_end+0xf8003e4c>
10003f44:	183ee83a 	callr	r3
10003f48:	003ff906 	br	10003f30 <__alt_data_end+0xf8003f30>
10003f4c:	94000115 	stw	r16,4(r18)
10003f50:	003fea06 	br	10003efc <__alt_data_end+0xf8003efc>
10003f54:	99000017 	ldw	r4,0(r19)
10003f58:	183ee83a 	callr	r3
10003f5c:	003ff406 	br	10003f30 <__alt_data_end+0xf8003f30>
10003f60:	90c00117 	ldw	r3,4(r18)
10003f64:	1800081e 	bne	r3,zero,10003f88 <__call_exitprocs+0x18c>
10003f68:	90c00017 	ldw	r3,0(r18)
10003f6c:	18000a26 	beq	r3,zero,10003f98 <__call_exitprocs+0x19c>
10003f70:	9009883a 	mov	r4,r18
10003f74:	b8c00015 	stw	r3,0(r23)
10003f78:	000100c0 	call	1000100c <free>
10003f7c:	bc800017 	ldw	r18,0(r23)
10003f80:	903fb61e 	bne	r18,zero,10003e5c <__alt_data_end+0xf8003e5c>
10003f84:	003fcc06 	br	10003eb8 <__alt_data_end+0xf8003eb8>
10003f88:	90c00017 	ldw	r3,0(r18)
10003f8c:	902f883a 	mov	r23,r18
10003f90:	1825883a 	mov	r18,r3
10003f94:	003ffa06 	br	10003f80 <__alt_data_end+0xf8003f80>
10003f98:	0007883a 	mov	r3,zero
10003f9c:	003ffb06 	br	10003f8c <__alt_data_end+0xf8003f8c>

10003fa0 <__mulsi3>:
10003fa0:	0005883a 	mov	r2,zero
10003fa4:	20000726 	beq	r4,zero,10003fc4 <__mulsi3+0x24>
10003fa8:	20c0004c 	andi	r3,r4,1
10003fac:	2008d07a 	srli	r4,r4,1
10003fb0:	18000126 	beq	r3,zero,10003fb8 <__mulsi3+0x18>
10003fb4:	1145883a 	add	r2,r2,r5
10003fb8:	294b883a 	add	r5,r5,r5
10003fbc:	203ffa1e 	bne	r4,zero,10003fa8 <__alt_data_end+0xf8003fa8>
10003fc0:	f800283a 	ret
10003fc4:	f800283a 	ret

10003fc8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10003fc8:	defffd04 	addi	sp,sp,-12
10003fcc:	df000215 	stw	fp,8(sp)
10003fd0:	df000204 	addi	fp,sp,8
10003fd4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10003fd8:	0001883a 	nop
10003fdc:	e0bfff17 	ldw	r2,-4(fp)
10003fe0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10003fe4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10003fe8:	10000226 	beq	r2,zero,10003ff4 <_exit+0x2c>
    ALT_SIM_FAIL();
10003fec:	002af070 	cmpltui	zero,zero,43969
10003ff0:	00000106 	br	10003ff8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10003ff4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10003ff8:	003fff06 	br	10003ff8 <__alt_data_end+0xf8003ff8>
